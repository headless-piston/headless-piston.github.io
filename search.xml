<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AC 自动机</title>
    <url>/2025/06/23/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>最近集训时将难一些的字符串题时发现自己似乎已经忘了，或者就根本没学懂过
AC 自动机，于是重学一遍。 ——2025.6.11 ### 功能 AC 自动机可以实现比 KMP
和 Trie
更多的字符串匹配方面的功能。比如求模式串是否在文本串中出现过，出现了多少次等。不同于
KMP，AC 自动机支持<strong>多模式串的匹配</strong>。可以认为，AC
自动机就是在 Trie 上进行
KMP，同样要求最长公共前后缀，只不过前缀可以从<strong>任意模式串</strong>中截取而非
KMP 的单一模式串。类似于 KMP 的 <span class="math inline">\(nxt\)</span>
数组，AC 自动机中称这个指针为 <span
class="math inline">\(fail\)</span>。 我们举个例子：若干模式串组成 Trie
<img
src="https://raw.githubusercontent.com/headless-piston/blog_images/refs/heads/main/AC.png"
alt="image" /> 为了防止过多 <span class="math inline">\(fail\)</span>
弄得图片过乱，我们只取一个例子：<span class="math inline">\(9\)</span>
节点处，我们发现有 <span class="math inline">\(0\)</span> 节点到 <span
class="math inline">\(2\)</span> 节点和 <span
class="math inline">\(7\)</span> 节点到 <span
class="math inline">\(9\)</span> 节点的最长公共前后缀
<code>he</code>。所以，类似 KMP，<span class="math inline">\(9\)</span>
处的 <span class="math inline">\(fail\)</span> 应指向 <span
class="math inline">\(2\)</span>。 ### 建树 那么，<span
class="math inline">\(fail\)</span> 究竟应该如何构建呢？我们使用 BFS
来遍历 Trie，在失配时不断跳 <span
class="math inline">\(fail\)</span>。</p>
<details>
<summary>
build AC automaton
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[u][i])&#123;</span><br><span class="line">                <span class="type">int</span> to=fail[u];</span><br><span class="line">                <span class="keyword">while</span>(to&amp;&amp;!nxt[to][i])</span><br><span class="line">                    to=fail[to];</span><br><span class="line">                fail[nxt[u][i]]=nxt[to][i];</span><br><span class="line">                q.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<p>然而，这样一直跳 <span class="math inline">\(fail\)</span>
效率太低了。我们可以在一开始就预处理出不存在的边的 <span
class="math inline">\(fail\)</span>，将查找 <span
class="math inline">\(fail\)</span> 优化至 <span
class="math inline">\(O(1)\)</span>。此时的 Trie 由树变为了图。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[u][i])&#123;</span><br><span class="line">                fail[nxt[u][i]]=nxt[fail[u]][i];</span><br><span class="line">                q.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> nxt[u][i]=nxt[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 多模式串匹配 我们以<a
href="https://www.luogu.com.cn/problem/P3808"
title="本题">本题</a>的匹配为例，只需每次跳 <span
class="math inline">\(fail\)</span> 并计数，打标记防止记重就好了。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        u=nxt[u][c];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=u;j&amp;&amp;ed[j]!=<span class="number">-1</span>;j=fail[j])</span><br><span class="line">            res+=ed[j],ed[j]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 效率优化 我们发现，匹配时一直在跳 <span
class="math inline">\(fail\)</span>，这个操作事实上是可以优化的。
显然，一个 AC 自动机上的 <span class="math inline">\(fail\)</span>
边应当会构成一棵内向树。因此可以进行拓扑排序优化。
按照拓扑序处理节点，累加出现次数。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> nxt[N][<span class="number">26</span>],tot,fail[N],n,ed[N],ans[N],indegree[N],mp[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(string s,<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[u][c]) nxt[u][c]=++tot;</span><br><span class="line">        u=nxt[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">    ++ed[u];</span><br><span class="line">    mp[id]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[u][i])&#123;</span><br><span class="line">                fail[nxt[u][i]]=nxt[fail[u]][i];</span><br><span class="line">                ++indegree[nxt[fail[u]][i]];</span><br><span class="line">                q.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> nxt[u][i]=nxt[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">topo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=tot;i++) <span class="keyword">if</span>(!indegree[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> v=fail[u];</span><br><span class="line">        ans[v]+=ans[u];</span><br><span class="line">        <span class="keyword">if</span>(!--indegree[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">query</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        u=nxt[u][c];</span><br><span class="line">        ans[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">string s,t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;s,<span class="built_in">insert</span>(s,i);</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">query</span>(t);</span><br><span class="line">    <span class="built_in">topo</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cout&lt;&lt;ans[mp[i]]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="习题">习题</h3>
<h4 id="poi-2000-病毒"><a href="https://www.luogu.com.cn/problem/P2444"
title="[POI 2000] 病毒">[POI 2000] 病毒</a></h4>
<p>建立 AC
自动机时判断，若某串的最长前缀是病毒，则它本身一定不合法。之后 dfs
判环就行，注意使用标记数组保证 dfs
的复杂度正确。<del>代码有点丑陋，为了卡常写了循环展开。</del></p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">3e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> nxt[N][<span class="number">2</span>],tot,n,fail[N];</span><br><span class="line"><span class="type">bool</span> ed[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[p][c^<span class="number">48</span>]) nxt[p][c^<span class="number">48</span>]=++tot;</span><br><span class="line">        p=nxt[p][c^<span class="number">48</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ed[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(nxt[<span class="number">0</span>][<span class="number">0</span>]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(nxt[<span class="number">0</span>][<span class="number">1</span>]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(nxt[u][<span class="number">0</span>])&#123;</span><br><span class="line">            fail[nxt[u][<span class="number">0</span>]]=nxt[fail[u]][<span class="number">0</span>];</span><br><span class="line">            q.<span class="built_in">push</span>(nxt[u][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> nxt[u][<span class="number">0</span>]=nxt[fail[u]][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(ed[fail[nxt[u][<span class="number">0</span>]]]) ed[nxt[u][<span class="number">0</span>]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nxt[u][<span class="number">1</span>])&#123;</span><br><span class="line">            fail[nxt[u][<span class="number">1</span>]]=nxt[fail[u]][<span class="number">1</span>];</span><br><span class="line">            q.<span class="built_in">push</span>(nxt[u][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> nxt[u][<span class="number">1</span>]=nxt[fail[u]][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(ed[fail[nxt[u][<span class="number">1</span>]]]) ed[nxt[u][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> vis[N],used[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(vis[nxt[u][<span class="number">0</span>]]||vis[nxt[u][<span class="number">1</span>]])&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;TAK\n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> p=nxt[u][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!used[p]&amp;&amp;!ed[p]) used[p]=<span class="number">1</span>,<span class="built_in">dfs</span>(p);</span><br><span class="line">    p=nxt[u][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(!used[p]&amp;&amp;!ed[p]) used[p]=<span class="number">1</span>,<span class="built_in">dfs</span>(p);</span><br><span class="line">    vis[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="built_in">insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;NIE\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h4 id="noi2011-阿狸的打字机"><a
href="https://www.luogu.com.cn/problem/P2414"
title="[NOI2011] 阿狸的打字机">[NOI2011] 阿狸的打字机</a></h4>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,tot,nxt[N][<span class="number">26</span>],fail[N],fa[N],endpos[N],nxt1[N][<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[u][i])&#123;</span><br><span class="line">                fail[nxt[u][i]]=nxt[fail[u]][i];</span><br><span class="line">                q.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> nxt[u][i]=nxt[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,id;</span><br><span class="line">    <span class="built_in">query</span>(<span class="type">int</span> x=<span class="number">0</span>,<span class="type">int</span> id=<span class="number">0</span>):<span class="built_in">x</span>(x),<span class="built_in">id</span>(id)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;query&gt; q[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="type">int</span> dfnl[N],dfnr[N],dfncnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsfail</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    dfnl[u]=++dfncnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u]) <span class="built_in">dfsfail</span>(v);</span><br><span class="line">    dfnr[u]=dfncnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="type">int</span> tree[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=dfncnt;x+=<span class="built_in">lowbit</span>(x)) tree[x]+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x^=<span class="built_in">lowbit</span>(x)) res+=tree[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfstrie</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">modify</span>(dfnl[u],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> temp:q[u])&#123;</span><br><span class="line">        <span class="type">int</span> id=temp.id,x=temp.x;</span><br><span class="line">        ans[id]=<span class="built_in">ask</span>(dfnr[x])-<span class="built_in">ask</span>(dfnl[x]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> v=nxt1[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfstrie</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">modify</span>(dfnl[u],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!nxt[p][c-<span class="string">&#x27;a&#x27;</span>]) nxt[p][c-<span class="string">&#x27;a&#x27;</span>]=++tot;</span><br><span class="line">            fa[nxt[p][c-<span class="string">&#x27;a&#x27;</span>]]=p;</span><br><span class="line">            p=nxt[p][c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;P&#x27;</span>) endpos[++n]=p;</span><br><span class="line">        <span class="keyword">else</span> p=fa[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(nxt1,nxt,<span class="built_in">sizeof</span>(nxt));</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        q[endpos[y]].<span class="built_in">push_back</span>(<span class="built_in">query</span>(endpos[x],i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        e[fail[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="built_in">dfsfail</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfstrie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<p>图片来源：</p>
<p>https://oi-wiki.org/string/ac-automaton/</p>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Manacher</title>
    <url>/2025/07/05/Manacher/</url>
    <content><![CDATA[<p>今天讲的字符串哈希题觉得都很水啊，咋一听到 Manacher
题就懵逼了呢？重学一遍…… ### 简介 给定一个长度为 <span
class="math inline">\(n\)</span> 的字符串 <span
class="math inline">\(S\)</span>，找到所有回文子串。<br />
最坏情况下有 <span class="math inline">\(O(n^2)\)</span>
个回文串，为了做到线性，我们使用回文半径来表示回文。这样，我们要求的就转化为：对于每个位置
<span class="math inline">\(i\)</span>，求出最长回文半径。<br />
使用字符串哈希可以容易地在 <span class="math inline">\(O(n\log
n)\)</span> 时间内解决，但 Manacher 更为简洁和高效。<br />
### 实现过程 约定：<span class="math inline">\([l,r]\)</span> 表示下标在
<span class="math inline">\(l,r\)</span> 之间的子串。<br />
我们只考虑长度为奇数的回文串，可以通过在字符串每个字符间加入无关字符如
<code>#</code>
等来把长度为偶数的串转化为长度为奇数的串。接下来，我们维护 <span
class="math inline">\(p_i\)</span> 表示以 <span
class="math inline">\(i\)</span> 为重心的回文半径，<span
class="math inline">\(r\)</span>
为当前找到的覆盖位置最靠右的回文串能覆盖到的最大下标，<span
class="math inline">\(mid\)</span> 表示它的回文中心的下标。<br />
计算过程考虑分类讨论： - <span class="math inline">\(i&gt;r\)</span>
时，直接暴力一步步向后跳。 - <span class="math inline">\(i\le r\)</span>
时，设 <span class="math inline">\(j\)</span> 为 <span
class="math inline">\(i\)</span> 关于 <span
class="math inline">\(mid\)</span> 的对称点，即 <span
class="math inline">\(mid\times 2-i\)</span>。<br />
由于 <span class="math inline">\([j-p_j,j+p_j]\)</span> 与 <span
class="math inline">\([i-p_i,i+p_i]\)</span> 相等且都是回文串，所以
<span class="math inline">\(p_i\)</span> 可以直接取 <span
class="math inline">\(p_j\)</span> 的值。但这个推论成立当且仅当 <span
class="math inline">\(i+p_j\le r\)</span>，否则 <span
class="math inline">\(p_i\)</span> 只能取到 <span
class="math inline">\(r-i+1\)</span>，然后再暴力扩展。<br />
综上，<span class="math inline">\(p_i=\min(p_j,r-i+1)\)</span>。</p>
<p><span class="math inline">\(r\)</span> 只能向右移动，故最多移动 <span
class="math inline">\(O(n)\)</span> 次。其余情况的计算显然是 <span
class="math inline">\(O(1)\)</span> 的。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,r=<span class="number">0</span>,mid=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">2</span>*mid-i;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=r) p[i]=<span class="built_in">min</span>(r-i<span class="number">+1</span>,p[j]);</span><br><span class="line">    <span class="keyword">else</span> p[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i-p[i]]==s[i+p[i]]) ++p[i];</span><br><span class="line">    <span class="keyword">if</span>(i+p[i]<span class="number">-1</span>&gt;r)&#123;</span><br><span class="line">        r=i+p[i]<span class="number">-1</span>;</span><br><span class="line">        mid=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>部分引自 https://oi-wiki.org/string/manacher/</p>
<p>非常感谢<a
href="https://www.luogu.com.cn/article/2fmdma9m">这篇博客</a>，讲的很透彻，帮我彻底弄懂了
Manacher。 https://www.luogu.com.cn/article/2fmdma9m</p>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>DP 题目合集</title>
    <url>/2025/07/04/DP%20%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h3 id="osu">OSU!</h3>
<p>之前做过。 ### <a href="https://www.luogu.com.cn/problem/P9119"
title="[春季测试 2023] 圣诞树">[春季测试 2023] 圣诞树</a>
好题。因为三角形两边和大于第三边，所以路径不交叉一定比路径交叉优。那么考虑区间
DP。首先断环为链，设 <span class="math inline">\(dp_{l,r,0/1}\)</span>
表示当前已经走完了区间 <span
class="math inline">\([l,r]\)</span>，当前在区间最左/右侧。同时记录
<span class="math inline">\(pre_{l,r,0/1}\)</span> 表示对应状态的 <span
class="math inline">\(dp\)</span>
是从上一步的左/右侧转移过来的。输出直接递归或用栈就可以了。注意：由于坐标可以为负，所以一定注意边界条件。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e3</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">&#125;node[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">double</span> dp[N&lt;&lt;<span class="number">1</span>][N&lt;&lt;<span class="number">1</span>][<span class="number">2</span>],ans;</span><br><span class="line"><span class="type">int</span> pre[N&lt;&lt;<span class="number">1</span>][N&lt;&lt;<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(<span class="type">const</span> Node &amp;a,<span class="type">const</span> Node &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> x=a.x-b.x,y=a.y-b.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,node[l].id);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p)&#123;</span><br><span class="line">        <span class="built_in">print</span>(l,r<span class="number">-1</span>,pre[l][r][p]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,node[r].id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(l<span class="number">+1</span>,r,pre[l][r][p]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,node[l].id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    node[s].y=<span class="number">-0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;node[i].x&gt;&gt;node[i].y;</span><br><span class="line">        node[i].id=i;</span><br><span class="line">        node[i+n]=node[i];</span><br><span class="line">        <span class="keyword">if</span>(node[i].y&gt;node[s].y) s=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>);i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=(n&lt;&lt;<span class="number">1</span>);j++)</span><br><span class="line">            dp[i][j][<span class="number">0</span>]=dp[i][j][<span class="number">1</span>]=<span class="number">0x7fffffff</span>;</span><br><span class="line">    dp[s][s][<span class="number">0</span>]=dp[s][s][<span class="number">1</span>]=dp[s+n][s+n][<span class="number">0</span>]=dp[s+n][s+n][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=n;len++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r=l+len<span class="number">-1</span>;r&lt;=(n&lt;&lt;<span class="number">1</span>);l++,r++)&#123;</span><br><span class="line">            <span class="comment">//0 left ,1 right</span></span><br><span class="line">            <span class="type">double</span> a=dp[l<span class="number">+1</span>][r][<span class="number">0</span>]+<span class="built_in">dis</span>(node[l],node[l<span class="number">+1</span>]),b=dp[l<span class="number">+1</span>][r][<span class="number">1</span>]+<span class="built_in">dis</span>(node[l],node[r]);</span><br><span class="line">            <span class="keyword">if</span>(a&gt;b) dp[l][r][<span class="number">0</span>]=b,pre[l][r][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[l][r][<span class="number">0</span>]=a,pre[l][r][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            a=dp[l][r<span class="number">-1</span>][<span class="number">1</span>]+<span class="built_in">dis</span>(node[r<span class="number">-1</span>],node[r]),b=dp[l][r<span class="number">-1</span>][<span class="number">0</span>]+<span class="built_in">dis</span>(node[l],node[r]);</span><br><span class="line">            <span class="keyword">if</span>(a&gt;b) dp[l][r][<span class="number">1</span>]=b,pre[l][r][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[l][r][<span class="number">1</span>]=a,pre[l][r][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    ans=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ans=<span class="built_in">min</span>(&#123;ans,dp[i][i+n<span class="number">-1</span>][<span class="number">0</span>],dp[i][i+n<span class="number">-1</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][i+n<span class="number">-1</span>][<span class="number">0</span>]==ans)&#123;</span><br><span class="line">            <span class="built_in">print</span>(i,i+n<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][i+n<span class="number">-1</span>][<span class="number">1</span>]==ans)&#123;</span><br><span class="line">            <span class="built_in">print</span>(i,i+n<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="jsoi2018-潜入行动"><a
href="https://www.luogu.com.cn/problem/P4516"
title="[JSOI2018] 潜入行动">[JSOI2018] 潜入行动</a></h3>
<p>树上背包。朴素的状态不足以表达信息时就考虑加状态。<span
class="math inline">\(dp_{u,i,0/1,0/1}\)</span> 表示以 <span
class="math inline">\(u\)</span> 为根的子树中，放了 <span
class="math inline">\(i\)</span> 个监视器，点 <span
class="math inline">\(u\)</span> 放/不放，点 <span
class="math inline">\(u\)</span>
是/否被覆盖。转移时涉及滚动数组，所以我们记 <span
class="math inline">\(temp_{i,0/1,0/1}\)</span> 表示当前的 <span
class="math inline">\(dp_{u,i,0/1,0/1}\)</span>。 转移有点麻烦： <span
class="math display">\[dp_{u,i+j,0,0}=\sum temp_{i,0,0}\times
dp_{v,j,0,1}\]</span> <span class="math display">\[dp_{u,i+j,1,0}=\sum
temp_{i,1,0}\times dp_{v,j,0,0/1}\]</span> <span
class="math display">\[dp_{u,i+j,0,1}=\sum temp_{i,0,0}\times
dp_{v,j,1,1}+temp_{i,0,1}\times dp_{v,j,0/1,1}\]</span> <span
class="math display">\[dp_{u,i+j,1,1}=\sum temp_{i,1,0}\times
dp_{v,j,1,0/1}+temp_{i,1,1}\times dp_{v,j,0/1,0/1}\]</span></p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">1e9</span><span class="number">+7</span>,N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">modint</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="built_in">modint</span>(<span class="type">int</span> val=<span class="number">0</span>):<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">    modint <span class="keyword">operator</span>+(<span class="type">const</span> modint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="built_in">modint</span>((val+x.val)%mod);&#125;</span><br><span class="line">    modint &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> modint &amp;x)&#123;val+=x.val;val%=mod;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    modint <span class="keyword">operator</span>*(<span class="type">const</span> modint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="built_in">modint</span>((ll)val*x.val%mod);&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="type">int</span> n,k,siz[N];</span><br><span class="line">modint dp[N][<span class="number">110</span>][<span class="number">2</span>][<span class="number">2</span>],temp[<span class="number">110</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    dp[u][<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]=dp[u][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k;i++)&#123;</span><br><span class="line">            temp[i][<span class="number">0</span>][<span class="number">0</span>]=dp[u][i][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            temp[i][<span class="number">0</span>][<span class="number">1</span>]=dp[u][i][<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">            temp[i][<span class="number">1</span>][<span class="number">0</span>]=dp[u][i][<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            temp[i][<span class="number">1</span>][<span class="number">1</span>]=dp[u][i][<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            dp[u][i][<span class="number">0</span>][<span class="number">0</span>]=dp[u][i][<span class="number">0</span>][<span class="number">1</span>]=dp[u][i][<span class="number">1</span>][<span class="number">0</span>]=dp[u][i][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">min</span>(siz[u],k);i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="built_in">min</span>(siz[v],k-i);j++)&#123;</span><br><span class="line">                dp[u][i+j][<span class="number">0</span>][<span class="number">0</span>]+=temp[i][<span class="number">0</span>][<span class="number">0</span>]*dp[v][j][<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">                dp[u][i+j][<span class="number">1</span>][<span class="number">0</span>]+=temp[i][<span class="number">1</span>][<span class="number">0</span>]*(dp[v][j][<span class="number">0</span>][<span class="number">0</span>]+dp[v][j][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">                dp[u][i+j][<span class="number">0</span>][<span class="number">1</span>]+=temp[i][<span class="number">0</span>][<span class="number">0</span>]*dp[v][j][<span class="number">1</span>][<span class="number">1</span>]+</span><br><span class="line">                temp[i][<span class="number">0</span>][<span class="number">1</span>]*(dp[v][j][<span class="number">0</span>][<span class="number">1</span>]+dp[v][j][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                dp[u][i+j][<span class="number">1</span>][<span class="number">1</span>]+=temp[i][<span class="number">1</span>][<span class="number">0</span>]*(dp[v][j][<span class="number">1</span>][<span class="number">0</span>]+dp[v][j][<span class="number">1</span>][<span class="number">1</span>])+</span><br><span class="line">                temp[i][<span class="number">1</span>][<span class="number">1</span>]*(dp[v][j][<span class="number">0</span>][<span class="number">0</span>]+dp[v][j][<span class="number">0</span>][<span class="number">1</span>]+dp[v][j][<span class="number">1</span>][<span class="number">0</span>]+dp[v][j][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(dp[<span class="number">1</span>][k][<span class="number">0</span>][<span class="number">1</span>]+dp[<span class="number">1</span>][k][<span class="number">1</span>][<span class="number">1</span>]).val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="at_dp_e-knapsack-2"><a
href="https://atcoder.jp/contests/dp/tasks/dp_e"
title="AT_dp_e Knapsack 2">AT_dp_e Knapsack 2</a></h3>
<p>背包变形。将 <span class="math inline">\(v\)</span> 和 <span
class="math inline">\(w\)</span> 互换一下就行。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;<span class="keyword">return</span> a&lt;b?a:b;&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,W,w,v,sum;</span><br><span class="line">ll dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,W);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(w,v);</span><br><span class="line">        sum+=v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=sum;j&gt;=v;j--)</span><br><span class="line">            dp[j]=<span class="built_in">Min</span>(dp[j],dp[j-v]+w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=sum;i;i--)</span><br><span class="line">        <span class="keyword">if</span>(dp[i]&lt;=W)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="at_dp_j-sushi"><a
href="https://www.luogu.com.cn/problem/AT_dp_j"
title="AT_dp_j Sushi">AT_dp_j Sushi</a></h3>
<p><span class="math inline">\(dp_{i,j,k}\)</span> 表示有 <span
class="math inline">\(i\)</span> 个装 <span
class="math inline">\(1\)</span> 个寿司，<span
class="math inline">\(j\)</span> 个装 <span
class="math inline">\(2\)</span> 个寿司和 <span
class="math inline">\(k\)</span> 个装 <span
class="math inline">\(3\)</span> 个寿司的盘子的期望次数。<span
class="math inline">\(dp_{i,j,k}\)</span> 为以下四项之和： - <span
class="math inline">\(\dfrac{n-(i+j+k)}{n}\times
(dp_{i,j,k}+1)\)</span>（空盘子）</p>
<ul>
<li><p><span class="math inline">\(\dfrac{i}{n}\times
(dp_{i-1,j,k}+1)\)</span>（放 <span class="math inline">\(1\)</span>
个）</p></li>
<li><p><span class="math inline">\(\dfrac{j}{n}\times
(dp_{i+1,j-1,k}+1)\)</span>（放 <span class="math inline">\(2\)</span>
个）</p></li>
<li><p><span class="math inline">\(\dfrac{k}{n}\times
(dp_{i,j+1,k-1}+1)\)</span>（放 <span class="math inline">\(3\)</span>
个）</p></li>
</ul>
<p>整理，得 <span
class="math display">\[dp_{i,j,k}=\frac{n}{i+j+k}+\frac{i\times
dp_{i-1,j,k}}{i+j+k}+\frac{j\times dp_{i+1,j-1,k}}{i+j+k}+\frac{k\times
dp_{i,j+1,k-1}}{i+j+k}\]</span> 显然，应当按 <span
class="math inline">\(k-j-i\)</span> 顺序枚举以消除后效性。边界：<span
class="math inline">\(dp_{0,0,0}=0\)</span>。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> n,cnt[<span class="number">4</span>];</span><br><span class="line"><span class="type">double</span> dp[N][N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a;i&lt;=n;i++) <span class="built_in">read</span>(a),++cnt[a];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j&amp;&amp;j==k&amp;&amp;k==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">double</span> inv=i+j+k;</span><br><span class="line">                dp[i][j][k]=n/inv;</span><br><span class="line">                <span class="keyword">if</span>(i) dp[i][j][k]+=dp[i<span class="number">-1</span>][j][k]*i/inv;</span><br><span class="line">                <span class="keyword">if</span>(j) dp[i][j][k]+=dp[i<span class="number">+1</span>][j<span class="number">-1</span>][k]*j/inv;</span><br><span class="line">                <span class="keyword">if</span>(k) dp[i][j][k]+=dp[i][j<span class="number">+1</span>][k<span class="number">-1</span>]*k/inv;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10lf&quot;</span>,dp[cnt[<span class="number">1</span>]][cnt[<span class="number">2</span>]][cnt[<span class="number">3</span>]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>FFT 快速傅里叶变换</title>
    <url>/2025/07/04/FFT%20%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="前置知识">前置知识</h3>
<p>默认你已经学过复数。没有的话右转高中数学 A 版必修二。 #### 多项式
形如 <span class="math display">\[F(x)=\sum_{i=0}^n a_i x^i\]</span>
的式子。其中 <span class="math inline">\(n\)</span> 为非负整数，<span
class="math inline">\(a_i\)</span> 属于<a
href="https://baike.baidu.com/item/%E6%95%B0%E5%9F%9F/1259870"
title="数域">数域</a> <span
class="math inline">\(P\)</span>。我们只需知道所有 <span
class="math inline">\(a_i\)</span>，就可以确定一个多项式。这就是多项式的系数表示法。
为了方便运算，我们引入多项式的点值表示法。 对于一个 <span
class="math inline">\(n\)</span> 次多项式 <span
class="math inline">\(F(x)\)</span>，我们可以用 <span
class="math inline">\(n+1\)</span> 个互不相同的点 <span
class="math inline">\(\{(x_0,F(x_0)),(x_1,F(x_1)),\cdots,(x_{n+1},F(x_{n+1}))\}\)</span>
来确定这个多项式。我们下文称这个集合为 <span
class="math inline">\(S_{F(x)}\)</span>。
系数表示法转为点值表示法的过程叫做 DFT，反之叫 IDFT。 #### 四则运算
只说乘法。 现有多项式 <span class="math inline">\(F(x)=\sum_{i=0}^n a_i
x^i\)</span> 和 <span class="math inline">\(G(x)=\sum_{j=0}^m b_j
x^j\)</span>。则有 <span class="math display">\[F(x)\times
G(x)=\sum_{i=0}^n\sum_{j=0}^ma_ib_jx^{i+j}\]</span> #### 卷积
事实上，卷积运算和多项式乘法在数学上是等价的。<span
class="math inline">\(H(x)=F(x) * G(x)\)</span> 表示 <span
class="math inline">\(H(x)\)</span> 为 <span
class="math inline">\(F(x)\)</span> 和 <span
class="math inline">\(G(x)\)</span> 的卷积。
刚才的多项式乘法求得的式子并不是标准的多项式形式。我们设 <span
class="math inline">\(H(x)=F(x) *
G(x)=\sum_{k=0}^{n+m}c_kx^k\)</span>。则每项的系数 <span
class="math inline">\(c_k=\sum_{i+j=k}a_ib_j\)</span>，变为更容易计算的形式
<span
class="math display">\[c_k=\sum_{i=\max(0,k-m)}^{\min(n,k)}a_ib_{k-i}\]</span>
若使用点值表示法，设 <span
class="math display">\[S_{F(x)}=\{(x_i,y_i)\}\]</span> <span
class="math display">\[S_{G(x)}=\{(x_i,y&#39;_i)\}\]</span> 则有 <span
class="math display">\[S_{H(x)}=\{(x_i,y_iy&#39;_i)\}\]</span> ####
单位根 根据<a
href="https://baike.baidu.com/item/%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/18104?fromModule=lemma_inlink"
title="代数基本定理">代数基本定理</a>，<span
class="math inline">\(x^n=1\)</span> 有 <span
class="math inline">\(n\)</span> 个根，这 <span
class="math inline">\(n\)</span> 个根都称为单位根。记作 <span
class="math inline">\(\{\omega_n^k\mid
k=0,1,\cdots,n-1\}\)</span>，其中，<span
class="math inline">\(\omega_n^0=1\)</span>。在复平面上，它们刚好将单位圆
<span class="math inline">\(n\)</span> 等分。一般说的单位根 <span
class="math inline">\(\omega_n\)</span>，指从 <span
class="math inline">\((1,0)\)</span> 开始逆时针方向上的第一个根。
一些下面会用到的小式子： - 对于偶数次单位根，有 <span
class="math inline">\(\omega_n^i=-\omega_n^{i+\frac{n}{2}}\)</span>（其实就是在复平面上关于原点中心对称）。
- <span class="math inline">\(\omega_{2n}^{2k}=\omega_n^k\)</span> -
<span class="math inline">\((\omega_n^k)^2=\omega_n^{2k}\)</span> ### <a
href="https://www.luogu.com.cn/problem/P3803" title="FFT">FFT</a>
显然，朴素算法求解 <span class="math inline">\(F(x) * G(x)\)</span>
的时间复杂度为 <span class="math inline">\(O(nm)\)</span>，而 FFT
可以让我们在 <span class="math inline">\(O(n\log n)\)</span>
的时间复杂度内计算两个 <span class="math inline">\(n\)</span>
次多项式的乘法。基本思想是分治。 我们只需对 <span
class="math inline">\(F(x)\)</span> 和 <span
class="math inline">\(G(x)\)</span> 进行 DFT，计算 <span
class="math inline">\(S_{H(x)}=S_{F(x)}*S_{G(x)}\)</span>，最后再对
<span class="math inline">\(S_{H(x)}\)</span> IDFT 即得 <span
class="math inline">\(H(x)\)</span>。 接下来说 DFT 的过程。 对于 <span
class="math inline">\(F(x)\)</span>，将其划分为奇次与偶次两部分。 <span
class="math display">\[F(x)=\sum_{i=0}^{\frac{n}{2}}a_{2i}x^{2i}+\sum_{i=0}^{\frac{n}{2}}a_{2i+1}x^{2i+1}\]</span>
将右半部分提出一个 <span class="math inline">\(x\)</span> <span
class="math display">\[F(x)=\sum_{i=0}^{\frac{n}{2}}a_{2i}x^{2i}+x\sum_{i=0}^{\frac{n}{2}}a_{2i+1}x^{2i}\]</span>
将前后两部分用新的多项式表示 <span
class="math display">\[F_1(x)=\sum_{i=0}^{\frac{n}{2}}a_{2i}x^{i}\]</span>
<span
class="math display">\[F_2(x)=\sum_{i=0}^{\frac{n}{2}}a_{2i+1}x^{i}\]</span>
<span class="math display">\[F(x)=F_1(x^2)+xF_2(x^2)\]</span>
这时我们代入 <span class="math inline">\(\omega_n^k\)</span>，可得 <span
class="math display">\[\begin{aligned}
F(\omega_n^k)&amp;=F_1((\omega_n^k)^2)+\omega_n^kF_2((\omega_n^k)^2)\\
&amp;=F_1(\omega_n^{2k})+\omega_n^kF_2(\omega_n^{2k})\\
&amp;=F_1(\omega_\frac{n}{2}^k)+\omega_n^kF_2(\omega_\frac{n}{2}^k)
\end{aligned}\]</span> 同理，代入 <span
class="math inline">\(\omega_n^{k+\frac{n}{2}}=-\omega_n^k\)</span>，得
<span
class="math display">\[F(\omega_n^{k+\frac{n}{2}})=F_1(\omega_\frac{n}{2}^k)-\omega_n^kF_2(\omega_\frac{n}{2}^k)\]</span>
所以，我们可以根据 <span
class="math inline">\(F_1(\omega_\frac{n}{2}^k)\)</span> 和 <span
class="math inline">\(F_2(\omega_\frac{n}{2}^k)\)</span> 求出 <span
class="math inline">\(F(\omega_n^k)\)</span> 和 <span
class="math inline">\(F(\omega_n^{k+\frac{n}{2}})\)</span>。这种做法只能处理长度为
<span class="math inline">\(2\)</span>
的正整次幂的多项式，所以我们要把高次系数补为 <span
class="math inline">\(0\)</span>。 接下来是 IDFT。它的操作与 DFT
极像，就是将 <span class="math inline">\(\omega_n^k\)</span> 变为 <span
class="math inline">\(\omega_n^{-k}\)</span>，并在最后乘 <span
class="math inline">\(\dfrac{1}{n}\)</span>。
现实计算中，递归处理效率较低，我们使用位逆序置换优化和蝶形运算优化，直接将值排列为特定的顺序，避免了递归和额外的临时数组。
#### 位逆序置换优化 我们要想避免递归，就要将需要一起计算的部分放在一起。
我们以 <span class="math inline">\(7\)</span> 次多项式为例，有 <span
class="math inline">\(8\)</span> 个 <span
class="math inline">\(a_i\)</span>，具体划分方式如图 <img
src="https://github.com/headless-piston/blog_images/blob/main/FFT.png?raw=true"
alt="image" />
规律很难注意到，我直接说了，就是将每个下标的二进制反转，以反转后的数为新下标。例如，<span
class="math inline">\(3\)</span> 的二进制是 <span
class="math inline">\(011\)</span>，反转后为 <span
class="math inline">\(110\)</span>，即 <span
class="math inline">\(6\)</span>，从图上来看，<span
class="math inline">\(a_3\)</span> 确实到了原 <span
class="math inline">\(a_6\)</span> 的位置。 #### 蝶形运算优化
位逆序置换后，我们可以直接计算 <span
class="math inline">\(F_1(x)\)</span> 和 <span
class="math inline">\(F_2(x)\)</span>
而无需临时数组，因为计算要用到的数与计算完成后的数应当被存在相同的下标内，直接覆盖原数就行了。具体地，计算
<span class="math inline">\(F(\omega_n^k)\)</span> 和 <span
class="math inline">\(F(\omega_n^{k+\frac{n}{2}})\)</span> 时 <span
class="math inline">\(F_1(\omega_\frac{n}{2}^k)\)</span> 的值在下标
<span class="math inline">\(k\)</span>，<span
class="math inline">\(F_2(\omega_\frac{n}{2}^k)\)</span> 的值在下标
<span class="math inline">\(k+\frac{n}{2}\)</span>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1</span>&lt;&lt;<span class="number">22</span>;<span class="comment">//要开略大一些因为len可能会大于n+m</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI=<span class="number">4</span>*<span class="built_in">atan</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> n,m,a[N],b[N],len=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">comp</span>&#123;</span><br><span class="line">	<span class="type">double</span> real,imag;</span><br><span class="line">&#125;fa[N],fb[N],fc[N];</span><br><span class="line">comp <span class="keyword">operator</span>+(<span class="type">const</span> comp &amp;x,<span class="type">const</span> comp &amp;y)&#123;</span><br><span class="line">	<span class="keyword">return</span> comp&#123;x.real+y.real,x.imag+y.imag&#125;;</span><br><span class="line">&#125;</span><br><span class="line">comp <span class="keyword">operator</span>-(<span class="type">const</span> comp &amp;x,<span class="type">const</span> comp &amp;y)&#123;</span><br><span class="line">	<span class="keyword">return</span> comp&#123;x.real-y.real,x.imag-y.imag&#125;;</span><br><span class="line">&#125;</span><br><span class="line">comp <span class="keyword">operator</span>*(<span class="type">const</span> comp &amp;x,<span class="type">const</span> comp &amp;y)&#123;</span><br><span class="line">	<span class="keyword">return</span> comp&#123;x.real*y.real-x.imag*y.imag,x.real*y.imag+y.real*x.imag&#125;;</span><br><span class="line">&#125;</span><br><span class="line">comp <span class="keyword">operator</span>/(<span class="type">const</span> comp &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;</span><br><span class="line">	<span class="keyword">return</span> comp&#123;x.real/(<span class="type">double</span>)y,x.imag/(<span class="type">double</span>)y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(comp *f,<span class="type">int</span> n,<span class="type">int</span> rev)</span></span>&#123;<span class="comment">//rev=1代表DFT，rev=-1代表IDFT</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=n&gt;&gt;<span class="number">1</span>,k;i&lt;n<span class="number">-1</span>;i++)&#123;<span class="comment">//位逆序置换，0和n-1不用换</span></span><br><span class="line">		<span class="keyword">if</span>(i&lt;j)<span class="comment">//j即i的二进制反转，判断i&lt;j是为了保证只交换1次</span></span><br><span class="line">			<span class="built_in">swap</span>(f[i],f[j]);</span><br><span class="line">		k=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(j&gt;=k)&#123;<span class="comment">//清除高位</span></span><br><span class="line">			j-=k;</span><br><span class="line">			k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		j+=k;<span class="comment">//更新低位</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="type">double</span> arg=<span class="number">2</span>*PI*rev/len;</span><br><span class="line">		comp wn=&#123;<span class="built_in">cos</span>(arg),<span class="built_in">sin</span>(arg)&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=len)&#123;</span><br><span class="line">			comp w=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len/<span class="number">2</span>;j++)&#123;</span><br><span class="line">				comp f1=f[i+j];</span><br><span class="line">				comp f2=f[i+j+len/<span class="number">2</span>];</span><br><span class="line">				f[i+j]=f1+w*f2;</span><br><span class="line">				f[i+j+len/<span class="number">2</span>]=f1-w*f2;</span><br><span class="line">				w=w*wn;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!~rev)<span class="comment">//IDFT的最后除以n操作</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">			f[i]=f[i]/n;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,b+i);</span><br><span class="line">	<span class="keyword">while</span>(len&lt;=n+m)</span><br><span class="line">		len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">		fa[i]=&#123;(<span class="type">double</span>)a[i],<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">		fb[i]=&#123;(<span class="type">double</span>)b[i],<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">FFT</span>(fa,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">FFT</span>(fb,len,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">		fc[i]=fa[i]*fb[i];</span><br><span class="line">	<span class="built_in">FFT</span>(fc,len,<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(<span class="type">int</span>)<span class="built_in">round</span>(fc[i].real));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ####
其他优化 可以预处理单位根，无需在变换过程中计算，以提高效率和精度。 ###
参考资料 https://www.cnblogs.com/Kenma/p/18813688</p>
<p>https://oi-wiki.org/math/poly/fft/</p>
<p><a href="https://grok.com/"
title="特别鸣谢">特别鸣谢</a>，解决了我在数学上的一些疑惑。</p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Segment Tree Beats</title>
    <url>/2025/07/04/Segment%20Tree%20Beats/</url>
    <content><![CDATA[<h3 id="区间最值操作">区间最值操作</h3>
<p>先来一道<a href="https://acm.hdu.edu.cn/showproblem.php?pid=5306"
title="例题">例题</a>。
这道题要求维护区间和，区间最大值以及<strong>区间最值操作</strong>。
区间和与区间最大值可以轻易地使用普通线段树维护，但这个<strong>区间最值操作</strong>是我们要研究的重点。
区间最值操作，说人话就是给出一个值 <span
class="math inline">\(t\)</span>，将区间内各元素的值限制在 <span
class="math inline">\(t\)</span> 以下（或以上）。也就是令区间内所有值对
<span class="math inline">\(t\)</span> 取 <span
class="math inline">\(\max\)</span>（或 <span
class="math inline">\(\min\)</span>）。例题是区间 <span
class="math inline">\(\min\)</span>。 对于线段树的每个节点，维护区间和
<span class="math inline">\(sum\)</span>，区间最大值 <span
class="math inline">\(maxn\)</span>，区间严格次大值 <span
class="math inline">\(se\)</span> 和最大值个数 <span
class="math inline">\(cnt\)</span>。 接下来，对于区间 <span
class="math inline">\(\min\)</span> 操作 - 若 <span
class="math inline">\(maxn&lt;t\)</span>，则显然操作无效，直接退出。 -
若 <span
class="math inline">\(se&lt;t&lt;maxn\)</span>，则修改只会影响到区间最大值，令
<span class="math inline">\(sum\gets sum-cnt \cdot
(maxn-t)\)</span>，<span class="math inline">\(maxn \gets
t\)</span>，打标记然后退出。 - 若 <span class="math inline">\(se\ge
t\)</span>，进入左右儿子递归搜索，然后上传信息。</p>
<p>可以证明，此法时间复杂度为 <span class="math inline">\(O(m\log
n)\)</span>。 <a
href="https://github.com/OI-wiki/libs/blob/master/%E9%9B%86%E8%AE%AD%E9%98%9F%E5%8E%86%E5%B9%B4%E8%AE%BA%E6%96%87/%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F2016%E8%AE%BA%E6%96%87%E9%9B%86.pdf"
title="证明详见 P104~105。">证明详见 P104~105。</a> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls u*2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs u*2+1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> t,n,m,a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line">	<span class="type">int</span> maxn,se,cnt;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> sum;</span><br><span class="line">&#125;tree[N*<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> tag[N*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	tree[u].sum=tree[ls].sum+tree[rs].sum;</span><br><span class="line">	tree[u].maxn=<span class="built_in">max</span>(tree[ls].maxn,tree[rs].maxn);</span><br><span class="line">	tree[u].cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].maxn==tree[ls].maxn)</span><br><span class="line">		tree[u].cnt+=tree[ls].cnt;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].maxn==tree[rs].maxn)</span><br><span class="line">		tree[u].cnt+=tree[rs].cnt;</span><br><span class="line">	tree[u].se=<span class="built_in">max</span>(tree[ls].se,tree[rs].se);</span><br><span class="line">	<span class="keyword">if</span>(tree[ls].maxn!=tree[rs].maxn)</span><br><span class="line">		tree[u].se=<span class="built_in">max</span>(tree[u].se,<span class="built_in">min</span>(tree[ls].maxn,tree[rs].maxn));</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	tag[u]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		tree[u].sum=tree[u].maxn=a[l];</span><br><span class="line">		tree[u].cnt=<span class="number">1</span>;</span><br><span class="line">		tree[u].se=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">build</span>(ls,l,mid);</span><br><span class="line">	<span class="built_in">build</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">	<span class="built_in">push_up</span>(u);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_tag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].maxn&lt;=k)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	tree[u].sum-=(<span class="type">long</span> <span class="type">long</span>)tree[u].cnt*(tree[u].maxn-k);</span><br><span class="line">	tree[u].maxn=tag[u]=k;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tag[u]==<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">update_tag</span>(ls,tag[u]);</span><br><span class="line">	<span class="built_in">update_tag</span>(rs,tag[u]);</span><br><span class="line">	tag[u]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].maxn&lt;=k)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r&amp;&amp;tree[u].se&lt;k)&#123;</span><br><span class="line">		<span class="built_in">update_tag</span>(u,k);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">push_down</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">		<span class="built_in">modify</span>(ls,l,mid,x,y,k);</span><br><span class="line">	<span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">		<span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">	<span class="built_in">push_up</span>(u);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_max</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">		<span class="keyword">return</span> tree[u].maxn;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">push_down</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">		res=<span class="built_in">max</span>(res,<span class="built_in">query_max</span>(ls,l,mid,x,y));</span><br><span class="line">	<span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">		res=<span class="built_in">max</span>(res,<span class="built_in">query_max</span>(rs,mid<span class="number">+1</span>,r,x,y));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query_sum</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">		<span class="keyword">return</span> tree[u].sum;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">push_down</span>(u);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">		res+=<span class="built_in">query_sum</span>(ls,l,mid,x,y);</span><br><span class="line">	<span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">		res+=<span class="built_in">query_sum</span>(rs,mid<span class="number">+1</span>,r,x,y);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">		<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">		<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">			<span class="type">int</span> opt,x,y,t;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class="line">			<span class="keyword">if</span>(opt==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t);</span><br><span class="line">				<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y,t);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query_max</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y));</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query_sum</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ###
区间最值&amp;区间加 <a href="https://www.luogu.com.cn/problem/P10639"
title="例题">例题</a>
同时有区间加后，原本的势能分析就不适用了。复杂度变为 <span
class="math inline">\(O(m\log^2n)\)</span>。对于区间加，区间 <span
class="math inline">\(\max\)</span> 和区间 <span
class="math inline">\(\min\)</span> 各维护一个标记。
<del>然后你就会发现真的很难写。</del>
注意，区间加的标记优先级大于区间最值操作。还有，在进行更新时要考虑到
<span class="math inline">\(maxn\)</span>，<span
class="math inline">\(minn\)</span>，<span
class="math inline">\(max\_se\)</span>，<span
class="math inline">\(min\_se\)</span>，<span
class="math inline">\(min\_tag\)</span> 和 <span
class="math inline">\(max\_tag\)</span> 相互重叠的情况。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls u*2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs u*2+1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 2e9</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment_tree</span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> sum;</span><br><span class="line">	<span class="type">int</span> maxn,minn,max_se,min_se,max_cnt,min_cnt,add_tag,max_tag,min_tag;</span><br><span class="line">&#125;tree[N*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	tree[u].sum=tree[ls].sum+tree[rs].sum;</span><br><span class="line">	<span class="keyword">if</span>(tree[ls].maxn==tree[rs].maxn)&#123;</span><br><span class="line">		tree[u].maxn=tree[ls].maxn;</span><br><span class="line">		tree[u].max_cnt=tree[ls].max_cnt+tree[rs].max_cnt;</span><br><span class="line">		tree[u].max_se=<span class="built_in">max</span>(tree[ls].max_se,tree[rs].max_se);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(tree[ls].maxn&lt;tree[rs].maxn)&#123;</span><br><span class="line">		tree[u].maxn=tree[rs].maxn;</span><br><span class="line">		tree[u].max_cnt=tree[rs].max_cnt;</span><br><span class="line">		tree[u].max_se=<span class="built_in">max</span>(tree[ls].maxn,tree[rs].max_se);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		tree[u].maxn=tree[ls].maxn;</span><br><span class="line">		tree[u].max_cnt=tree[ls].max_cnt;</span><br><span class="line">		tree[u].max_se=<span class="built_in">max</span>(tree[rs].maxn,tree[ls].max_se);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tree[ls].minn==tree[rs].minn)&#123;</span><br><span class="line">		tree[u].minn=tree[ls].minn;</span><br><span class="line">		tree[u].min_cnt=tree[ls].min_cnt+tree[rs].min_cnt;</span><br><span class="line">		tree[u].min_se=<span class="built_in">min</span>(tree[ls].min_se,tree[rs].min_se);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(tree[ls].minn&lt;tree[rs].minn)&#123;</span><br><span class="line">		tree[u].minn=tree[ls].minn;</span><br><span class="line">		tree[u].min_cnt=tree[ls].min_cnt;</span><br><span class="line">		tree[u].min_se=<span class="built_in">min</span>(tree[ls].min_se,tree[rs].minn);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		tree[u].minn=tree[rs].minn;</span><br><span class="line">		tree[u].min_cnt=tree[rs].min_cnt;</span><br><span class="line">		tree[u].min_se=<span class="built_in">min</span>(tree[rs].min_se,tree[ls].minn);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	tree[u].max_tag=-inf,tree[u].min_tag=inf;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		tree[u].sum=tree[u].maxn=tree[u].minn=a[l];</span><br><span class="line">		tree[u].max_cnt=tree[u].min_cnt=<span class="number">1</span>;</span><br><span class="line">		tree[u].max_se=-inf;</span><br><span class="line">		tree[u].min_se=inf;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">build</span>(ls,l,mid);</span><br><span class="line">	<span class="built_in">build</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">	<span class="built_in">push_up</span>(u);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	tree[u].sum+=(r-l<span class="number">+1ll</span>)*k;</span><br><span class="line">	tree[u].maxn+=k,tree[u].minn+=k,tree[u].add_tag+=k;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].max_se!=-inf)</span><br><span class="line">		tree[u].max_se+=k;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].min_se!=inf)</span><br><span class="line">		tree[u].min_se+=k;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].max_tag!=-inf)</span><br><span class="line">		tree[u].max_tag+=k;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].min_tag!=inf)</span><br><span class="line">		tree[u].min_tag+=k;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_min_tag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].maxn&lt;=k)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	tree[u].sum+=(<span class="number">1ll</span>*k-tree[u].maxn)*tree[u].max_cnt;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].min_se==tree[u].maxn)</span><br><span class="line">		tree[u].min_se=k;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].minn==tree[u].maxn)</span><br><span class="line">		tree[u].minn=k;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].max_tag&gt;k)</span><br><span class="line">		tree[u].max_tag=k;</span><br><span class="line">	tree[u].maxn=k,tree[u].min_tag=k;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_max_tag</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].minn&gt;=k)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	tree[u].sum+=(<span class="number">1ll</span>*k-tree[u].minn)*tree[u].min_cnt;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].max_se==tree[u].minn)</span><br><span class="line">		tree[u].max_se=k;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].maxn==tree[u].minn)</span><br><span class="line">		tree[u].maxn=k;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].min_tag&lt;k)</span><br><span class="line">		tree[u].min_tag=k;</span><br><span class="line">	tree[u].minn=k,tree[u].max_tag=k;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span>(tree[u].add_tag)</span><br><span class="line">		<span class="built_in">update_add</span>(ls,l,mid,tree[u].add_tag),<span class="built_in">update_add</span>(rs,mid<span class="number">+1</span>,r,tree[u].add_tag);</span><br><span class="line">	<span class="keyword">if</span>(tree[u].max_tag!=-inf)</span><br><span class="line">		<span class="built_in">update_max_tag</span>(ls,tree[u].max_tag),<span class="built_in">update_max_tag</span>(rs,tree[u].max_tag);</span><br><span class="line">	<span class="keyword">if</span>(tree[u].min_tag!=inf)</span><br><span class="line">		<span class="built_in">update_min_tag</span>(ls,tree[u].min_tag),<span class="built_in">update_min_tag</span>(rs,tree[u].min_tag);</span><br><span class="line">	tree[u].add_tag=<span class="number">0</span>,tree[u].max_tag=-inf,tree[u].min_tag=inf;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">		<span class="built_in">update_add</span>(u,l,r,k);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">		<span class="built_in">modify_add</span>(ls,l,mid,x,y,k);</span><br><span class="line">	<span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">		<span class="built_in">modify_add</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">	<span class="built_in">push_up</span>(u);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_max</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r&amp;&amp;tree[u].min_se&gt;k)&#123;</span><br><span class="line">		<span class="built_in">update_max_tag</span>(u,k);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">		<span class="built_in">modify_max</span>(ls,l,mid,x,y,k);</span><br><span class="line">	<span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">		<span class="built_in">modify_max</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">	<span class="built_in">push_up</span>(u);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_min</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r&amp;&amp;tree[u].max_se&lt;k)&#123;</span><br><span class="line">		<span class="built_in">update_min_tag</span>(u,k);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">		<span class="built_in">modify_min</span>(ls,l,mid,x,y,k);</span><br><span class="line">	<span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">		<span class="built_in">modify_min</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">	<span class="built_in">push_up</span>(u);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query_sum</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">		<span class="keyword">return</span> tree[u].sum;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">		res+=<span class="built_in">query_sum</span>(ls,l,mid,x,y);</span><br><span class="line">	<span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">		res+=<span class="built_in">query_sum</span>(rs,mid<span class="number">+1</span>,r,x,y);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_max</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">		<span class="keyword">return</span> tree[u].maxn;</span><br><span class="line">	<span class="type">int</span> res=-inf,mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">		res=<span class="built_in">max</span>(res,<span class="built_in">query_max</span>(ls,l,mid,x,y));</span><br><span class="line">	<span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">		res=<span class="built_in">max</span>(res,<span class="built_in">query_max</span>(rs,mid<span class="number">+1</span>,r,x,y));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_min</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">		<span class="keyword">return</span> tree[u].minn;</span><br><span class="line">	<span class="type">int</span> res=inf,mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">	<span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">	<span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">		res=<span class="built_in">min</span>(res,<span class="built_in">query_min</span>(ls,l,mid,x,y));</span><br><span class="line">	<span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">		res=<span class="built_in">min</span>(res,<span class="built_in">query_min</span>(rs,mid<span class="number">+1</span>,r,x,y));</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">	<span class="type">int</span> opt,l,r,x;</span><br><span class="line">	<span class="keyword">while</span>(m--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;opt,&amp;l,&amp;r);</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">			<span class="built_in">modify_add</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">			<span class="built_in">modify_max</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">			<span class="built_in">modify_min</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query_sum</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">5</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query_max</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r));</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query_min</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
### 区间历史最值 <a href="https://www.luogu.com.cn/problem/P6242"
title="例题">例题</a>
这里的“历史”不同于可持久化，以历史最大值为例，我们称原数组为 <span
class="math inline">\(A\)</span>，定义数组 <span
class="math inline">\(B\)</span>，则 <span
class="math inline">\(B_i\)</span> 表示所有历史版本中最大的那个 <span
class="math inline">\(A_i\)</span>，形式化地，每次操作之后，都令 <span
class="math inline">\(B_i=\max(A_i,B_i)\)</span>。初始时 <span
class="math inline">\(B\)</span> 与 <span
class="math inline">\(A\)</span> 相同。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码先咕着</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>[NOIP 2012 提高组] 国王游戏</title>
    <url>/2025/07/04/%5BNOIP%202012%20%E6%8F%90%E9%AB%98%E7%BB%84%5D%20%E5%9B%BD%E7%8E%8B%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1080"
title="~~高精毒瘤题~~"><del>高精毒瘤题</del></a></p>
<p>考虑贪心。</p>
<p><strong>对于两个大臣 <span class="math inline">\(i\)</span> 和 <span
class="math inline">\(j\)</span>，当 <span class="math inline">\(a_i
\times b_i &lt;a_j \times b_j\)</span> 时，<span
class="math inline">\(i\)</span> 排在 <span
class="math inline">\(j\)</span> 前更优</strong> ### 证明：
因为所有大臣排成一列，所以我们考虑其中两个的关系，就可以推广到所有大臣。
我们还是取两个大臣 <span class="math inline">\(i\)</span> 和 <span
class="math inline">\(j\)</span>，他们前面的人左手上的积为 <span
class="math inline">\(x\)</span>，假设 <span
class="math inline">\(i\)</span> 在前面更优，则有： <span
class="math display">\[ans_1=\max(\frac{x}{b_i},\frac{x\times
a_i}{b_j})\]</span> 若 <span class="math inline">\(j\)</span>
在前面更优，则有 <span
class="math display">\[ans_2=\max(\frac{x}{b_j},\frac{x\times
a_j}{b_i})\]</span> 显然有 <span class="math display">\[\frac{x}{b_i}
\le \frac{x\times a_j}{b_i},\frac{x}{b_j}\le\frac{x\times
a_i}{b_j}\]</span> 若令 <span class="math inline">\(ans_1 &lt;
ans_2\)</span>，则必然有 <span class="math display">\[\frac{x\times
a_i}{b_j}&lt;\frac{x\times a_j}{b_i}\]</span> 化简，得 <span
class="math display">\[a_i \times b_i &lt; a_j \times b_j\]</span>
证毕。</p>
<h3 id="code">code:</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,a,b;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(node x,node y)&#123;</span><br><span class="line">	<span class="keyword">return</span> x.a*x.b&lt;y.a*y.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ll</span>&#123;</span><br><span class="line">	<span class="type">int</span> num[N*<span class="number">5</span>];</span><br><span class="line">	<span class="type">int</span> len;</span><br><span class="line">	<span class="built_in">ll</span>()&#123;</span><br><span class="line">		<span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="built_in">sizeof</span>(num));</span><br><span class="line">		len=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">void</span> <span class="keyword">operator</span>=(<span class="type">int</span> x)&#123;</span><br><span class="line">		<span class="keyword">while</span>(x)&#123;</span><br><span class="line">			num[++len]=x%<span class="number">10</span>;</span><br><span class="line">			x/=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> ll &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;len&lt;x.len)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;len&gt;x.len)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=len;i;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;num[i]&lt;x.num[i])</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;num[i]&gt;x.num[i])</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll <span class="keyword">operator</span>*(<span class="type">const</span> <span class="type">int</span> &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">		ll ans;</span><br><span class="line">		ans.len=<span class="keyword">this</span>-&gt;len;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="keyword">this</span>-&gt;len;i++)&#123;</span><br><span class="line">			ans.num[i]+=<span class="keyword">this</span>-&gt;num[i]*x;</span><br><span class="line">			ans.num[i<span class="number">+1</span>]=ans.num[i]/<span class="number">10</span>;</span><br><span class="line">			ans.num[i]%=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans.num[ans.len<span class="number">+1</span>])&#123;</span><br><span class="line">			<span class="type">int</span> k=ans.num[ans.len<span class="number">+1</span>];</span><br><span class="line">			<span class="keyword">while</span>(k)&#123;</span><br><span class="line">				ans.len++;</span><br><span class="line">				ans.num[ans.len]=k%<span class="number">10</span>;</span><br><span class="line">				k/=<span class="number">10</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> <span class="type">int</span> &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">		<span class="type">int</span> k=x,len1=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(k)&#123;</span><br><span class="line">			k/=<span class="number">10</span>;</span><br><span class="line">			len1++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(len1&gt;<span class="keyword">this</span>-&gt;len)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(len1&lt;<span class="keyword">this</span>-&gt;len)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		k=x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;num[i]&lt;k%<span class="number">10</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">this</span>-&gt;num[i]&gt;k%<span class="number">10</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			k/=<span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ll <span class="keyword">operator</span>/(<span class="type">const</span> <span class="type">int</span> &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">		ll ans;</span><br><span class="line">		<span class="keyword">if</span>(*<span class="keyword">this</span>&lt;x)</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		ans.len=<span class="keyword">this</span>-&gt;len;</span><br><span class="line">		<span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="keyword">this</span>-&gt;len;i;i--)&#123;</span><br><span class="line">			k=k*<span class="number">10</span>+<span class="keyword">this</span>-&gt;num[i];</span><br><span class="line">			ans.num[i]=k/x;</span><br><span class="line">			k%=x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!ans.num[ans.len])</span><br><span class="line">			ans.len--;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x.len==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=x.len;i;i--)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,x.num[i]);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">max1</span><span class="params">(ll x,ll y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;y)</span><br><span class="line">		<span class="keyword">return</span> y;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">ll cnt,ans1;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;a,&amp;b);</span><br><span class="line">	cnt=a;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;e[i].a,&amp;e[i].b);</span><br><span class="line">	<span class="built_in">sort</span>(e<span class="number">+1</span>,e<span class="number">+1</span>+n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		ans1=<span class="built_in">max1</span>(ans1,cnt/e[i].b);</span><br><span class="line">		cnt=cnt*e[i].a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(ans1);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>[Ynoi2018] 五彩斑斓的世界</title>
    <url>/2025/07/04/%5BYnoi2018%5D%20%E4%BA%94%E5%BD%A9%E6%96%91%E6%96%93%E7%9A%84%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p><del>写 Ynoi 题会破防，我试了，是真的。</del></p>
<p>分块 + 并查集。 开一个值域大小的并查集，这样我们就可以 <span
class="math inline">\(O(1)\)</span> 修改所有块内相同的值。同时通过维护
<span class="math inline">\(siz\)</span>
数组来快速查询某数出现的次数，且可以随并查集的合并而合并。
接下来进行复杂度分析。注意到，对于本题的修改操作，块内的最大值 <span
class="math inline">\(maxn\)</span> 单调不增。<span
class="math inline">\(maxn\)</span> 最大为 <span
class="math inline">\(10^5+1\)</span>，<span
class="math inline">\(m\)</span> 最大为 <span
class="math inline">\(5\times 10^5\)</span>，可以视为均摊 <span
class="math inline">\(O(1)\)</span>。
对于整块的修改操作，我们分两种情况讨论： 当 <span
class="math inline">\(2x\ge maxn\)</span> 时，令所有大于 <span
class="math inline">\(x\)</span> 的数减去 <span
class="math inline">\(x\)</span>，此时暴力更新 <span
class="math inline">\(maxn\)</span>。 当 <span
class="math inline">\(2x&lt; maxn\)</span> 时，令所有小于等于 <span
class="math inline">\(x\)</span> 的数加上 <span
class="math inline">\(x\)</span>，再将块上的 <span
class="math inline">\(tag\)</span> 加 <span
class="math inline">\(x\)</span>，表示真实值为整体减 <span
class="math inline">\(tag\)</span>。
对于散块，暴力拆散原来的并查集，直接修改并更新 <span
class="math inline">\(maxn\)</span> 就好。 整块更新是均摊 <span
class="math inline">\(O(1)\)</span>，散块更新是均摊 <span
class="math inline">\(O(\sqrt n)\)</span>。 此题卡空间，无法做到 <span
class="math inline">\(O(V\sqrt n)\)</span>
的并查集空间复杂度。考虑将询问离线，在每个块跑一遍询问，答案直接累加。这样我们只需
<span class="math inline">\(O(V)\)</span> 的空间复杂度。
以上方法无法正确处理 <span class="math inline">\(a_i=0\)</span>
的情况。注意到，修改操作不会产生新的 <span
class="math inline">\(0\)</span>，所以直接在一开始用前缀和处理掉 <span
class="math inline">\(0\)</span> 的询问，之后就不用管了。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>【MX-X11-T1】「蓬莱人形 Round 1」仅此而已，就已经足够了</title>
    <url>/2025/07/04/%E3%80%90MX-X11-T1%E3%80%91%E3%80%8C%E8%93%AC%E8%8E%B1%E4%BA%BA%E5%BD%A2%20Round%201%E3%80%8D%E4%BB%85%E6%AD%A4%E8%80%8C%E5%B7%B2%EF%BC%8C%E5%B0%B1%E5%B7%B2%E7%BB%8F%E8%B6%B3%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P12147"
title="~~这题评黄？~~"><del>这题评黄？</del></a> ### 题意简述 定义 <span
class="math inline">\(f(x)=x\oplus(x+2^k)\)</span>。给出 <span
class="math inline">\(n\)</span>，求 <span
class="math inline">\(f(0)+f(1)+f(2)+\cdots+f(n)\)</span>。<span
class="math inline">\(T\)</span> 组询问，每组有不同的 <span
class="math inline">\(n\)</span> 和 <span
class="math inline">\(k\)</span>。<span class="math inline">\(1 \le T\le
10^5\)</span>，<span class="math inline">\(0 \le n &lt;
2^{29}\)</span>，<span class="math inline">\(0 \le k \le 29\)</span>。
### 思路 由于 <span class="math inline">\(T\)</span> 较大，考虑 <span
class="math inline">\(O(1)\)</span> 或 <span
class="math inline">\(O(\log n)\)</span>
求法。先打表找规律。因题目有特殊性质 <span
class="math inline">\(k=0\)</span>，考虑先打 <span
class="math inline">\(k=0\)</span> 时 <span
class="math inline">\(f(0)\)</span> 到 <span
class="math inline">\(f(n)\)</span>
的值。由于涉及位运算，考虑同时观察二进制。打表得到 <span
class="math display">\[
f(0)=1=(1)_2\\
f(1)=3=(11)_2\\
f(2)=1=(1)_2\\
f(3)=7=(111)_2\\
f(4)=1=(1)_2\\
f(5)=3=(11)_2\\
f(6)=1=(1)_2\\
\cdots
\]</span> 观察到一种对称性：<span class="math inline">\(f(0)\)</span> 和
<span class="math inline">\(f(2)\)</span> 关于 <span
class="math inline">\(f(1)\)</span> 对称，然后将这 <span
class="math inline">\(3\)</span> 个数视为一个整块，则 <span
class="math inline">\(f(0)\)</span> 到 <span
class="math inline">\(f(2)\)</span> 的部分和 <span
class="math inline">\(f(4)\)</span> 到 <span
class="math inline">\(f(6)\)</span> 的部分关于 <span
class="math inline">\(f(3)\)</span> 对称。同理，<span
class="math inline">\(f(0)\)</span> 到 <span
class="math inline">\(f(6)\)</span>
的部分还能继续对称下去。为了方便，我们把最短的块 <span
class="math inline">\(f(0)=1\)</span> 记作 <span
class="math inline">\(K_1\)</span>，称为 <span
class="math inline">\(1\)</span> 阶块，<span
class="math inline">\(K_n\)</span> 的长度记为 <span
class="math inline">\(len_n\)</span>，<span
class="math inline">\(K_n\)</span> 内所有元素之和为 <span
class="math inline">\(sum_n\)</span>。则 <span
class="math inline">\(K_2\)</span> 应当包含 <span
class="math inline">\(f(0)\)</span>，<span
class="math inline">\(f(1)\)</span>，<span
class="math inline">\(f(2)\)</span>。以此类推。 接下来，尝试将规律推广到
<span class="math inline">\(k&gt;0\)</span> 的情况。 打 <span
class="math inline">\(k=1\)</span> 的表，得 <span
class="math display">\[
f(0)=(10)_2\\
f(1)=(10)_2\\
f(2)=(110)_2\\
f(3)=(110)_2\\
f(4)=(10)_2\\
f(5)=(10)_2\\
f(6)=(1110)_2\\
f(7)=(1110)_2\\
\cdots
\]</span> 我们发现，<span class="math inline">\(len_1\)</span> 变为了
<span class="math inline">\(2^1\)</span>。而 <span
class="math inline">\(K_1\)</span> 中的值变为了 <span
class="math inline">\((10)_2\)</span>，也就是 <span
class="math inline">\(2^1\)</span>。继续打出 <span
class="math inline">\(k=2\)</span> 和 <span
class="math inline">\(k=3\)</span> 时的表，发现如下规律： <strong><span
class="math inline">\(len_1\)</span> 为 <span
class="math inline">\(2^k\)</span>，<span
class="math inline">\(K_1\)</span> 中的元素的值为 <span
class="math inline">\(2^k\)</span></strong>。 ### 实现 考虑分治。 考虑从
<span class="math inline">\(K_x\)</span> 推得 <span
class="math inline">\(K_{x+1}\)</span>，我们发现，<span
class="math inline">\(K_{x+1}\)</span> 应分为 <span
class="math inline">\(3\)</span> 部分，<span
class="math inline">\(K_x\)</span> 作为左右两部分，<span
class="math inline">\(2^k\)</span> 个 <span
class="math inline">\(2^{x+1}-1\)</span> 左移 <span
class="math inline">\(k\)</span> 位作为中间部分。容易发现 <span
class="math inline">\(len_{x+1}=2 \times len_x+2^k\)</span>。 反之，从
<span class="math inline">\(K_{x+1}\)</span> 推得 <span
class="math inline">\(K_x\)</span>，有 <span
class="math inline">\(len_{x}=\dfrac{len_{x+1}-2^k}{2}\)</span>。 由于
<span class="math inline">\(k&gt;0\)</span> 时的 <span
class="math inline">\(sum_n\)</span> 都可从 <span
class="math inline">\(k=0\)</span> 时的 <span
class="math inline">\(sum_n\)</span> 通过位运算 <span
class="math inline">\(O(1)\)</span> 求出，考虑预处理出 <span
class="math inline">\(k=0\)</span> 时的 <span
class="math inline">\(sum_1\)</span> 到 <span
class="math inline">\(sum_k\)</span>，之所以只处理到 <span
class="math inline">\(sum_k\)</span>，是因为 <span
class="math inline">\(len_k\)</span> 刚好略大于 <span
class="math inline">\(\max(n)\)</span>，即 <span
class="math inline">\(2^{29}\)</span>，已经可以覆盖所有 <span
class="math inline">\(f(x)\)</span>。 其他实现细节详见代码注释。 ###
code 这里的递归过程很像线段树。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">536870911</span>;</span><br><span class="line"><span class="type">int</span> t,n,k;<span class="comment">//同原题</span></span><br><span class="line"><span class="type">int</span> len;<span class="comment">//中间部分长度，同时也是最小块长</span></span><br><span class="line"><span class="type">int</span> cnt;<span class="comment">//阶数</span></span><br><span class="line"><span class="type">int</span> sum[<span class="number">40</span>];<span class="comment">//k=0时的块内和</span></span><br><span class="line"><span class="type">int</span> lensum;<span class="comment">//大于n的最小块长</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;r||y&lt;l)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//超出范围，直接退出</span></span><br><span class="line">	<span class="type">int</span> len1=(r-l<span class="number">+1</span>-len)/<span class="number">2</span>;<span class="comment">//左右子块长度</span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(y-x<span class="number">+1</span>&lt;=len)<span class="comment">//查询区间已小于或等于最小块长</span></span><br><span class="line">		<span class="keyword">return</span> (<span class="number">1ll</span>&lt;&lt;k)*(y-x<span class="number">+1</span>);<span class="comment">//(sum[1]&lt;&lt;k)*查询区间长</span></span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="comment">//查询区间完全覆盖当前区间</span></span><br><span class="line">		<span class="keyword">return</span> (sum[u]&lt;&lt;k)*len;</span><br><span class="line">	res+=<span class="built_in">solve</span>(u<span class="number">-1</span>,l,l+len1<span class="number">-1</span>,x,y);<span class="comment">//左子块递归</span></span><br><span class="line">	<span class="type">int</span> l1=<span class="built_in">max</span>(x,l+len1),r1=<span class="built_in">min</span>(y,l+len1+len<span class="number">-1</span>);<span class="comment">//这里要让中间部分与查询部分取交集</span></span><br><span class="line">	res+=<span class="built_in">max</span>(<span class="number">0ll</span>,(r1-l1<span class="number">+1</span>))*(((<span class="number">1ll</span>&lt;&lt;u)<span class="number">-1</span>)&lt;&lt;k);</span><br><span class="line">	res+=<span class="built_in">solve</span>(u<span class="number">-1</span>,l+len1+len,r,x,y);<span class="comment">//右子块递归</span></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_length</span><span class="params">()</span></span>&#123;</span><br><span class="line">	lensum=len;</span><br><span class="line">	<span class="keyword">while</span>(lensum&lt;=n)&#123;</span><br><span class="line">		lensum&lt;&lt;=<span class="number">1</span>;<span class="comment">//左右子块长度相等，直接乘2</span></span><br><span class="line">		lensum+=len;<span class="comment">//中间部分</span></span><br><span class="line">		cnt++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;t;</span><br><span class="line">	sum[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//k=0时，f(0)=1</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">30</span>;i++)&#123;</span><br><span class="line">		sum[i]=sum[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>;<span class="comment">//左右子块和相等，直接乘2</span></span><br><span class="line">		sum[i]+=(<span class="number">1ll</span>&lt;&lt;i)<span class="number">-1</span>;<span class="comment">//中间部分</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">		len=<span class="number">1ll</span>&lt;&lt;k;<span class="comment">//中间部分长度</span></span><br><span class="line">		cnt=<span class="number">1</span>;<span class="comment">//阶数</span></span><br><span class="line">		<span class="built_in">get_length</span>();<span class="comment">//获取覆盖0到n的最小块长</span></span><br><span class="line">		cout&lt;&lt;<span class="built_in">solve</span>(cnt,<span class="number">0</span>,lensum,<span class="number">0</span>,n)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 时间复杂度 <span
class="math inline">\(O(T\log n)\)</span>。 ### 证明 对于 <span
class="math inline">\(f(x)\)</span> 的值的二进制 <span
class="math inline">\(k\)</span> 位及以下均为 <span
class="math inline">\(0\)</span> 很显然，因为 <span
class="math inline">\(2^k\)</span> 最低影响到第 <span
class="math inline">\(k+1\)</span> 位。而 <span
class="math inline">\(x\)</span> 必须增长 <span
class="math inline">\(2^k\)</span> 才能令第 <span
class="math inline">\(k+1\)</span> 位更改一次，所以可得 <span
class="math inline">\(len_1=2^k\)</span> 和中间块长等于 <span
class="math inline">\(len_1\)</span>。由此我们还可得，<span
class="math inline">\(f(x)\)</span> 的值发生更改（在 <span
class="math inline">\(x\)</span> 每次加 <span
class="math inline">\(1\)</span> 时）当且仅当 <span
class="math inline">\(x\)</span> 的 <span
class="math inline">\(k+1\)</span> 位的值更改。如：令 <span
class="math inline">\(k=1\)</span>，则 <span
class="math inline">\(f((1)_2)\)</span> 到 <span
class="math inline">\(f((10)_2)\)</span>，第 <span
class="math inline">\(2\)</span> 位发生更改，<span
class="math inline">\(f(x)\)</span> 的值由 <span
class="math inline">\((10)_2\)</span> 变为 <span
class="math inline">\((110)_2\)</span>。接下来考虑高位。我们发现，<span
class="math inline">\(k+1\)</span> 位以上，连续的一串 <span
class="math inline">\(1\)</span> 会使答案形成“若干个连续 <span
class="math inline">\(1\)</span>”的结构。而高位连续的 <span
class="math inline">\(n\)</span> 个 <span
class="math inline">\(1\)</span> 的变换恰有 <span
class="math inline">\(2^{n-1}\times 2^k\)</span> 的周期性（乘 <span
class="math inline">\(2^k\)</span>
是因为要考虑低位）。可以联想一个二进制数的不断加 <span
class="math inline">\(1\)</span> 操作，观察最低位连续 <span
class="math inline">\(1\)</span>
的变化。以上两部分结合即得我们观察到的规律。
这个方法被喷飞了我不能理解，我感觉很容易注意到规律而且代码实现没有那么难啦……</p>
<p>友链：同机房大佬 <a href="https://www.luogu.com.cn/user/1411149"
title="yonghu10010">yonghu10010</a> 的<a
href="https://www.luogu.com.cn/article/2piluq58"
title="题解">题解</a>，与本题解使用相同思路，但实现方式略有出入。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>pb_ds 简介</title>
    <url>/2025/07/04/pb_ds%20%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码看着不太对。" data-whm="这个文章不能被校验。">
  <script id="hbeData" type="hbeData" data-hmacdigest="e5e09838120de9718eeb9d008593fc29200a8c42fba46509444a0c652b64426c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">这里需要密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Kalthyix 团队周报</tag>
      </tags>
  </entry>
  <entry>
    <title>五一集训题目合集</title>
    <url>/2025/07/04/%E4%BA%94%E4%B8%80%E9%9B%86%E8%AE%AD%E9%A2%98%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h3 id="a-simple-task"><a
href="https://codeforces.com/problemset/problem/558/E"
title="A Simple Task">A Simple Task</a></h3>
<p>因为字符集大小只有 <span
class="math inline">\(26\)</span>，考虑直接在线段树每个节点维护当前区间的字符个数。排序时直接暴力区间赋值，复杂度会有
<span class="math inline">\(26\)</span> 的常数。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls u&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs u&lt;&lt;1|1</span></span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> tree[N*<span class="number">4</span>][<span class="number">26</span>],tag[N*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        tree[u][i]=tree[ls][i]+tree[rs][i];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    tag[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u][s[l]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!~tag[u])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        tree[ls][i]=tree[rs][i]=<span class="number">0</span>;</span><br><span class="line">    tree[ls][tag[u]]=mid-l<span class="number">+1</span>,tree[rs][tag[u]]=r-mid;</span><br><span class="line">    tag[ls]=tag[rs]=tag[u];</span><br><span class="line">    tag[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            tree[u][i]=<span class="number">0</span>;</span><br><span class="line">        tree[u][k]=r-l<span class="number">+1</span>;</span><br><span class="line">        tag[u]=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify</span>(ls,l,mid,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">        <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">        <span class="keyword">return</span> tree[u][k];</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        res+=<span class="built_in">query</span>(ls,l,mid,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">        res+=<span class="built_in">query</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">query_ans</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(tree[u][i])</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>+i;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_ans</span>(ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_ans</span>(rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q&gt;&gt;s;</span><br><span class="line">    s=<span class="string">&quot; &quot;</span>+s;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="type">int</span> l,r,k;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">        <span class="keyword">if</span>(k)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">                a[i]=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])</span><br><span class="line">                    <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,l+a[i]<span class="number">-1</span>,i);</span><br><span class="line">                l+=a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">                a[i]=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">25</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])</span><br><span class="line">                    <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,l+a[i]<span class="number">-1</span>,i);</span><br><span class="line">                l+=a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,<span class="built_in">query_ans</span>(<span class="number">1</span>,<span class="number">1</span>,n,i));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="heoi2012-采花"><a href="https://www.luogu.com.cn/problem/P4113"
title="[HEOI2012] 采花">[HEOI2012] 采花</a></h3>
离线，树状数组维护之前出现两次及以上的颜色数，每次出现 <span
class="math inline">\(2\)</span> 次后在之前的位置加 <span
class="math inline">\(1\)</span>，并且把之前的之前加的撤销。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,c,m,x[N],tree[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        tree[i]+=k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&gt;<span class="number">0</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        res+=tree[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Query &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r&lt;x.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="type">int</span> pre1[N],pre2[N],ans[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,c,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(x[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">read</span>(q[i].l,q[i].r),q[i].id=i;</span><br><span class="line">    std::<span class="built_in">sort</span>(q<span class="number">+1</span>,q<span class="number">+1</span>+m);</span><br><span class="line">    <span class="type">int</span> now=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(now&lt;=q[i].r)&#123;</span><br><span class="line">            <span class="type">int</span> temp=x[now];</span><br><span class="line">            <span class="keyword">if</span>(pre1[temp])&#123;</span><br><span class="line">                <span class="built_in">modify</span>(pre1[temp],<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(pre2[temp])</span><br><span class="line">                    <span class="built_in">modify</span>(pre2[temp],<span class="number">-1</span>);</span><br><span class="line">                pre2[temp]=pre1[temp];</span><br><span class="line">            &#125;</span><br><span class="line">            pre1[temp]=now;</span><br><span class="line">            now++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[q[i].id]=<span class="built_in">query</span>(q[i].r)-<span class="built_in">query</span>(q[i].l<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="ynoi2012-noip2015-充满了希望"><a
href="https://www.luogu.com.cn/problem/P5524"
title="[Ynoi2012] NOIP2015 充满了希望">[Ynoi2012] NOIP2015
充满了希望</a></h3>
注意到，任何情况下，查询的答案要么是 <span
class="math inline">\(0\)</span>，要么是一个确定的值（即有没有被修改过），这个确定的值必然来自
2 操作。所以维护时间戳，利用树状数组查询区间和。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls u&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs u&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,q,opt[N];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> tree[N*<span class="number">4</span>];</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!tree[u])</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            tree[ls]=tree[rs]=tree[u];</span><br><span class="line">            tree[u]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">                tree[u]=k;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">push_down</span>(u);</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">                <span class="built_in">modify</span>(ls,l,mid,x,y,k);</span><br><span class="line">            <span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">                <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(tree[u]||l==r)</span><br><span class="line">                <span class="keyword">return</span> tree[u];</span><br><span class="line">            <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">push_down</span>(u);</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">query</span>(ls,l,mid,x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">query</span>(rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;a;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BIT</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        ll tree[N];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=m;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">                tree[i]+=k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            ll res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">                res+=tree[i];</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;b;</span><br><span class="line"><span class="type">int</span> val[N],t[N];</span><br><span class="line">ll ans[N];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; ask[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,opt,l,r,k;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;opt;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            <span class="type">int</span> x=a.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l),y=a.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,r);</span><br><span class="line">            a.<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,l,y);</span><br><span class="line">            a.<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,r,r,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r&gt;&gt;val[i];</span><br><span class="line">            a.<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            t[i]=a.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,l,r;i&lt;=q;i++)&#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        ask[r].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(l,i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[i])</span><br><span class="line">            b.<span class="built_in">modify</span>(t[i],val[t[i]]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> k:ask[i])</span><br><span class="line">            ans[k.second]=b.<span class="built_in">query</span>(i)-b.<span class="built_in">query</span>(k.first<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="thupc-2017-天天爱射击"><a
href="https://www.luogu.com.cn/problem/P7424"
title="[THUPC 2017] 天天爱射击">[THUPC 2017] 天天爱射击</a></h3>
法一： 主席树 + 二分答案。对每颗子弹设一个版本，二分版本。<span
class="math inline">\(O(n\log^2n)\)</span>（常数过大无法通过）。 法二：
静态区间第 <span class="math inline">\(k\)</span> 大。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> root[N],tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum,ls,rs;</span><br><span class="line">&#125;tree[N*<span class="number">60</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tree[u].sum=tree[tree[u].ls].sum+tree[tree[u].rs].sum;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> old,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    u=++tot;</span><br><span class="line">    tree[u]=tree[old];</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u].sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify</span>(tree[u].ls,tree[old].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">modify</span>(tree[u].rs,tree[old].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> old,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>,s=tree[tree[u].ls].sum-tree[tree[old].ls].sum;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=s)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tree[u].ls,tree[old].ls,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tree[u].rs,tree[old].rs,mid<span class="number">+1</span>,r,k-s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,ans[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x1,x2,s;</span><br><span class="line">&#125;q[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">read</span>(q[i].x1,q[i].x2,q[i].s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="built_in">read</span>(x);</span><br><span class="line">		b[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2e5</span>;i++)&#123;</span><br><span class="line">		root[i]=root[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> t:b[i])</span><br><span class="line">			<span class="built_in">modify</span>(root[i],root[i],<span class="number">1</span>,m<span class="number">+1</span>,t);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="type">int</span> x1=q[i].x1,x2=q[i].x2,s=q[i].s;</span><br><span class="line">		<span class="type">int</span> k=<span class="built_in">query</span>(root[x2],root[x1<span class="number">-1</span>],<span class="number">1</span>,m<span class="number">+1</span>,s);</span><br><span class="line">        ans[k]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="legacy"><a
href="https://codeforces.com/problemset/problem/786/B"
title="Legacy">Legacy</a></h3>
<p>线段树优化建图。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K 4e5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 4557430888798830399</span></span><br><span class="line"><span class="type">int</span> n,q,s,a[N],tot_edge,head[N*<span class="number">8</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt,w;</span><br><span class="line">&#125;e[N*<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++tot_edge].to=v;</span><br><span class="line">    e[tot_edge].nxt=head[u];</span><br><span class="line">    e[tot_edge].w=w;</span><br><span class="line">    head[u]=tot_edge;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        a[l]=u;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add_edge</span>(u,ls,<span class="number">0</span>),<span class="built_in">add_edge</span>(u,rs,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">add_edge</span>(ls+K,u+K,<span class="number">0</span>),<span class="built_in">add_edge</span>(rs+K,u+K,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> w,<span class="type">bool</span> rev)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rev)</span><br><span class="line">            <span class="built_in">add_edge</span>(v+K,u,w);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">add_edge</span>(u+K,v,w);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify</span>(ls,l,mid,x,y,v,w,rev);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">        <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,v,w,rev);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;ll,<span class="type">int</span>&gt;,vector&lt;pair&lt;ll,<span class="type">int</span>&gt;&gt;,greater&lt;pair&lt;ll,<span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line"><span class="type">bool</span> vis[N*<span class="number">8</span>];</span><br><span class="line">ll dis[N*<span class="number">8</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">read</span>(n,q,s);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">add_edge</span>(a[i],a[i]+K,<span class="number">0</span>),<span class="built_in">add_edge</span>(a[i]+K,a[i],<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,opt,x,y,v,w;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x,y,w);</span><br><span class="line">            <span class="built_in">add_edge</span>(a[x]+K,a[y],w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(v,x,y,w);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y,a[v],w,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">read</span>(v,x,y,w);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y,a[v],w,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[(<span class="type">int</span>)(a[s]+K)]=<span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>,a[s]+K));</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=que.<span class="built_in">top</span>().second;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">            <span class="type">int</span> v=e[i].to,w=e[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[a[i]]==inf)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1 &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,dis[a[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="noi2018-归程"><a href="https://www.luogu.com.cn/problem/P4768"
title="[NOI2018] 归程">[NOI2018] 归程</a></h3>
<p>使用 Kruskal 重构树，倍增查找，时间复杂度 <span
class="math inline">\(O(n\log n)\)</span>。 <del>多测一定要记得清 head
数组……</del></p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>,M=<span class="number">4e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,a;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;x.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[M*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt,w;</span><br><span class="line">&#125;e[M*<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> tot_edge,head[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++tot_edge].to=v;</span><br><span class="line">    e[tot_edge].w=w;</span><br><span class="line">    e[tot_edge].nxt=head[u];</span><br><span class="line">    head[u]=tot_edge;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line"><span class="type">int</span> dis[N*<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=que.<span class="built_in">top</span>().second;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">            <span class="type">int</span> v=e[i].to,w=e[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">		        que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,q,k,s,fa[M*<span class="number">2</span>],w[M*<span class="number">2</span>],f[M*<span class="number">2</span>][<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=n;</span><br><span class="line">    <span class="built_in">sort</span>(p<span class="number">+1</span>,p<span class="number">+1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++)</span><br><span class="line">        fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(p[i].u),y=<span class="built_in">find</span>(p[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x==y)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        fa[x]=fa[y]=++cnt;</span><br><span class="line">        w[cnt]=p[i].a;</span><br><span class="line">        dis[cnt]=<span class="built_in">Min</span>(dis[x],dis[y]);</span><br><span class="line">        f[x][<span class="number">0</span>]=f[y][<span class="number">0</span>]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">            f[j][i]=f[f[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lastans,v0,p0;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(f[x][i]&amp;&amp;w[f[x][i]]&gt;y)</span><br><span class="line">            x=f[x][i];</span><br><span class="line">    <span class="keyword">return</span> dis[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;return.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;return.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">read</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		tot_edge=lastans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="built_in">sizeof</span>(w));</span><br><span class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">		<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">		<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">read</span>(n,m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,l;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(p[i].u,p[i].v,l,p[i].a);</span><br><span class="line">            <span class="built_in">add_edge</span>(p[i].u,p[i].v,l);</span><br><span class="line">            <span class="built_in">add_edge</span>(p[i].v,p[i].u,l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dijkstra</span>();</span><br><span class="line">        <span class="built_in">kruskal</span>();</span><br><span class="line">        <span class="built_in">read</span>(q,k,s);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">read</span>(v0,p0);</span><br><span class="line">            v0=(v0+k*lastans<span class="number">-1</span>)%n<span class="number">+1</span>;</span><br><span class="line">            p0=(p0+k*lastans)%(s<span class="number">+1</span>);</span><br><span class="line">            lastans=<span class="built_in">query</span>(v0,p0);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lastans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="scoi2016-萌萌哒"><a
href="https://www.luogu.com.cn/problem/P3295"
title="[SCOI2016] 萌萌哒">[SCOI2016] 萌萌哒</a></h3>
<p>倍增+并查集。考虑将区间二进制拆分，之后再合并。<span
class="math inline">\(f_{i,j}\)</span> 表示以 <span
class="math inline">\(i\)</span> 为左端点，长度为 <span
class="math inline">\(2^j\)</span> 的区间的所在连通块的左端点。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,f[N][<span class="number">25</span>],l1,r1,l2,r2,ans,maxn;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x][k])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x][k]=<span class="built_in">find</span>(f[x][k],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="built_in">find</span>(x,k),b=<span class="built_in">find</span>(y,k);</span><br><span class="line">    <span class="keyword">if</span>(a!=b)</span><br><span class="line">        f[a][k]=b;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    maxn=std::__lg(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=maxn;j++)</span><br><span class="line">            f[i][j]=i;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">read</span>(l1,r1,l2,r2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=maxn;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span>(l1+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=r1)&#123;</span><br><span class="line">                <span class="built_in">merge</span>(l1,l2,j);</span><br><span class="line">                l1+=<span class="number">1</span>&lt;&lt;j;</span><br><span class="line">                l2+=<span class="number">1</span>&lt;&lt;j;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=maxn;j;j--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="built_in">find</span>(i,j);</span><br><span class="line">            <span class="built_in">merge</span>(i,x,j<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">merge</span>(i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)),x+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)),j<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(f[i][<span class="number">0</span>]==i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                ans=<span class="number">9</span>;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans=(ans*<span class="number">10ll</span>)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="hh-去散步"><a href="https://www.luogu.com.cn/problem/P2151"
title="HH 去散步">HH 去散步</a></h3>
<p>设边权均为 <span class="math inline">\(1\)</span>，计算邻接矩阵 <span
class="math inline">\(A\)</span> 的 <span
class="math inline">\(k\)</span> 次幂，则 <span
class="math inline">\(A^k_{i,j}\)</span> 表示走 <span
class="math inline">\(k\)</span> 步能连接 <span
class="math inline">\(i\)</span> 和 <span
class="math inline">\(j\)</span>
两点间的路径条数。但这道题要求不走回头路，我们考虑点边互换，记录入边和出边来避免走回头路。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(x<span class="number">+48</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">write</span>(x/<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span><span class="number">+48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 45989</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">    <span class="type">int</span> x[N][N];</span><br><span class="line">    <span class="built_in">Matrix</span>()&#123;</span><br><span class="line">        <span class="built_in">memset</span>(x,<span class="number">0</span>,<span class="built_in">sizeof</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix &amp;a)&#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=cnt;k++)</span><br><span class="line">                    res.x[i][j]=(res.x[i][j]+x[i][k]*a.x[k][j]%mod)%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p;</span><br><span class="line"><span class="type">int</span> n,m,t,a,b,res;</span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        res.x[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">            res=res*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,t,a,b);</span><br><span class="line">    a++,b++;</span><br><span class="line">    e[cnt=<span class="number">1</span>].u=<span class="number">0</span>,e[<span class="number">1</span>].v=a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        u++,v++;</span><br><span class="line">        e[++cnt].u=u;</span><br><span class="line">        e[cnt].v=v;</span><br><span class="line">        e[++cnt].u=v;</span><br><span class="line">        e[cnt].v=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">            <span class="keyword">if</span>(e[i].v==e[j].u&amp;&amp;i!=(j^<span class="number">1</span>)&amp;&amp;i!=j)</span><br><span class="line">                p.x[i][j]=<span class="number">1</span>;</span><br><span class="line">    p=<span class="built_in">qpow</span>(p,t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">if</span>(e[i].v==b)</span><br><span class="line">            res=(res+p.x[<span class="number">1</span>][i])%mod;</span><br><span class="line">    <span class="built_in">write</span>(res);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="sdoi2015-寻宝游戏"><a
href="https://www.luogu.com.cn/problem/P3320"
title="[SDOI2015] 寻宝游戏">[SDOI2015] 寻宝游戏</a></h3>
<p>将关键点按 dfn 排序为 <span
class="math inline">\(a_1,a_2,a_3,\cdots,a_n\)</span>，则包含所有关键点的最小生成树的边权和的
<span class="math inline">\(2\)</span> 倍为 <span
class="math inline">\(dis(a_1,a_2)+dis(a_2,a_3)+\cdots+dis(a_n,a_1)\)</span>。
实现方面，使用一个 set 来查询前驱后继。这题不开 long long 一分没有。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll ans,d[N];</span><br><span class="line"><span class="type">int</span> dfn[N],son[N],dfncnt,idfn[N],dep[N],siz[N],top[N],fa[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to,w;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt; e[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    fa[u]=f;</span><br><span class="line">    dep[u]=dep[f]<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=i.to,w=i.w;</span><br><span class="line">        <span class="keyword">if</span>(v==f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        d[v]=d[u]+w;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])</span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">    top[u]=topf;</span><br><span class="line">    dfn[u]=++dfncnt;</span><br><span class="line">    idfn[dfncnt]=u;</span><br><span class="line">    <span class="keyword">if</span>(!son[u])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=i.to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[a]!=top[b])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[a]]&gt;dep[top[b]])</span><br><span class="line">            a=fa[top[a]];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b=fa[top[b]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[a]&gt;dep[b]?b:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dis</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">	a=idfn[a],b=idfn[b];</span><br><span class="line">    <span class="keyword">return</span> d[a]+d[b]<span class="number">-2</span>*d[<span class="built_in">lca</span>(a,b)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		st.<span class="built_in">insert</span>(t);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(st.<span class="built_in">size</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">		ans=<span class="number">2</span>*<span class="built_in">dis</span>(*st.<span class="built_in">begin</span>(),t);</span><br><span class="line">		st.<span class="built_in">insert</span>(t);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	st.<span class="built_in">insert</span>(t);</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="keyword">auto</span> it=st.<span class="built_in">find</span>(t);</span><br><span class="line">	<span class="keyword">if</span>(it==st.<span class="built_in">begin</span>())</span><br><span class="line">		x=*--st.<span class="built_in">end</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		x=*--it;</span><br><span class="line">	it=st.<span class="built_in">find</span>(t);</span><br><span class="line">	<span class="keyword">if</span>(it==--st.<span class="built_in">end</span>())</span><br><span class="line">		y=*st.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		y=*++it;</span><br><span class="line">	ans+=<span class="built_in">dis</span>(x,t)+<span class="built_in">dis</span>(t,y)-<span class="built_in">dis</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(st.<span class="built_in">size</span>()&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">		st.<span class="built_in">erase</span>(t);</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(st.<span class="built_in">size</span>()==<span class="number">3</span>)&#123;</span><br><span class="line">		st.<span class="built_in">erase</span>(t);</span><br><span class="line">		ans=<span class="number">2</span>*<span class="built_in">dis</span>(*st.<span class="built_in">begin</span>(),*--st.<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="keyword">auto</span> it=st.<span class="built_in">find</span>(t);</span><br><span class="line">	<span class="keyword">if</span>(it==st.<span class="built_in">begin</span>())</span><br><span class="line">		x=*--st.<span class="built_in">end</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		x=*--it;</span><br><span class="line">	it=st.<span class="built_in">find</span>(t);</span><br><span class="line">	<span class="keyword">if</span>(it==--st.<span class="built_in">end</span>())</span><br><span class="line">		y=*st.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		y=*++it;</span><br><span class="line">	ans-=<span class="built_in">dis</span>(x,t)+<span class="built_in">dis</span>(t,y)-<span class="built_in">dis</span>(x,y);</span><br><span class="line">	st.<span class="built_in">erase</span>(t);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">read</span>(x,y,z);</span><br><span class="line">        e[x].<span class="built_in">push_back</span>(&#123;y,z&#125;);</span><br><span class="line">        e[y].<span class="built_in">push_back</span>(&#123;x,z&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="built_in">read</span>(t);</span><br><span class="line">		t=dfn[t];</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">find</span>(t)==st.<span class="built_in">end</span>())</span><br><span class="line">			<span class="built_in">add</span>(t);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">			<span class="built_in">del</span>(t);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树·平衡树</title>
    <url>/2025/07/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%C2%B7%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
    <content><![CDATA[<h2 id="二叉搜索树">二叉搜索树</h2>
<h3 id="性质">性质</h3>
<ul>
<li>显然二叉搜索树是一棵二叉树。</li>
<li>空树是二叉搜索树。</li>
<li>二叉搜索树的左右子树也是二叉搜索树。</li>
<li>二叉搜索树的左子树上任意一个节点的权值均小于根节点的权值，右子树上任意一个节点的权值均大于根节点的权值。</li>
</ul>
<p>二叉搜索树上的基本操作时间复杂度大多为 <span
class="math inline">\(O(h)\)</span>，<span
class="math inline">\(h\)</span> 为二叉搜索树的高度。若二叉搜索树有
<span class="math inline">\(n\)</span> 个节点，则最优时间复杂度为 <span
class="math inline">\(O(\log n)\)</span>（完全二叉树），最坏时间复杂度为
<span class="math inline">\(O(n)\)</span>（退化成链）。
显然，二叉搜索树很容易被卡，我们需要上优化。 ## 平衡树
二叉搜索树复杂度之所以不稳定，在于其操作大多与树的高度有关。平衡树通过维护<strong>平衡性</strong>维持树的高度，降低时间复杂度。
### 平衡性 对于一棵二叉搜索树，每一个节点左子树和右子树高度相差至多为
<span class="math inline">\(1\)</span>。 ### 平衡的调整 我们使用
<strong>左旋（zag）</strong> 和 <strong>右旋（zig）</strong>
操作维护平衡性。注意，维护平衡性时不能改变中序遍历序列。
先说右旋操作，我们有一棵二叉搜索树 <img
src="https://github.com/headless-piston/blog_images/blob/main/rotate_1.png?raw=true"
alt="image" /> 我们将 <span class="math inline">\(B\)</span>
向右上旋转，成为新的根节点，<span class="math inline">\(A\)</span>
向右下旋转成为 <span class="math inline">\(B\)</span>
的右子树的根节点，<span class="math inline">\(B\)</span> 的右子树变为
<span class="math inline">\(A\)</span> 的左子树。 <img
src="https://github.com/headless-piston/blog_images/blob/main/rotate_2.png?raw=true"
alt="image" /> <img
src="https://github.com/headless-piston/blog_images/blob/main/rotate_3.png?raw=true"
alt="image" />
左旋与右旋互为镜像。将第三张图中的树左旋可得到第一张图中的树。 ### Splay
树 #### 定义 一种二叉平衡树，通过 Splay（伸展）操作，在 <span
class="math inline">\(O(\log n)\)</span>
时间内实现插入、查询和删除操作。注意，<span class="math inline">\(O(\log
n)\)</span> 为 Splay 的<strong>均摊</strong>时间复杂度。Splay
树将旋转操作用到了极致，但常数在平衡树中属于较大的。 #### 声明
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> son[N][<span class="number">2</span>];<span class="comment">//son[i][0/1]表示节点i的左/右儿子编号</span></span><br><span class="line"><span class="type">int</span> fa[N];<span class="comment">//父节点</span></span><br><span class="line"><span class="type">int</span> tot;<span class="comment">//已使用节点个数</span></span><br><span class="line"><span class="type">int</span> val[N];<span class="comment">//val[i]为节点i的权值</span></span><br><span class="line"><span class="type">int</span> cnt[N];<span class="comment">//cnt[i]为节点i所对权值出现的次数</span></span><br><span class="line"><span class="type">int</span> siz[N];<span class="comment">//子树的大小</span></span><br></pre></td></tr></table></figure> #### 辅助操作 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dir</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//判断节点x是父节点的左儿子还是右儿子</span></span><br><span class="line">	<span class="keyword">return</span> x==son[fa[x]][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//更新节点x的信息</span></span><br><span class="line">	siz[x]=cnt[x]+siz[son[x][<span class="number">0</span>]]+siz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 旋转操作 设需要上移节点
<span class="math inline">\(x\)</span>，进行右旋操作。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">/*右旋</span></span><br><span class="line"><span class="comment">			z           z</span></span><br><span class="line"><span class="comment">           /           /</span></span><br><span class="line"><span class="comment">          y	          x</span></span><br><span class="line"><span class="comment">         / \    -&gt;   / \</span></span><br><span class="line"><span class="comment">		x  yr       xl  y</span></span><br><span class="line"><span class="comment">       / \             / \</span></span><br><span class="line"><span class="comment">      xl xr           xr yr</span></span><br><span class="line"><span class="comment">  左旋</span></span><br><span class="line"><span class="comment">			z           z</span></span><br><span class="line"><span class="comment">			 \           \</span></span><br><span class="line"><span class="comment">			  y           x</span></span><br><span class="line"><span class="comment">			 / \  -&gt;     / \</span></span><br><span class="line"><span class="comment">			yl  x       y   xr</span></span><br><span class="line"><span class="comment">			   / \     / \</span></span><br><span class="line"><span class="comment">		      xl xr   yl xl</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line">	<span class="type">bool</span> r=<span class="built_in">dir</span>(x);</span><br><span class="line">	son[y][r]=son[x][!r];<span class="comment">//x的子节点转移到y</span></span><br><span class="line">	<span class="keyword">if</span>(son[x][!r])</span><br><span class="line">		fa[son[x][!r]]=y;</span><br><span class="line">	fa[x]=z;<span class="comment">//x变为z的子节点</span></span><br><span class="line">	<span class="keyword">if</span>(z)</span><br><span class="line">		son[z][<span class="built_in">dir</span>(y)]=x;</span><br><span class="line">	son[x][!r]=y;<span class="comment">//y变为x的子节点</span></span><br><span class="line">	fa[y]=x;</span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
#### 伸展操作 Splay 树要求访问每一个节点 <span
class="math inline">\(x\)</span>
后强制其旋转到根节点。该操作就是伸展操作。通过一系列伸展步骤将 <span
class="math inline">\(x\)</span> 逐步移到根节点。记 <span
class="math inline">\(x\)</span> 的父节点为 <span
class="math inline">\(p\)</span>，伸展步骤有三种： - zig/zag：当 <span
class="math inline">\(p\)</span> 为根节点时，直接将 <span
class="math inline">\(x\)</span> 左旋或右旋。在 <span
class="math inline">\(x\)</span>
在伸展操作刚开始时深度为奇数时作为伸展操作的最后一步。 -
zig-zig/zag-zag（一字型）：当 <span class="math inline">\(p\)</span>
不是根节点且 <span class="math inline">\(x\)</span> 和 <span
class="math inline">\(p\)</span>
都是左侧子节点或都是右侧子节点时进行。首先将 <span
class="math inline">\(p\)</span> 旋转，然后将 <span
class="math inline">\(x\)</span> 旋转。 - zig-zag/zag-zig（之字型）：当
<span class="math inline">\(p\)</span> 不是根节点且 <span
class="math inline">\(x\)</span> 和 <span
class="math inline">\(p\)</span>
一个为左侧子节点一个为右侧子节点时进行。将 <span
class="math inline">\(x\)</span> 先左旋再右旋或先右旋再左旋。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> x)</span></span>&#123;<span class="comment">//z为根节点</span></span><br><span class="line">	<span class="type">int</span> temp=fa[z];</span><br><span class="line">	<span class="keyword">while</span>(fa[x]!=temp)&#123;</span><br><span class="line">		<span class="type">int</span> y=fa[x];</span><br><span class="line">		<span class="keyword">if</span>(fa[y]!=temp)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dir</span>(x)==<span class="built_in">dir</span>(y))</span><br><span class="line">				<span class="built_in">rotate</span>(y);<span class="comment">//一字型</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">rotate</span>(x);<span class="comment">//之字型</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">rotate</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	z=x;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 平衡树操作 ##### 按照值查找 查找值 <span
class="math inline">\(v\)</span>，并将 <span
class="math inline">\(v\)</span> 所对节点上移至根部。 若不存在值为 <span
class="math inline">\(v\)</span>
的节点，则要将最后一个访问到的节点上移至根部。此时的根为所有大于 <span
class="math inline">\(v\)</span> 的值中最小的或所有小于 <span
class="math inline">\(v\)</span> 的值中最大的。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;<span class="comment">//该函数调用后的根节点即为返回值</span></span><br><span class="line">	<span class="type">int</span> x=z,y=fa[x];</span><br><span class="line">	<span class="keyword">while</span>(x&amp;&amp;val[x]!=v)&#123;</span><br><span class="line">		y=x;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x?x:y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #####
按照排名访问 即查找树中第 <span class="math inline">\(k\)</span>
小的元素。利用记载的子树大小进行查找。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loc</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]+cnt[x]&gt;=k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			k-=siz[son[x][<span class="number">0</span>]]+cnt[x];</span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ##### 合并 合并两棵
Splay 树，设根节点分别为 <span class="math inline">\(x\)</span> 和 <span
class="math inline">\(y\)</span>，则需要 <span
class="math inline">\(x\)</span> 树中的最大值小于 <span
class="math inline">\(y\)</span> 中的最小值。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="comment">//x树中的最大值小于y树中的最小值，返回合并后的根节点</span></span><br><span class="line">	<span class="keyword">if</span>(!x||!y)</span><br><span class="line">		<span class="keyword">return</span> x|y;<span class="comment">//存在空树，直接返回</span></span><br><span class="line">	<span class="built_in">loc</span>(y,<span class="number">1</span>);<span class="comment">//将y树最小值移至根节点</span></span><br><span class="line">	son[y][<span class="number">0</span>]=x;<span class="comment">//此时y左节点必然为空</span></span><br><span class="line">	fa[x]=y;<span class="comment">//x成为y的左子树</span></span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ##### 分裂
根据某值 <span class="math inline">\(v\)</span>，将 Splay
树分裂为值小于等于 <span class="math inline">\(v\)</span> 和大于 <span
class="math inline">\(v\)</span> 两部分。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v,<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;<span class="comment">//通过引用返回分裂后的根节点a和b</span></span><br><span class="line">	<span class="comment">//x为当前根节点，按照权值v分裂为小于等于v和大于v两部分</span></span><br><span class="line">	<span class="keyword">if</span>(!x)&#123;</span><br><span class="line">		a=b=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;<span class="comment">//树为空</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">find</span>(x,v);<span class="comment">//将权值为v的节点旋转到根节点</span></span><br><span class="line">	<span class="keyword">if</span>(val[x]&lt;=v)&#123;</span><br><span class="line">		a=x;</span><br><span class="line">		b=son[x][<span class="number">1</span>];</span><br><span class="line">		son[x][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		fa[b]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">push_up</span>(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		b=x;</span><br><span class="line">		a=son[x][<span class="number">0</span>];</span><br><span class="line">		son[x][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		fa[a]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">push_up</span>(b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ##### 插入
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z,y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x&amp;&amp;val[x]!=v)&#123;</span><br><span class="line">		y=x;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x)</span><br><span class="line">		cnt[x]++,siz[x]++;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		x=++tot;</span><br><span class="line">		val[x]=v;</span><br><span class="line">		cnt[x]=siz[x]=<span class="number">1</span>;</span><br><span class="line">		fa[x]=y;</span><br><span class="line">		<span class="keyword">if</span>(y)&#123;</span><br><span class="line">			<span class="keyword">if</span>(v&lt;val[y])</span><br><span class="line">				son[y][<span class="number">0</span>]=x;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				son[y][<span class="number">1</span>]=x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);<span class="comment">//插入过后不要忘记转到根节点</span></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ##### 删除 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(!z||val[z]!=v)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//删除失败</span></span><br><span class="line">	cnt[z]--,siz[z]--;</span><br><span class="line">	<span class="keyword">if</span>(!cnt[z])&#123;<span class="comment">//该节点对应的值被删完了</span></span><br><span class="line">		<span class="type">int</span> x=son[z][<span class="number">0</span>],y=son[z][<span class="number">1</span>];</span><br><span class="line">		fa[x]=fa[y]=<span class="number">0</span>;</span><br><span class="line">		z=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//删除成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ##### 查询排名 查询值 <span
class="math inline">\(v\)</span> 的排名。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_rank</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="type">int</span> res=siz[son[z][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">	<span class="keyword">if</span>(val[z]&lt;v)</span><br><span class="line">		res+=cnt[z];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ##### 查询前驱
即查询小于 <span class="math inline">\(v\)</span> 的最大的数。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_pre</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(z&amp;&amp;val[z]&lt;v)</span><br><span class="line">		<span class="keyword">return</span> val[z];</span><br><span class="line">	<span class="type">int</span> x=son[z][<span class="number">0</span>];<span class="comment">//在左子树中查找最大值</span></span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> -inf;</span><br><span class="line">	<span class="keyword">while</span>(son[x][<span class="number">1</span>])</span><br><span class="line">		x=son[x][<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span> val[z];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ##### 查询后继 即查询大于 <span
class="math inline">\(v\)</span> 的最小的数。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_nxt</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(z&amp;&amp;val[z]&gt;v)</span><br><span class="line">		<span class="keyword">return</span> val[z];</span><br><span class="line">	<span class="type">int</span> x=son[z][<span class="number">1</span>];<span class="comment">//在右子树中查找最小值</span></span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> inf;</span><br><span class="line">	<span class="keyword">while</span>(son[x][<span class="number">0</span>])</span><br><span class="line">		x=son[x][<span class="number">0</span>];</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span> val[z];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ####
序列操作 ##### 区间翻转 我们需要在树中加入值为 <span
class="math inline">\(-inf\)</span> 和 <span
class="math inline">\(inf\)</span> 两个哨兵节点，防止翻转区间包含第
<span class="math inline">\(1\)</span>
个节点或最后一个节点时出事。与线段树类似，我们使用懒标记记录翻转情况。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="built_in">loc</span>(root,l);<span class="comment">//将l转至根节点</span></span><br><span class="line">	<span class="built_in">loc</span>(son[root][<span class="number">1</span>],r-l<span class="number">+2</span>);<span class="comment">//将r转至根节点的右儿子，由于根已改变，所以第二个参数传的是r-l+2</span></span><br><span class="line">	<span class="type">int</span> x=son[son[root][<span class="number">1</span>]][<span class="number">0</span>];<span class="comment">//根节点右儿子的左儿子，则x为区间[l,r]的根节点</span></span><br><span class="line">	<span class="built_in">update_tag</span>(x);</span><br><span class="line">	<span class="built_in">push_down</span>(x);</span><br><span class="line">	<span class="built_in">splay</span>(root,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 辅助操作 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_tag</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(son[x][<span class="number">0</span>],son[x][<span class="number">1</span>]);</span><br><span class="line">	tag[x]^=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tag[x])&#123;</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">0</span>])</span><br><span class="line">			<span class="built_in">update_tag</span>(son[x][<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">1</span>])</span><br><span class="line">			<span class="built_in">update_tag</span>(son[x][<span class="number">1</span>]);</span><br><span class="line">		tag[x]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 同时，<span
class="math inline">\(\operatorname{loc}\)</span> 函数查找时要更新懒标记
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loc</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z;</span><br><span class="line">	<span class="built_in">push_down</span>(x);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>&gt;=k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			k-=siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">push_down</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 无注释版代码</p>
<details>
<summary>
模板题 1 主体部分
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dir</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x==son[fa[x]][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	siz[x]=cnt[x]+siz[son[x][<span class="number">0</span>]]+siz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line">	<span class="type">bool</span> r=<span class="built_in">dir</span>(x);</span><br><span class="line">	son[y][r]=son[x][!r];</span><br><span class="line">	<span class="keyword">if</span>(son[x][!r])</span><br><span class="line">		fa[son[x][!r]]=y;</span><br><span class="line">	fa[x]=z;</span><br><span class="line">	<span class="keyword">if</span>(z)</span><br><span class="line">		son[z][<span class="built_in">dir</span>(y)]=x;</span><br><span class="line">	son[x][!r]=y;</span><br><span class="line">	fa[y]=x;</span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp=fa[z];</span><br><span class="line">	<span class="keyword">while</span>(fa[x]!=temp)&#123;</span><br><span class="line">		<span class="type">int</span> y=fa[x];</span><br><span class="line">		<span class="keyword">if</span>(fa[y]!=temp)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dir</span>(x)==<span class="built_in">dir</span>(y))</span><br><span class="line">				<span class="built_in">rotate</span>(y);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">rotate</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">rotate</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	z=x;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z,y=fa[x];</span><br><span class="line">	<span class="keyword">while</span>(x&amp;&amp;val[x]!=v)&#123;</span><br><span class="line">		y=x;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x?x:y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loc</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]+cnt[x]&gt;=k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			k-=siz[son[x][<span class="number">0</span>]]+cnt[x];</span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y)</span><br><span class="line">		<span class="keyword">return</span> x|y;</span><br><span class="line">	<span class="built_in">loc</span>(y,<span class="number">1</span>);</span><br><span class="line">	son[y][<span class="number">0</span>]=x;</span><br><span class="line">	fa[x]=y;</span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z,y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x&amp;&amp;val[x]!=v)&#123;</span><br><span class="line">		y=x;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x)</span><br><span class="line">		cnt[x]++,siz[x]++;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		x=++tot;</span><br><span class="line">		val[x]=v;</span><br><span class="line">		cnt[x]=siz[x]=<span class="number">1</span>;</span><br><span class="line">		fa[x]=y;</span><br><span class="line">		<span class="keyword">if</span>(y)&#123;</span><br><span class="line">			<span class="keyword">if</span>(v&lt;val[y])</span><br><span class="line">				son[y][<span class="number">0</span>]=x;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				son[y][<span class="number">1</span>]=x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(!z||val[z]!=v)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	cnt[z]--,siz[z]--;</span><br><span class="line">	<span class="keyword">if</span>(!cnt[z])&#123;</span><br><span class="line">		<span class="type">int</span> x=son[z][<span class="number">0</span>],y=son[z][<span class="number">1</span>];</span><br><span class="line">		fa[x]=fa[y]=<span class="number">0</span>;</span><br><span class="line">		z=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_rank</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="type">int</span> res=siz[son[z][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">	<span class="keyword">if</span>(val[z]&lt;v)</span><br><span class="line">		res+=cnt[z];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_pre</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(z&amp;&amp;val[z]&lt;v)</span><br><span class="line">		<span class="keyword">return</span> val[z];</span><br><span class="line">	<span class="type">int</span> x=son[z][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(son[x][<span class="number">1</span>])</span><br><span class="line">		x=son[x][<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span> val[z];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_nxt</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(z&amp;&amp;val[z]&gt;v)</span><br><span class="line">		<span class="keyword">return</span> val[z];</span><br><span class="line">	<span class="type">int</span> x=son[z][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(son[x][<span class="number">0</span>])</span><br><span class="line">		x=son[x][<span class="number">0</span>];</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span> val[z];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<details>
<summary>
模板题 2 主体部分
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">2</span>],fa[N],tot,val[N],siz[N],root;</span><br><span class="line"><span class="type">bool</span> tag[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dir</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x==son[fa[x]][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	siz[x]=<span class="number">1</span>+siz[son[x][<span class="number">0</span>]]+siz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_tag</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(son[x][<span class="number">0</span>],son[x][<span class="number">1</span>]);</span><br><span class="line">	tag[x]^=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tag[x])&#123;</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">0</span>])</span><br><span class="line">			<span class="built_in">update_tag</span>(son[x][<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">1</span>])</span><br><span class="line">			<span class="built_in">update_tag</span>(son[x][<span class="number">1</span>]);</span><br><span class="line">		tag[x]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line">	<span class="type">bool</span> r=<span class="built_in">dir</span>(x);</span><br><span class="line">	son[y][r]=son[x][!r];</span><br><span class="line">	<span class="keyword">if</span>(son[x][!r])</span><br><span class="line">		fa[son[x][!r]]=y;</span><br><span class="line">	fa[x]=z;</span><br><span class="line">	<span class="keyword">if</span>(z)</span><br><span class="line">		son[z][<span class="built_in">dir</span>(y)]=x;</span><br><span class="line">	son[x][!r]=y;</span><br><span class="line">	fa[y]=x;</span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp=fa[z];</span><br><span class="line">	<span class="keyword">while</span>(fa[x]!=temp)&#123;</span><br><span class="line">		<span class="type">int</span> y=fa[x];</span><br><span class="line">		<span class="keyword">if</span>(fa[y]!=temp)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dir</span>(x)==<span class="built_in">dir</span>(y))</span><br><span class="line">				<span class="built_in">rotate</span>(y);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">rotate</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">rotate</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	z=x;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loc</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z;</span><br><span class="line">	<span class="built_in">push_down</span>(x);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>&gt;=k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			k-=siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">push_down</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="built_in">loc</span>(root,l);</span><br><span class="line">	<span class="built_in">loc</span>(son[root][<span class="number">1</span>],r-l<span class="number">+2</span>);</span><br><span class="line">	<span class="type">int</span> x=son[son[root][<span class="number">1</span>]][<span class="number">0</span>];</span><br><span class="line">	<span class="built_in">update_tag</span>(x);</span><br><span class="line">	<span class="built_in">push_down</span>(x);</span><br><span class="line">	<span class="built_in">splay</span>(root,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n<span class="number">+1</span>;i++)&#123;</span><br><span class="line">		son[++tot][<span class="number">0</span>]=root;</span><br><span class="line">		<span class="keyword">if</span>(root)</span><br><span class="line">			fa[root]=tot;</span><br><span class="line">		root=tot;</span><br><span class="line">		val[tot]=i;</span><br><span class="line">		siz[tot]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">push_up</span>(root);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(root,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="treap">Treap</h3>
<p>Treap
将二叉搜索树与堆结合起来，通过维护堆的性质维护平衡。所以每个节点需要额外维护一个随机的值，用这个随机的值来维护堆的性质。这里介绍旋转
Treap，即通过旋转维护平衡性。 #### 无注释版代码</p>
<details>
<summary>
Code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">2</span>],val[N],rnd[N],siz[N],cnt[N],tot,root;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	siz[x]=cnt[x]+siz[son[x][<span class="number">0</span>]]+siz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">bool</span> dir)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp=son[x][!dir];</span><br><span class="line">	son[x][!dir]=son[temp][dir];</span><br><span class="line">	son[temp][dir]=x;</span><br><span class="line">	x=temp;</span><br><span class="line">	<span class="built_in">push_up</span>(son[x][dir]);</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)&#123;</span><br><span class="line">		x=++tot;</span><br><span class="line">		siz[x]=cnt[x]=<span class="number">1</span>;</span><br><span class="line">		val[x]=v;</span><br><span class="line">		rnd[x]=<span class="built_in">rand</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(val[x]==v)</span><br><span class="line">		cnt[x]++;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">bool</span> dir=(v&gt;val[x]);</span><br><span class="line">		<span class="built_in">insert</span>(son[x][dir],v);</span><br><span class="line">		<span class="keyword">if</span>(rnd[x]&lt;rnd[son[x][dir]])</span><br><span class="line">			<span class="built_in">rotate</span>(x,!dir);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">		<span class="built_in">erase</span>(son[x][<span class="number">0</span>],v);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(v&gt;val[x])</span><br><span class="line">		<span class="built_in">erase</span>(son[x][<span class="number">1</span>],v);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[x]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			cnt[x]--;</span><br><span class="line">			<span class="built_in">push_up</span>(x);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">0</span>]||son[x][<span class="number">1</span>])&#123;</span><br><span class="line">			<span class="keyword">if</span>(!son[x][<span class="number">1</span>]||rnd[son[x][<span class="number">0</span>]]&gt;rnd[son[x][<span class="number">1</span>]])</span><br><span class="line">				<span class="built_in">rotate</span>(x,<span class="number">1</span>),<span class="built_in">erase</span>(son[x][<span class="number">1</span>],v);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">rotate</span>(x,<span class="number">0</span>),<span class="built_in">erase</span>(son[x][<span class="number">0</span>],v);</span><br><span class="line">			<span class="built_in">push_up</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_rank</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(v==val[x])</span><br><span class="line">		<span class="keyword">return</span> siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">	<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">find_rank</span>(son[x][<span class="number">0</span>],v);</span><br><span class="line">	<span class="keyword">return</span> siz[son[x][<span class="number">0</span>]]+cnt[x]+<span class="built_in">find_rank</span>(son[x][<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">find</span>(son[x][<span class="number">0</span>],k);</span><br><span class="line">	<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]+cnt[x]&gt;=k)</span><br><span class="line">		<span class="keyword">return</span> val[x];</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">find</span>(son[x][<span class="number">1</span>],k-siz[son[x][<span class="number">0</span>]]-cnt[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_pre</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=root,pre;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		<span class="keyword">if</span>(v&gt;val[x])</span><br><span class="line">			pre=val[x],x=son[x][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_nxt</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=root,nxt;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			nxt=val[x],x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> nxt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="fhq-treap">FHQ Treap</h3>
<p>即无旋转操作的
Treap，通过分裂和合并来维护平衡性。因其无旋，所以可以做可持久化数据结构，并且是平衡树中比较好写的一种。缺点是常数较大。</p>
<details>
<summary>
模板题 1 AC 代码
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FHQ_Treap</span>&#123;</span><br><span class="line">	<span class="type">int</span> ls,rs;</span><br><span class="line">	<span class="type">int</span> val,rnd,siz;</span><br><span class="line">&#125;t[N];</span><br><span class="line"><span class="type">int</span> root,tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	t[u].siz=t[t[u].ls].siz+t[t[u].rs].siz<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	t[++tot].rnd=<span class="built_in">rand</span>()&lt;&lt;<span class="number">15</span>|<span class="built_in">rand</span>();</span><br><span class="line">	t[tot].siz=<span class="number">1</span>;</span><br><span class="line">	t[tot].val=val;</span><br><span class="line">	<span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> val,<span class="type">int</span> &amp;lrt,<span class="type">int</span> &amp;rrt)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p)&#123;</span><br><span class="line">		lrt=rrt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(t[p].val&lt;=val)&#123;</span><br><span class="line">		lrt=p;</span><br><span class="line">		<span class="built_in">split</span>(t[p].rs,val,t[p].rs,rrt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		rrt=p;</span><br><span class="line">		<span class="built_in">split</span>(t[p].ls,val,lrt,t[p].ls);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!l||!r)</span><br><span class="line">		<span class="keyword">return</span> l|r;</span><br><span class="line">	<span class="keyword">if</span>(t[l].rnd&gt;t[r].rnd)&#123;</span><br><span class="line">		t[l].rs=<span class="built_in">merge</span>(t[l].rs,r);</span><br><span class="line">		<span class="built_in">push_up</span>(l);</span><br><span class="line">		<span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		t[r].ls=<span class="built_in">merge</span>(l,t[r].ls);</span><br><span class="line">		<span class="built_in">push_up</span>(r);</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">split</span>(root,val,x,y);</span><br><span class="line">	root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,<span class="built_in">build</span>(val)),y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y,temp;</span><br><span class="line">	<span class="built_in">split</span>(root,val,x,y);</span><br><span class="line">	<span class="built_in">split</span>(x,val<span class="number">-1</span>,x,temp);</span><br><span class="line">	temp=<span class="built_in">merge</span>(t[temp].ls,t[temp].rs);</span><br><span class="line">	root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,temp),y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_rank</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">split</span>(root,val<span class="number">-1</span>,x,y);</span><br><span class="line">	<span class="type">int</span> res=t[x].siz<span class="number">+1</span>;</span><br><span class="line">	root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_kth</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> p=root;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(t[t[p].ls].siz<span class="number">+1</span>==k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(t[t[p].ls].siz<span class="number">+1</span>&gt;k)</span><br><span class="line">			p=t[p].ls;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			k-=t[t[p].ls].siz<span class="number">+1</span>,p=t[p].rs;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> t[p].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">split</span>(root,val<span class="number">-1</span>,x,y);</span><br><span class="line">	<span class="type">int</span> p=x;</span><br><span class="line">	<span class="keyword">while</span>(t[p].rs)</span><br><span class="line">		p=t[p].rs;</span><br><span class="line">	root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> t[p].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">split</span>(root,val,x,y);</span><br><span class="line">	<span class="type">int</span> p=y;</span><br><span class="line">	<span class="keyword">while</span>(t[p].ls)</span><br><span class="line">		p=t[p].ls;</span><br><span class="line">	root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> t[p].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,opt,x;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;opt,&amp;x);</span><br><span class="line">		<span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="built_in">insert</span>(x);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="built_in">erase</span>(x);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">find_rank</span>(x));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">find_kth</span>(x));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">pre</span>(x));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">nxt</span>(x));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<p><a href="https://www.luogu.com.cn/problem/P3369"
title="模板题 1">模板题 1</a></p>
<p><a href="https://www.luogu.com.cn/problem/P3391"
title="模板题 2">模板题 2</a></p>
<p><a href="https://oi-wiki.org/ds/bst/"
title="参考资料">参考资料</a></p>
<p><a href="https://www.deepseek.com/"
title="特别鸣谢">特别鸣谢</a>，为我解答了很多问题，以及帮我进行代码的修正。</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>初等数论</title>
    <url>/2025/07/15/%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA/</url>
    <content><![CDATA[<p>之前写几篇数论文章已经忘了，而且写的也不是很美丽，正巧今天讲课讲了一遍数论，那就当从头复习一遍。<br />
### 符号与约定<br />
非特殊声明下，本文所涉及的数均为非负整数。<br />
<span class="math inline">\(a\mid b\)</span> 表示 <span
class="math inline">\(b\)</span> 是 <span
class="math inline">\(a\)</span> 的倍数，<span
class="math inline">\(a\)</span> 是 <span
class="math inline">\(b\)</span> 的约数。<br />
<span class="math inline">\(\gcd(a,b)\)</span> 表示 <span
class="math inline">\(a\)</span> 和 <span
class="math inline">\(b\)</span>
的最大公约数。在不引起混淆的前提下可记作 <span
class="math inline">\((a,b)\)</span>。<br />
<span class="math inline">\(\operatorname{lcm}(a,b)\)</span> 表示 <span
class="math inline">\(a\)</span> 和 <span
class="math inline">\(b\)</span>
的最小公倍数。在不引起混淆的前提下可记作 <span
class="math inline">\([a,b]\)</span>。<br />
### 素数<br />
数量估计：小于等于 <span class="math inline">\(x\)</span>
的素数<strong>约有</strong> <span class="math inline">\(\dfrac{x}{\ln
x}\)</span> 个。<br />
#### 埃拉托斯特尼筛法<br />
原理：所有合数必然都有素因子，则我们可以采用“标记”的思想，若遇到一个未被标记的数，则其必为素数，并将它的所有倍数标记。反之它就是合数。时间复杂度
<span class="math inline">\(O(n\log \log
n)\)</span>。我不会证。简单的优化是标记数组使用
<code>std::bitset</code>，性能甚至超越了 <span
class="math inline">\(O(n)\)</span> 的线性筛法。<br />
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e7</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">bitset&lt;N&gt; p;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="number">1e7</span>;</span><br><span class="line">    p.<span class="built_in">set</span>();</span><br><span class="line">    p[<span class="number">0</span>]=p[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n/i;i++)</span><br><span class="line">        <span class="keyword">if</span>(p[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i*i;j&lt;=n;j+=i)</span><br><span class="line">                p[j]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 外层循环只需执行到 <span
class="math inline">\(\sqrt{n}\)</span> 即可。使用安全的除法运算防止
<code>int</code> 溢出。<br />
#### 线性筛法<br />
也叫欧拉筛法。其时间复杂度为线性的原因是每个合数仅会被标记 <span
class="math inline">\(1\)</span>
次。更为重要的是，在筛出所有质数的同时也能求出所有数的最小质因子，可以优化质因数分解。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e7</span><span class="number">+10</span>,M=<span class="number">7e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,p[M],e[N],tot;<span class="comment">//e[i]存储i的最小质因子在p[]中的下标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="number">1e7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e[i]) p[e[i]=++tot]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=e[i]&amp;&amp;p[j]&lt;=n/i;j++)</span><br><span class="line">            e[p[j]*i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 算术基本定理<br />
任何一个数 <span
class="math inline">\(n\)</span>，都可以表示为有限个素数之积。即可以表示为：
<span class="math display">\[n=\prod p_i^{\alpha_i}\]</span>
这也是标准素因数分解式。<br />
根据这个式子，设 <span class="math inline">\(a=\prod
p_i^{\alpha_i}\)</span>，<span class="math inline">\(b=\prod
p_i^{\beta_i}\)</span>，则 <span
class="math inline">\(\gcd(a,b)\)</span> 可表示为 <span
class="math inline">\(\prod p_i^{\min(\alpha_i,\beta_i)}\)</span>，<span
class="math inline">\(\operatorname{lcm}(a,b)\)</span> 可表示为 <span
class="math inline">\(\prod
p_i^{\max(\alpha_i,\beta_i)}\)</span>。根据这个定义，容易证明 <span
class="math display">\[\gcd(a,b)\times \operatorname{lcm}(a,b)=a\times
b\]</span> ### 同余<br />
#### 求最大公约数<br />
辗转相除法，又名欧几里得算法。原理：<span
class="math inline">\(\gcd(a,b)=\gcd(b,a\bmod
b)\)</span>。递归执行，边界为 <span
class="math inline">\(\gcd(a,0)=a\)</span>。时间复杂度 <span
class="math inline">\(O(\log \min(a,b))\)</span>。 #### 裴蜀定理<br />
对于 <span class="math inline">\(a,b\)</span>，存在 <span
class="math inline">\(x,y\)</span> 使得<br />
<span class="math display">\[ax+by=\gcd(a,b)\]</span> 并且方程 <span
class="math inline">\(ax+by=c\)</span> 有解当且仅当 <span
class="math inline">\(\gcd(a,b)\mid
c\)</span>。以下是求解过程的推导：<br />
<span class="math display">\[\begin{aligned}
ax+by&amp;=\gcd(a,b)\\
&amp;=\gcd(b,a\bmod b)\\
&amp;=bx&#39;+(a-b\times \lfloor\frac{a}{b}\rfloor)y&#39;\\
&amp;=ay&#39;+b(x&#39;-\lfloor\frac{a}{b}\rfloor y&#39;)
\end{aligned}\]</span>
像欧几里得算法一样递归求解即可。这个算法叫做扩展欧几里得算法。<br />
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    <span class="type">int</span> temp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=temp-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> #### 逆元<br />
线性求法：<br />
要求模数 <span class="math inline">\(p\)</span>
为<strong>质数</strong>。显然在 <span class="math inline">\(i=1\)</span>
时 <span class="math inline">\(i^{-1}=1\)</span>，考虑 <span
class="math inline">\(i&gt;1\)</span> 的情况。设 <span
class="math inline">\(k=\lfloor\dfrac{p}{i}\rfloor,j=p\bmod
i\)</span>，则 <span class="math inline">\(p=ki+j\)</span>。则 <span
class="math inline">\(ki+j\equiv 0 \pmod p\)</span>，两边同时乘 <span
class="math inline">\(i^{-1}j^{-1}\)</span>，得 <span
class="math inline">\(kj^{-1}+i^{-1}\equiv 0\pmod p\)</span>，移项并回代
<span class="math inline">\(k,j\)</span>，得 <span
class="math inline">\(i^{-1}\equiv
-\lfloor\dfrac{p}{i}\rfloor\times(p\bmod i)^{-1} \pmod p\)</span>
实际操作中为了避免负数，可以将 <span
class="math inline">\(-\lfloor\dfrac{p}{i}\rfloor\)</span> 替换为 <span
class="math inline">\(p-\lfloor\dfrac{p}{i}\rfloor\)</span>。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    inv[i]=(<span class="type">long</span> <span class="type">long</span>)(p-p/i)*inv[p%i]%p;</span><br></pre></td></tr></table></figure> 不过一般都直接用费马小定理快速幂求出。 #### 欧拉函数<br />
定义欧拉函数 <span class="math inline">\(\varphi(n)\)</span> 为 <span
class="math inline">\(1\sim n\)</span> 中与 <span
class="math inline">\(n\)</span> 互素的数的个数。<br />
<span class="math display">\[\varphi(n)=n\prod
\frac{p_i-1}{p_i}\]</span> 证明：容斥，但我不会。<br />
欧拉定理：<br />
若 <span class="math inline">\(a,m\)</span> <strong>互质</strong>，则
<span class="math inline">\(a^{\varphi(m)}\equiv 1\pmod
m\)</span>。<br />
扩展欧拉定理： <span class="math display">\[a^b\equiv
\begin{cases}a^{b\bmod \varphi(m)},&amp;\gcd(a,m)=1,\\
a^b,&amp;\gcd(a,m)\ne 1,b&lt;\varphi(m),\\
a^{(b\bmod\varphi(m))+\varphi(m)},&amp;\gcd(a,m)\ne 1,b\ge\varphi(m).
\end{cases}
\pmod m
\]</span> 都不会证。 ### 线性同余方程组<br />
#### 扩展中国剩余定理<br />
又称 exCRT。<br />
给定同余方程组<br />
<span class="math display">\[\begin{cases}
x\equiv a_1\pmod {m_1},\\
x\equiv a_2\pmod {m_2},\\
\cdots\\
x\equiv a_n\pmod {m_n}.
\end{cases}\]</span> 在模数<strong>不保证</strong>互质的情况下求解 <span
class="math inline">\(x\)</span>。<br />
原理：exCRT 的本质是合并线性同余方程。<br />
定理：若方程组有解，则解在模 <span
class="math inline">\(\operatorname{lcm}(m_1,m_2,\cdots,m_n)\)</span>
意义下唯一，否则无解。<br />
求解过程：<br />
考虑 <span class="math inline">\(2\)</span> 个同余方程的情况： <span
class="math display">\[\begin{cases}
x\equiv a_1\pmod {m_1},\\
x\equiv a_2\pmod {m_2}.
\end{cases}\]</span> 设 <span
class="math inline">\(x=k_1m_1+a_1=k_2m_2+a_2\)</span>，则 <span
class="math inline">\(k_1m_1-k_2m_2=a_2-a_1\)</span>。注意：根据裴蜀定理，当且仅当
<span class="math inline">\(\gcd(m_1,m_2)\mid (a_2-a_1)\)</span>
时此方程有解。设 <span
class="math inline">\(d=\gcd(m_1,m_2)\)</span>，原式写为 <span
class="math inline">\(\dfrac{m_1}{d}k_1-\dfrac{m_2}{d}k_2=\dfrac{a_2-a_1}{d}\)</span>，设
<span
class="math inline">\(m_1&#39;=\dfrac{m_1}{d},m_2&#39;=\dfrac{m_2}{d},c=\dfrac{a_2-a_1}{d}\)</span>，则方程变为：<br />
<span class="math display">\[m_1&#39;k_1+m_2&#39;k_2=c\]</span> 因为
<span
class="math inline">\(\gcd(m_1&#39;,m_2&#39;)=1\)</span>，所以可以直接用扩展欧几里得算法求出
<span class="math inline">\(k_1\)</span> 的一个特解 <span
class="math inline">\(k_1^*\)</span>。<span
class="math inline">\(k_1\)</span> 的通解为 <span
class="math inline">\(k_1=k_1^*+t\times m_2&#39;\)</span>，代回，得到
<span class="math inline">\(x\)</span> 的通解为<br />
<span class="math display">\[\begin{aligned}
x&amp;=k_1m_1+a_1\\
&amp;=(k_1^*+t\times m_2&#39;)m_1+a_1\\
&amp;=m_1k_1^*+a_1+t\times m_1m_2&#39;
\end{aligned}\]</span> 注意到 <span
class="math inline">\(m_1m_2&#39;=\dfrac{m_1m_2}{d}=\operatorname{lcm}(m_1,m_2)\)</span>，所以有<br />
<span class="math display">\[x\equiv
m_1k_1^*+a_1\pmod{\operatorname{lcm}(m_1,m_2)}\]</span>
至此，我们成功合并了两个方程。<br />
对于 <span class="math inline">\(n\)</span>
个方程的合并，只需重复以上步骤，一直合并到只剩一个方程 <span
class="math inline">\(x\equiv A\pmod M\)</span>，其中 <span
class="math inline">\(M=\operatorname{lcm}(m_1,m_2,\cdots,m_n)\)</span>。时间复杂度
<span class="math inline">\(O(n\log M)\)</span>。<br />
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exCRT</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a1=a[<span class="number">1</span>],m1=m[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a2=a[i],m2=m[i];</span><br><span class="line">        <span class="type">int</span> k1,k2;</span><br><span class="line">        <span class="type">int</span> d=<span class="built_in">exgcd</span>(m1,m2,k1,k2);</span><br><span class="line">        <span class="keyword">if</span>((a2-a1)%d!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        k1*=(a2-a1)/d;</span><br><span class="line">        <span class="type">int</span> t=m2/d;</span><br><span class="line">        k1=(k1%t+t)%t;</span><br><span class="line">        a1+=k1*m1;</span><br><span class="line">        m1=m1/d*m2;</span><br><span class="line">        a1=(a1%m1+m1)%m1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 其他<br />
附表：<br />
<img
src="https://github.com/headless-piston/blog_images/blob/main/prime.jpg?raw=true" /></p>
<p>参考资料：<br />
https://oi-wiki.org/math/ https://www.cnblogs.com/Tmbcan/p/18903233</p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>双语歌词修复器</title>
    <url>/2025/07/14/%E5%8F%8C%E8%AF%AD%E6%AD%8C%E8%AF%8D%E4%BF%AE%E5%A4%8D%E5%99%A8/</url>
    <content><![CDATA[<p>lyh 大爷给的音乐网站相当好用，但是上面的歌词下载下来全 tm
有问题啊。这严重影响了开摆的体验…… ### 前置知识 #### lrc 文件
歌词文件的扩展名一般为 <code>.lrc</code>，电脑中的 music player 如
PotPlayer 在播放某音乐时会自动在与音乐文件相同的路径下查找同名 lrc
文件。如果查到，就会在播放音乐时同步渲染出歌词。<br />
你可以直接用记事本打开 lrc
文件，然后就会发现里面的内容大约为这个格式：<br />
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[11:45.14]Wha↗t↘ can I↗↘say~</span><br><span class="line">[19:19.81]Man↗ba↗ o↗ut~</span><br></pre></td></tr></table></figure> <code>[]</code>
内的东西叫做时间戳，表示应该啥时候渲染出这一句歌词。而如果是中英双语的歌词，大概是这样的：<br />
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[11:45.14]Wha↗t↘ can I↗↘say~</span><br><span class="line">[11:45.14]我能说什么</span><br><span class="line">[19:19.81]Man↗ba↗ o↗ut~</span><br><span class="line">[19:19.81]曼巴出来</span><br></pre></td></tr></table></figure> 对应的中文翻译的时间戳应当与英文的一样。<br />
#### 中文的编码方式 我们知道英文可以用 ASCII 码，每个字符 <span
class="math inline">\(1\)</span> 字节，然而中文的编码一般是每个字占
<span class="math inline">\(2\)</span>
字节甚至更多，正常程序中对中文字符串的某位进行处理可能导致表示同一个字的多字节中的其中一个改变，而其他的没变，最终变为乱码。<br />
### 问题分析 我们发现，从网站上下载下来的歌词文件长这样：</p>
<details>
<summary>
Take Me Hand-DAISHI DANCE&amp;Cécile Corbel.lrc
</summary>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[00:00.0]Take Me Hands - DAISHI DANCE/</span><br><span class="line">[00:23.83] </span><br><span class="line">[00:23.83]Lyrics by：Cecile Corbel</span><br><span class="line">[00:36.89] </span><br><span class="line">[00:36.89]Composed by：DAISHI DANCE/Tomoharu Moriya</span><br><span class="line">[00:59.59] </span><br><span class="line">[00:59.59]In my dreams</span><br><span class="line">[01:01.49]在我的梦里</span><br><span class="line">[01:01.49]I feel your light</span><br><span class="line">[01:03.38]我感受到了你的光芒</span><br><span class="line">[01:03.38]I feel love is born again</span><br><span class="line">[01:07.01]我感受到了爱的重生</span><br><span class="line">[01:07.01]Fireflies</span><br><span class="line">[01:09.020004]萤火虫</span><br><span class="line">[01:09.020004]In the moonlight</span><br><span class="line">[01:10.84]在月光下</span><br><span class="line">[01:10.84]Rising stars</span><br><span class="line">[01:14.479996]随着星星闪耀</span><br><span class="line">[01:14.479996]Remember</span><br><span class="line">[01:16.979996]记住</span><br><span class="line">[01:16.979996]The day</span><br><span class="line">[01:19.11]这个日子</span><br><span class="line">[01:19.11]I fell in love with you</span><br><span class="line">[01:22.03]我与你相爱</span><br><span class="line">[01:22.03]Darling won&#x27;t you break</span><br><span class="line">[01:26.12]亲爱的 你不会</span><br><span class="line">[01:26.12]My heart</span><br><span class="line">[01:29.979996]让我心碎</span><br><span class="line">[01:29.979996]Take my hand now</span><br><span class="line">[01:31.75]牵着我的手</span><br><span class="line">[01:31.75]Stay close to me</span><br><span class="line">[01:33.81]贴近我的心</span><br><span class="line">[01:33.81]Be my lover</span><br><span class="line">[01:35.68]做我的爱人</span><br><span class="line">[01:35.68]Won&#x27;t you let me go</span><br><span class="line">[01:37.53]你不会让我离开</span><br><span class="line">[01:37.53]Close your eyes now</span><br><span class="line">[01:39.5]现在 闭上你的双眼</span><br><span class="line">[01:39.5]And you will see</span><br><span class="line">[01:41.34]你将会看到</span><br><span class="line">[01:41.34]There&#x27;s a rainbow</span><br><span class="line">[01:43.21]有一道彩虹</span><br><span class="line">[01:43.21]For you and me</span><br><span class="line">[01:59.64]专属你我</span><br><span class="line">[01:59.64]As I wake up</span><br><span class="line">[02:01.58]当我醒来</span><br><span class="line">[02:01.58]I see your face</span><br><span class="line">[02:03.49]看着你的脸庞</span><br><span class="line">[02:03.49]I feel love is born again</span><br><span class="line">[02:07.02]我感受到了爱的重生</span><br><span class="line">[02:07.02]Cherry blossom</span><br><span class="line">[02:08.9]樱花烂漫</span><br><span class="line">[02:08.9]Flying birds</span><br><span class="line">[02:10.84]鸟儿飞翔</span><br><span class="line">[02:10.84]In the sky</span><br><span class="line">[02:14.64]在天空里</span><br><span class="line">[02:14.64]Can&#x27;t you see</span><br><span class="line">[02:16.85]你是否看得见</span><br><span class="line">[02:16.85]The sun</span><br><span class="line">[02:18.34]阳光</span><br><span class="line">[02:18.34]That is shining on the fields</span><br><span class="line">[02:22.12]照射着大地</span><br><span class="line">[02:22.12]Is it shining in</span><br><span class="line">[02:26.33]它是否照射进</span><br><span class="line">[02:26.33]Your heart</span><br><span class="line">[02:29.99]你的心里</span><br><span class="line">[02:29.99]Take my hand now</span><br><span class="line">[02:31.75]牵着我的手</span><br><span class="line">[02:31.75]Stay close to me</span><br><span class="line">[02:33.81]贴近我的心</span><br><span class="line">[02:33.81]Be my lover</span><br><span class="line">[02:35.68]做我的爱人</span><br><span class="line">[02:35.68]Won&#x27;t you let me go</span><br><span class="line">[02:37.54001]你不会让我离开</span><br><span class="line">[02:37.54001]Close your eyes now</span><br><span class="line">[02:39.52]现在 闭上你的双眼</span><br><span class="line">[02:39.52]And you will see</span><br><span class="line">[02:41.33]你将会看到</span><br><span class="line">[02:41.33]There&#x27;s a rainbow</span><br><span class="line">[02:43.20999]有一道彩虹</span><br><span class="line">[02:43.20999]For you and me</span><br><span class="line">[02:59.65]专属你我</span><br><span class="line">[02:59.65]And I dream of you</span><br><span class="line">[03:03.36]我都梦见你</span><br><span class="line">[03:03.36]Every night</span><br><span class="line">[03:06.95]在每一个夜晚</span><br><span class="line">[03:06.95]Cause&#x27;s there only you</span><br><span class="line">[03:10.9]因为 是否只有你</span><br><span class="line">[03:10.9]In my mind</span><br><span class="line">[03:14.49]在我的心里</span><br><span class="line">[03:14.49]Will you be</span><br><span class="line">[03:16.99]你会是</span><br><span class="line">[03:16.99]A stranger or a friend in my life</span><br><span class="line">[03:22.13]我生命中的陌生人 还是一个朋友</span><br><span class="line">[03:22.13]Darling won&#x27;t you break</span><br><span class="line">[03:25.9]亲爱的 你不会</span><br><span class="line">[03:25.9]My heart</span><br><span class="line">[03:29.99]让我心碎</span><br><span class="line">[03:29.99]Take my hand now</span><br><span class="line">[03:31.75]牵着我的手</span><br><span class="line">[03:31.75]Stay close to me</span><br><span class="line">[03:33.83]贴近我的心</span><br><span class="line">[03:33.83]Be my lover</span><br><span class="line">[03:35.67]做我的爱人</span><br><span class="line">[03:35.67]Won&#x27;t you let me go</span><br><span class="line">[03:37.52]你不会让我离开</span><br><span class="line">[03:37.52]Close your eyes now</span><br><span class="line">[03:39.47]现在 闭上你的双眼</span><br><span class="line">[03:39.47]And you will see</span><br><span class="line">[03:41.33]你将会看到</span><br><span class="line">[03:41.33]There&#x27;s a rainbow</span><br><span class="line">[03:43.2]有一道彩虹</span><br><span class="line">[03:43.2]For you and me</span><br><span class="line">[03:45.0]专属你我</span><br><span class="line">[03:45.0]Take my hand now</span><br><span class="line">[03:46.75]牵着我的手</span><br><span class="line">[03:46.75]Stay close to me</span><br><span class="line">[03:48.8]贴近我的心</span><br><span class="line">[03:48.8]Be my lover</span><br><span class="line">[03:50.67]做我的爱人</span><br><span class="line">[03:50.67]Won&#x27;t you let me go</span><br><span class="line">[03:52.52]你不会让我离开</span><br><span class="line">[03:52.52]Close your eyes now</span><br><span class="line">[03:54.51]现在 闭上你的双眼</span><br><span class="line">[03:54.51]And you will see</span><br><span class="line">[03:56.33]你将会看到</span><br><span class="line">[03:56.33]There&#x27;s a rainbow</span><br><span class="line">[03:58.19]有一道彩虹</span><br><span class="line">[03:58.19]For you and me</span><br><span class="line">[03:59.7]专属你我</span><br><span class="line">[03:59.7]Darling take my hand now</span><br><span class="line">[04:02.3]牵着我的手</span><br><span class="line">[04:02.3]Stay close to me</span><br><span class="line">[04:03.86]贴近我的心</span><br><span class="line">[04:03.86]Be my lover</span><br><span class="line">[04:05.93]做我的爱人</span><br><span class="line">[04:05.93]Won&#x27;t you let me go</span><br><span class="line">[04:07.35]不要放开我的手</span><br><span class="line">[04:07.35]Close your eyes now</span><br><span class="line">[04:08.76]现在 闭上你的双眼</span><br><span class="line">[04:08.76]And you will see</span><br><span class="line">[04:11.34]你将会看到</span><br><span class="line">[04:11.34]There&#x27;s a rainbow</span><br><span class="line">[04:13.19]有一道彩虹</span><br><span class="line">[04:13.19]For you and me</span><br><span class="line">[04:13.21]专属你我</span><br></pre></td></tr></table></figure>
</details>
<p>问题主要有两个：<br />
1. 全错位了，除了第一行，其他每行都应使用上一行的时间戳 1.
有的时间戳长的吓人，这样的时间戳会导致渲染错误。经我实测，删掉后面多余的部分对渲染没有影响，所以我们直接丢弃超出正常长度的部分就行。</p>
<p>所以我们编写程序对这种格式错误进行修复。<br />
为了解决中文乱码问题，我们使用 <code>fstream</code> 而不是传统的 I/O
方式。<br />
### code <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;.lrc&quot;</span>,ios::binary)</span></span>;</span><br><span class="line">    <span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">&quot;fixed.lrc&quot;</span>,ios::binary)</span></span>;</span><br><span class="line">    out&lt;&lt;<span class="built_in">char</span>(<span class="number">0xEF</span>)&lt;&lt;<span class="built_in">char</span>(<span class="number">0xBB</span>)&lt;&lt;<span class="built_in">char</span>(<span class="number">0xBF</span>);<span class="comment">//防中文乱码</span></span><br><span class="line">    string line,last_time;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(in,line))&#123;</span><br><span class="line">        <span class="keyword">if</span>(line.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            out&lt;&lt;last_time&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> it=--line.<span class="built_in">end</span>();</span><br><span class="line">        <span class="keyword">while</span>(it!=line.<span class="built_in">begin</span>()&amp;&amp;*it==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            line.<span class="built_in">erase</span>(it--);<span class="comment">//去除行末空格</span></span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> pos=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(line[pos]==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">            s.<span class="built_in">push_back</span>(line[pos++]);</span><br><span class="line">            <span class="keyword">while</span>(pos&lt;(<span class="type">int</span>)line.<span class="built_in">length</span>()&amp;&amp;line[pos]!=<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">                s.<span class="built_in">push_back</span>(line[pos++]);</span><br><span class="line">            <span class="keyword">if</span>(pos&lt;(<span class="type">int</span>)line.<span class="built_in">length</span>())</span><br><span class="line">                s.<span class="built_in">push_back</span>(line[pos++]);</span><br><span class="line">        &#125;<span class="comment">//截取时间戳</span></span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">length</span>()&gt;<span class="number">9</span>)</span><br><span class="line">            s.<span class="built_in">erase</span>(<span class="number">9</span>),s.<span class="built_in">push_back</span>(<span class="string">&#x27;]&#x27;</span>);<span class="comment">//限制时间戳长度</span></span><br><span class="line">        string content;</span><br><span class="line">        <span class="keyword">while</span>(pos&lt;(<span class="type">int</span>)line.<span class="built_in">length</span>())</span><br><span class="line">            content.<span class="built_in">push_back</span>(line[pos++]);</span><br><span class="line">        <span class="keyword">if</span>(f)&#123;<span class="comment">//第一行</span></span><br><span class="line">            out&lt;&lt;<span class="string">&quot;[00:00.0]&quot;</span>&lt;&lt;content&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            f=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!last_time.<span class="built_in">empty</span>()||!content.<span class="built_in">empty</span>())</span><br><span class="line">            out&lt;&lt;last_time&lt;&lt;content&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        last_time=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 使用流程 创建 cpp 文件
<code>lrc_fix_tool.cpp</code> 并编译，将待修复歌词的文件名改为
<code>.lrc</code>（这个时候顺便复制原歌词文件名），与
<code>lrc_fix_tool.exe</code>
放在同一路径，运行程序，在相同路径下生成修复好的
<code>fixed.lrc</code>，这时再重命名回去就好啦。<br />
经实测，刚才的问题歌词修改后为：</p>
<details>
<summary>
Take Me Hand-DAISHI DANCE&amp;Cécile Corbel.lrc
</summary>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[00:00.0]Take Me Hands - DAISHI DANCE/</span><br><span class="line">[00:00.0]</span><br><span class="line">[00:23.83]Lyrics by：Cecile Corbel</span><br><span class="line">[00:23.83]</span><br><span class="line">[00:36.89]Composed by：DAISHI DANCE/Tomoharu Moriya</span><br><span class="line">[00:36.89]</span><br><span class="line">[00:59.59]In my dreams</span><br><span class="line">[00:59.59]在我的梦里</span><br><span class="line">[01:01.49]I feel your light</span><br><span class="line">[01:01.49]我感受到了你的光芒</span><br><span class="line">[01:03.38]I feel love is born again</span><br><span class="line">[01:03.38]我感受到了爱的重生</span><br><span class="line">[01:07.01]Fireflies</span><br><span class="line">[01:07.01]萤火虫</span><br><span class="line">[01:09.02]In the moonlight</span><br><span class="line">[01:09.02]在月光下</span><br><span class="line">[01:10.84]Rising stars</span><br><span class="line">[01:10.84]随着星星闪耀</span><br><span class="line">[01:14.47]Remember</span><br><span class="line">[01:14.47]记住</span><br><span class="line">[01:16.97]The day</span><br><span class="line">[01:16.97]这个日子</span><br><span class="line">[01:19.11]I fell in love with you</span><br><span class="line">[01:19.11]我与你相爱</span><br><span class="line">[01:22.03]Darling won&#x27;t you break</span><br><span class="line">[01:22.03]亲爱的 你不会</span><br><span class="line">[01:26.12]My heart</span><br><span class="line">[01:26.12]让我心碎</span><br><span class="line">[01:29.97]Take my hand now</span><br><span class="line">[01:29.97]牵着我的手</span><br><span class="line">[01:31.75]Stay close to me</span><br><span class="line">[01:31.75]贴近我的心</span><br><span class="line">[01:33.81]Be my lover</span><br><span class="line">[01:33.81]做我的爱人</span><br><span class="line">[01:35.68]Won&#x27;t you let me go</span><br><span class="line">[01:35.68]你不会让我离开</span><br><span class="line">[01:37.53]Close your eyes now</span><br><span class="line">[01:37.53]现在 闭上你的双眼</span><br><span class="line">[01:39.5]And you will see</span><br><span class="line">[01:39.5]你将会看到</span><br><span class="line">[01:41.34]There&#x27;s a rainbow</span><br><span class="line">[01:41.34]有一道彩虹</span><br><span class="line">[01:43.21]For you and me</span><br><span class="line">[01:43.21]专属你我</span><br><span class="line">[01:59.64]As I wake up</span><br><span class="line">[01:59.64]当我醒来</span><br><span class="line">[02:01.58]I see your face</span><br><span class="line">[02:01.58]看着你的脸庞</span><br><span class="line">[02:03.49]I feel love is born again</span><br><span class="line">[02:03.49]我感受到了爱的重生</span><br><span class="line">[02:07.02]Cherry blossom</span><br><span class="line">[02:07.02]樱花烂漫</span><br><span class="line">[02:08.9]Flying birds</span><br><span class="line">[02:08.9]鸟儿飞翔</span><br><span class="line">[02:10.84]In the sky</span><br><span class="line">[02:10.84]在天空里</span><br><span class="line">[02:14.64]Can&#x27;t you see</span><br><span class="line">[02:14.64]你是否看得见</span><br><span class="line">[02:16.85]The sun</span><br><span class="line">[02:16.85]阳光</span><br><span class="line">[02:18.34]That is shining on the fields</span><br><span class="line">[02:18.34]照射着大地</span><br><span class="line">[02:22.12]Is it shining in</span><br><span class="line">[02:22.12]它是否照射进</span><br><span class="line">[02:26.33]Your heart</span><br><span class="line">[02:26.33]你的心里</span><br><span class="line">[02:29.99]Take my hand now</span><br><span class="line">[02:29.99]牵着我的手</span><br><span class="line">[02:31.75]Stay close to me</span><br><span class="line">[02:31.75]贴近我的心</span><br><span class="line">[02:33.81]Be my lover</span><br><span class="line">[02:33.81]做我的爱人</span><br><span class="line">[02:35.68]Won&#x27;t you let me go</span><br><span class="line">[02:35.68]你不会让我离开</span><br><span class="line">[02:37.54]Close your eyes now</span><br><span class="line">[02:37.54]现在 闭上你的双眼</span><br><span class="line">[02:39.52]And you will see</span><br><span class="line">[02:39.52]你将会看到</span><br><span class="line">[02:41.33]There&#x27;s a rainbow</span><br><span class="line">[02:41.33]有一道彩虹</span><br><span class="line">[02:43.20]For you and me</span><br><span class="line">[02:43.20]专属你我</span><br><span class="line">[02:59.65]And I dream of you</span><br><span class="line">[02:59.65]我都梦见你</span><br><span class="line">[03:03.36]Every night</span><br><span class="line">[03:03.36]在每一个夜晚</span><br><span class="line">[03:06.95]Cause&#x27;s there only you</span><br><span class="line">[03:06.95]因为 是否只有你</span><br><span class="line">[03:10.9]In my mind</span><br><span class="line">[03:10.9]在我的心里</span><br><span class="line">[03:14.49]Will you be</span><br><span class="line">[03:14.49]你会是</span><br><span class="line">[03:16.99]A stranger or a friend in my life</span><br><span class="line">[03:16.99]我生命中的陌生人 还是一个朋友</span><br><span class="line">[03:22.13]Darling won&#x27;t you break</span><br><span class="line">[03:22.13]亲爱的 你不会</span><br><span class="line">[03:25.9]My heart</span><br><span class="line">[03:25.9]让我心碎</span><br><span class="line">[03:29.99]Take my hand now</span><br><span class="line">[03:29.99]牵着我的手</span><br><span class="line">[03:31.75]Stay close to me</span><br><span class="line">[03:31.75]贴近我的心</span><br><span class="line">[03:33.83]Be my lover</span><br><span class="line">[03:33.83]做我的爱人</span><br><span class="line">[03:35.67]Won&#x27;t you let me go</span><br><span class="line">[03:35.67]你不会让我离开</span><br><span class="line">[03:37.52]Close your eyes now</span><br><span class="line">[03:37.52]现在 闭上你的双眼</span><br><span class="line">[03:39.47]And you will see</span><br><span class="line">[03:39.47]你将会看到</span><br><span class="line">[03:41.33]There&#x27;s a rainbow</span><br><span class="line">[03:41.33]有一道彩虹</span><br><span class="line">[03:43.2]For you and me</span><br><span class="line">[03:43.2]专属你我</span><br><span class="line">[03:45.0]Take my hand now</span><br><span class="line">[03:45.0]牵着我的手</span><br><span class="line">[03:46.75]Stay close to me</span><br><span class="line">[03:46.75]贴近我的心</span><br><span class="line">[03:48.8]Be my lover</span><br><span class="line">[03:48.8]做我的爱人</span><br><span class="line">[03:50.67]Won&#x27;t you let me go</span><br><span class="line">[03:50.67]你不会让我离开</span><br><span class="line">[03:52.52]Close your eyes now</span><br><span class="line">[03:52.52]现在 闭上你的双眼</span><br><span class="line">[03:54.51]And you will see</span><br><span class="line">[03:54.51]你将会看到</span><br><span class="line">[03:56.33]There&#x27;s a rainbow</span><br><span class="line">[03:56.33]有一道彩虹</span><br><span class="line">[03:58.19]For you and me</span><br><span class="line">[03:58.19]专属你我</span><br><span class="line">[03:59.7]Darling take my hand now</span><br><span class="line">[03:59.7]牵着我的手</span><br><span class="line">[04:02.3]Stay close to me</span><br><span class="line">[04:02.3]贴近我的心</span><br><span class="line">[04:03.86]Be my lover</span><br><span class="line">[04:03.86]做我的爱人</span><br><span class="line">[04:05.93]Won&#x27;t you let me go</span><br><span class="line">[04:05.93]不要放开我的手</span><br><span class="line">[04:07.35]Close your eyes now</span><br><span class="line">[04:07.35]现在 闭上你的双眼</span><br><span class="line">[04:08.76]And you will see</span><br><span class="line">[04:08.76]你将会看到</span><br><span class="line">[04:11.34]There&#x27;s a rainbow</span><br><span class="line">[04:11.34]有一道彩虹</span><br><span class="line">[04:13.19]For you and me</span><br><span class="line">[04:13.19]专属你我</span><br></pre></td></tr></table></figure>
</details>
<p>打开 PotPlayer 播放，歌词正确渲染，问题解决。<br />
如果是只有一种语言的歌词修个时间戳长度就好了。</p>
<h3 id="其他">其他</h3>
<p>感谢 <a
href="https://www.luogu.com.cn/user/1389641"><em>Kenba</em></a>
提供“前置知识”部分的歌词。</p>
]]></content>
      <tags>
        <tag>鲜花</tag>
      </tags>
  </entry>
  <entry>
    <title>基础对拍详解</title>
    <url>/2025/07/04/%E5%9F%BA%E7%A1%80%E5%AF%B9%E6%8B%8D%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码看着不太对。" data-whm="这个文章不能被校验。">
  <script id="hbeData" type="hbeData" data-hmacdigest="8a1f10b92044d627399b0457e1e2a3543ca0a0950abaa567e588870448d2f6e4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">这里需要密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Kalthyix 团队周报</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束</title>
    <url>/2025/07/04/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h3 id="前言">前言</h3>
<p>血的教训：模拟赛出了个差分约束板子结果发现不会打。</p>
<p><a href="https://www.luogu.com.cn/problem/P5960"
title="题目链接">题目链接</a> ### 引入 我们有一些形如 <span
class="math display">\[x_c-x_{c^\prime}\le y\]</span>
的方程构成了方程组，要求出一组解。
之后进行神奇的关联，我们来看一个求最短路的代码片段： <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].w)&#123;</span><br><span class="line">	dis[v]=dis[u]+e[i].w;</span><br><span class="line">	<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">		q.<span class="built_in">push</span>(v);</span><br><span class="line">		vis[v]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
我们发现，这里通过松弛操作维护了 <span class="math display">\[dis[v] \le
dis[u]+e[i].w\]</span> 移项，得 <span
class="math display">\[dis[v]-dis[u]\le e[i].w\]</span>
我们发现，这与题目中所给的方程形式完全一致。所以，我们可以将解方程组转化为一个图论问题，使用最短路算法求出方程的一组解，这就是差分约束系统。
###题目解法 通过观察以上两个式子，发现 <span
class="math inline">\(c\)</span> 对应一条边的 <span
class="math inline">\(v\)</span> 节点，<span
class="math inline">\(c^\prime\)</span> 对应边的 <span
class="math inline">\(u\)</span> 节点，只要建立一个权值为 <span
class="math inline">\(y\)</span> 的边就好了。
但我们发现，这样不一定能保证图的连通性，解决办法是建立一个虚拟的 <span
class="math inline">\(0\)</span> 号超级源点，与每个节点建一条权值为
<span class="math inline">\(0\)</span> 的边。
还有方程无解的问题，对应图论中的负环问题。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e3</span><span class="number">+10</span>,M=<span class="number">1e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,head[N],tot,cnt[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dis[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt,w;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	e[tot].w=w;</span><br><span class="line">	head[u]=tot;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">	dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">	vis[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		vis[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].w)&#123;</span><br><span class="line">				dis[v]=dis[u]+e[i].w;</span><br><span class="line">				<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">					vis[v]=<span class="number">1</span>;</span><br><span class="line">					cnt[v]++;</span><br><span class="line">					<span class="keyword">if</span>(cnt[v]==n<span class="number">+1</span>)<span class="comment">//判负环</span></span><br><span class="line">						<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">0</span>);<span class="comment">//虚拟源点</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> c1,c2,y;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;c1,&amp;c2,&amp;y);</span><br><span class="line">		<span class="built_in">add</span>(c2,c1,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">spfa</span>())&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 其他形式
若有 <span class="math inline">\(x_c-x_{c^\prime}\ge
y\)</span>，可以两边同时乘 <span class="math inline">\(-1\)</span>
改变不等号方向，或者跑最长路。 若有 <span
class="math inline">\(x_c-x_{c^\prime}=y\)</span>，可以将其拆分为 <span
class="math display">\[
\begin{cases}
x_c-x_{c^\prime}\le y\\
x_c-x_{c^\prime}\ge y
\end{cases}
\]</span> <a href="https://www.luogu.com.cn/record/204400669"
title="End.">End.</a></p>
]]></content>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串入门</title>
    <url>/2025/07/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="定义">定义</h3>
<h4 id="前缀">前缀</h4>
<p>对于字符串 <span
class="math inline">\(S\)</span>，从串首开始到某个位置 <span
class="math inline">\(i\)</span> 结束的子串，叫做 <span
class="math inline">\(S\)</span> 的一个前缀，除 <span
class="math inline">\(S\)</span> 本身外的所有前缀叫做 <span
class="math inline">\(S\)</span> 的真前缀。 #### 后缀
与前缀类似，从某位置 <span class="math inline">\(i\)</span>
到串尾的一个字串叫做后缀，同样有真后缀。 ### 字典树/Trie
结构为一棵树，从根节点到树上某一结点的一条路径就是一个字符串。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> c-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> c-<span class="string">&#x27;a&#x27;</span><span class="number">+26</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> c-<span class="string">&#x27;0&#x27;</span><span class="number">+52</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line">	<span class="type">int</span> nxt[N][<span class="number">65</span>],tot,cnt[N];</span><br><span class="line">	<span class="type">bool</span> end[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">64</span>;j++)</span><br><span class="line">				nxt[i][j]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">			cnt[i]=<span class="number">0</span>,end[i]=<span class="number">0</span>;</span><br><span class="line">		tot=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> p=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">			<span class="type">int</span> c=<span class="built_in">id</span>(s[i]);</span><br><span class="line">			<span class="keyword">if</span>(!nxt[p][c])</span><br><span class="line">				nxt[p][c]=++tot;</span><br><span class="line">			p=nxt[p][c];</span><br><span class="line">			cnt[p]++;</span><br><span class="line">		&#125;</span><br><span class="line">		end[p]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> p=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">			<span class="type">int</span> c=<span class="built_in">id</span>(s[i]);</span><br><span class="line">			<span class="keyword">if</span>(!nxt[p][c])</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			p=nxt[p][c];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cnt[p];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> #### 应用 字符串查找，前缀统计等。
一些关于后缀的操作可以反转字符串变为前缀操作。 ### KMP 算法 进行 KMP
算法的过程其实就是在求一个叫做<strong>最长公共前后缀</strong>的东西。
定义一个字符串 <span class="math inline">\(S\)</span> 的 border 为 <span
class="math inline">\(S\)</span> 的一个非 <span
class="math inline">\(S\)</span> 本身的子串 <span
class="math inline">\(T\)</span>，满足 <span
class="math inline">\(T\)</span> 既是 <span
class="math inline">\(S\)</span> 的前缀，又是 <span
class="math inline">\(S\)</span> 的后缀。求解最大 border。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">nxt[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//nxt[i]表示字串S[1...i]的最大border的长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=len;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(j&amp;&amp;s[j<span class="number">+1</span>]!=s[i])</span><br><span class="line">		j=nxt[j];</span><br><span class="line">	<span class="keyword">if</span>(s[j<span class="number">+1</span>]==s[i])</span><br><span class="line">		j++;</span><br><span class="line">	nxt[i]=j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
#### 应用 查找 <span class="math inline">\(S_2\)</span> 串在 <span
class="math inline">\(S_1\)</span> 串的位置。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=len2;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(j&amp;&amp;s2[j<span class="number">+1</span>]!=s2[i])</span><br><span class="line">		j=nxt[j];</span><br><span class="line">	<span class="keyword">if</span>(s2[j<span class="number">+1</span>]==s2[i])</span><br><span class="line">		j++;</span><br><span class="line">	nxt[i]=j;</span><br><span class="line">&#125;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len1;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(j&amp;&amp;s2[j<span class="number">+1</span>]!=s1[i])</span><br><span class="line">		j=nxt[j];</span><br><span class="line">	<span class="keyword">if</span>(s2[j<span class="number">+1</span>]==s1[i])</span><br><span class="line">		j++;</span><br><span class="line">	<span class="keyword">if</span>(j==len2)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i-j<span class="number">+1</span>);</span><br><span class="line">		j=nxt[j];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
另一种方法是，构建一个新字符串 <span
class="math inline">\(S=S_2+a+S_1\)</span>，进行一次 KMP，若某点 <span
class="math inline">\(nxt\)</span> 值等于 <span
class="math inline">\(S_2\)</span> 的长度则找到了一个解。<span
class="math inline">\(a\)</span> 为字符集以外的任意字符，如
<code>#</code>。</p>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>暑假集训题目合集-2</title>
    <url>/2025/07/13/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86-2/</url>
    <content><![CDATA[<h1 id="day7">Day7</h1>
<h2 id="扫描线">扫描线</h2>
一般使用线段树维护，具体地，维护区间和及区间非零个数。 ### <a
href="https://www.luogu.com.cn/problem/P9478">[NOI2023] 方格染色</a>
横竖线就是扫描线板题。斜线最多只有 <span
class="math inline">\(5\)</span>
个，暴力将能够合并的斜线合并，然后遍历所有横竖线判断是否有交。懒得写离散化了，直接动态开点线段树也能过。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> tot,n,m,q,C,cnt,type3cnt,cnt1,cnt2;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">114</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">    <span class="type">int</span> t,x1,y1,x2,y2;</span><br><span class="line">&#125;a[N],b[<span class="number">114</span>],c[<span class="number">114</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">change</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y1,y2,k;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> change &amp;temp)<span class="type">const</span>&#123;<span class="keyword">return</span> x&lt;temp.x;&#125;</span><br><span class="line">&#125;p[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    Node *ls,*rs;</span><br><span class="line">    <span class="type">int</span> val,tag;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line">Node *root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node *<span class="title">new_node</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> &amp;tree[++tot];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_up</span><span class="params">(Node *u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;tag) u-&gt;val=r-l<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l==r) u-&gt;val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        u-&gt;val=<span class="number">0</span>;</span><br><span class="line">        u-&gt;val+=u-&gt;ls?u-&gt;ls-&gt;val:<span class="number">0</span>;</span><br><span class="line">        u-&gt;val+=u-&gt;rs?u-&gt;rs-&gt;val:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(Node*&amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==<span class="literal">nullptr</span>) u=<span class="built_in">new_node</span>();</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        u-&gt;tag+=k;</span><br><span class="line">        <span class="built_in">push_up</span>(u,l,r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(u-&gt;ls,l,mid,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) <span class="built_in">modify</span>(u-&gt;rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">    <span class="built_in">push_up</span>(u,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(C,n,m,q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,t,x1,y1,x2,y2;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(t,x1,y1,x2,y2);</span><br><span class="line">        <span class="keyword">if</span>(t!=<span class="number">3</span>)&#123;</span><br><span class="line">            p[++cnt]=&#123;x1<span class="number">-1</span>,y1,y2,<span class="number">1</span>&#125;;</span><br><span class="line">            p[++cnt]=&#123;x2,y1,y2,<span class="number">-1</span>&#125;;</span><br><span class="line">            a[++cnt1]=&#123;t,x1,y1,x2,y2&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> b[++type3cnt]=&#123;<span class="number">3</span>,x1,y1,x2,y2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(p<span class="number">+1</span>,p<span class="number">+1</span>+cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        <span class="built_in">modify</span>(root,<span class="number">1</span>,<span class="number">1e9</span>,p[i].y1,p[i].y2,p[i].k);</span><br><span class="line">        ans+=root-&gt;val*(p[i<span class="number">+1</span>].x-p[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=type3cnt;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=type3cnt;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j||vis[j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(b[j].x2-b[i].x1==b[j].y2-b[i].y1&amp;&amp;b[j].x1&lt;=b[i].x2&amp;&amp;b[j].x2&gt;=b[i].x2)&#123;</span><br><span class="line">                    b[i].x1=<span class="built_in">min</span>(b[i].x1,b[j].x1);</span><br><span class="line">                    b[i].y1=<span class="built_in">min</span>(b[i].y1,b[j].y1);</span><br><span class="line">                    b[i].x2=<span class="built_in">max</span>(b[i].x2,b[j].x2);</span><br><span class="line">                    b[i].y2=<span class="built_in">max</span>(b[i].y2,b[j].y2);</span><br><span class="line">                    vis[j]=<span class="number">1</span>;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=type3cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        c[++cnt2]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt2;i++)&#123;</span><br><span class="line">        set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt1;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j].t==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> tx=c[i].x1+a[j].y1-c[i].y1;</span><br><span class="line">                <span class="keyword">if</span>(tx&lt;c[i].x1||tx&gt;c[i].x2||tx&lt;<span class="number">1</span>||tx&gt;n) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(tx&lt;a[j].x1||tx&gt;a[j].x2) <span class="keyword">continue</span>;</span><br><span class="line">                pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; temp=&#123;tx,a[j].y1&#125;;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">find</span>(temp)==st.<span class="built_in">end</span>())</span><br><span class="line">                    --ans,st.<span class="built_in">insert</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[j].t==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="type">int</span> ty=c[i].y1+a[j].x1-c[i].x1;</span><br><span class="line">                <span class="keyword">if</span>(ty&lt;c[i].y1||ty&gt;c[i].y2||ty&lt;<span class="number">1</span>||ty&gt;m) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(ty&lt;a[j].y1||ty&gt;a[j].y2) <span class="keyword">continue</span>;</span><br><span class="line">                pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; temp=&#123;a[j].x1,ty&#125;;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">find</span>(temp)==st.<span class="built_in">end</span>())</span><br><span class="line">                    --ans,st.<span class="built_in">insert</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=c[i].x2-c[i].x1<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="day8">Day8</h1>
<h2 id="树上技巧">树上技巧</h2>
<p>树的直径的求法：<br />
- 两遍 dfs/bfs（无法处理负边权） - 树形 DP（可以处理负边权）</p>
这两种方法的时间复杂度均为 <span
class="math inline">\(O(n)\)</span>。<br />
树形 DP 具体求法：<br />
设 <span class="math inline">\(dp_{u,0/1}\)</span> 表示以 <span
class="math inline">\(u\)</span>
为根的子树中从根向下能延伸的最长/非严格次长路径。则答案为 <span
class="math inline">\(dp_{u,0}+dp_{u,1}\)</span> 的最大值。 ### <a
href="https://www.luogu.com.cn/problem/P3629">[APIO2010] 巡逻</a>
老题了。考虑贪心，<span class="math inline">\(k=1\)</span>
时连接直径两端是显然的。设直径为 <span
class="math inline">\((u_1,v_1)\)</span>，加入的第二条边为 <span
class="math inline">\((u_2,v_2)\)</span>，二者不交时答案显然为 <span
class="math inline">\(dis(u_1,v_1)+dis(u_2,v_2)\)</span>，若两路径有交，形如<br />
<img
src="https://github.com/headless-piston/blog_images/blob/main/P3629.png?raw=true" />
则答案为 <span
class="math inline">\(dis(u_1,v_2)+dis(u_2,v_1)\)</span>。由此可以看出，若仍要选在直径上的边，代价会更大。则我们将直径的边权全部设为
<span class="math inline">\(-1\)</span>，再找一个新的直径。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,k,ans,dis[N],a,b,pre[N],head[N],dp[N][<span class="number">2</span>],maxn;</span><br><span class="line"><span class="type">bool</span> vis[N],tag[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">bool</span> flag,<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v]=dis[u]<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag) pre[v]=u;</span><br><span class="line">        <span class="keyword">if</span>(dis[v]&gt;dis[x]) x=v;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,flag,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,u);</span><br><span class="line">        <span class="type">int</span> w=tag[u]&amp;&amp;tag[v]?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> temp=dp[v][<span class="number">0</span>]+w;</span><br><span class="line">        <span class="keyword">if</span>(temp&gt;dp[u][<span class="number">0</span>])</span><br><span class="line">            dp[u][<span class="number">1</span>]=dp[u][<span class="number">0</span>],dp[u][<span class="number">0</span>]=temp;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp&gt;dp[u][<span class="number">1</span>])</span><br><span class="line">            dp[u][<span class="number">1</span>]=temp;</span><br><span class="line">        maxn=<span class="built_in">max</span>(maxn,dp[u][<span class="number">0</span>]+dp[u][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a,b;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a,b);</span><br><span class="line">        e[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        e[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>,a);</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">dfs1</span>(a,<span class="number">1</span>,b);</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">        ans=(n<span class="number">-1</span>)*<span class="number">2</span>-dis[b]<span class="number">+1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=b;i;i=pre[i]) tag[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    ans=n*<span class="number">2</span>-dis[b]-maxn;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="noi2021-轻重边"><a
href="https://www.luogu.com.cn/problem/P7735">[NOI2021] 轻重边</a></h3>
结论：每次修改操作染不同颜色，重边数等于区间内相邻两点颜色相同的点对数。树剖+线段树维护即可。精细处理树剖的查询部分。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> t,n,m,siz[N],son[N],dep[N],fa[N],dfn[N],dfncnt,top[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    fa[u]=f;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    son[u]=<span class="number">0</span>;</span><br><span class="line">    dep[u]=dep[f]<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])</span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">    dfn[u]=++dfncnt;</span><br><span class="line">    top[u]=topf;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> lc,rc,cnt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;a,<span class="type">const</span> node &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.lc==<span class="number">-1</span>) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(b.lc==<span class="number">-1</span>) <span class="keyword">return</span> a;</span><br><span class="line">        node res;</span><br><span class="line">        res.lc=a.lc,res.rc=b.rc;</span><br><span class="line">        res.cnt=a.cnt+b.cnt;</span><br><span class="line">        <span class="keyword">if</span>(a.rc==b.lc&amp;&amp;a.rc) ++res.cnt;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> tag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> P,DEP;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> siz)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tag[u]) <span class="keyword">return</span>;</span><br><span class="line">    tree[<span class="built_in">ls</span>(u)]=tree[<span class="built_in">rs</span>(u)]=&#123;tag[u],tag[u],(siz&gt;&gt;<span class="number">1</span>)<span class="number">-1</span>&#125;;</span><br><span class="line">    tag[<span class="built_in">ls</span>(u)]=tag[<span class="built_in">rs</span>(u)]=tag[u];</span><br><span class="line">    tag[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    l+=P<span class="number">-1</span>,r+=P<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=DEP;i;i--) <span class="built_in">push_down</span>(l&gt;&gt;i,<span class="number">1</span>&lt;&lt;i),<span class="built_in">push_down</span>(r&gt;&gt;i,<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    <span class="type">int</span> siz=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l^<span class="number">1</span>^r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(~l&amp;<span class="number">1</span>) tree[l^<span class="number">1</span>]=&#123;k,k,siz<span class="number">-1</span>&#125;,tag[l^<span class="number">1</span>]=k;</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) tree[r^<span class="number">1</span>]=&#123;k,k,siz<span class="number">-1</span>&#125;,tag[r^<span class="number">1</span>]=k;</span><br><span class="line">        l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>,siz&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        tree[l]=tree[<span class="built_in">ls</span>(l)]+tree[<span class="built_in">rs</span>(l)];</span><br><span class="line">        tree[r]=tree[<span class="built_in">ls</span>(r)]+tree[<span class="built_in">rs</span>(r)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(l&gt;&gt;=<span class="number">1</span>;l;l&gt;&gt;=<span class="number">1</span>) tree[l]=tree[<span class="built_in">ls</span>(l)]+tree[<span class="built_in">rs</span>(l)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    node resl=&#123;<span class="number">-1</span>&#125;,resr=&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    l+=P<span class="number">-1</span>,r+=P<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=DEP;i;i--) <span class="built_in">push_down</span>(l&gt;&gt;i,<span class="number">1</span>&lt;&lt;i),<span class="built_in">push_down</span>(r&gt;&gt;i,<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    <span class="keyword">while</span>(l^<span class="number">1</span>^r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(~l&amp;<span class="number">1</span>) resl=resl+tree[l^<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) resr=tree[r^<span class="number">1</span>]+resr;</span><br><span class="line">        l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resl+resr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modify</span>(dfn[top[x]],dfn[x],k);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify</span>(dfn[x],dfn[y],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>,c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">            <span class="built_in">swap</span>(c1,c2);</span><br><span class="line">        &#125;</span><br><span class="line">        node res=<span class="built_in">query</span>(dfn[top[x]],dfn[x]);</span><br><span class="line">        ans+=res.cnt;</span><br><span class="line">        <span class="keyword">if</span>(res.rc==c1&amp;&amp;c1) ++ans;</span><br><span class="line">        c1=res.lc;</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])&#123;</span><br><span class="line">        <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">swap</span>(c1,c2);</span><br><span class="line">    &#125;</span><br><span class="line">    node res=<span class="built_in">query</span>(dfn[x],dfn[y]);</span><br><span class="line">    ans+=res.cnt;</span><br><span class="line">    <span class="keyword">if</span>(res.rc==c2&amp;&amp;c2) ++ans;</span><br><span class="line">    <span class="keyword">if</span>(res.lc==c1&amp;&amp;c1) ++ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt,op,a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        dfncnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">read</span>(n,m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(u,v);</span><br><span class="line">            e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="built_in">sizeof</span>(node)*(n*<span class="number">4</span><span class="number">+10</span>));</span><br><span class="line">        <span class="built_in">memset</span>(tag,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">int</span>)*(n*<span class="number">4</span><span class="number">+10</span>));</span><br><span class="line">        P=<span class="number">1</span>,DEP=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(P&lt;=n<span class="number">+1</span>) P&lt;&lt;=<span class="number">1</span>,++DEP;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">read</span>(op,a,b);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">1</span>) <span class="built_in">change</span>(a,b,++cnt);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask</span>(a,b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="十二省联考-2019-春节十二响"><a
href="https://www.luogu.com.cn/problem/P5290">[十二省联考 2019]
春节十二响</a></h3>
贪心策略：令两条链上各自权值最大的比较，次大的比较……则可以在每个节点开一个堆，启发式合并。不同于可并堆，节点
<span class="math inline">\(u\)</span>，<span
class="math inline">\(v\)</span> 的堆合并后的大小为 <span
class="math inline">\(\max(size_u,size_v)\)</span> 而非 <span
class="math inline">\(size_u+size_v\)</span>，时间复杂度为 <span
class="math inline">\(O(n\log n)\)</span>。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m[N];</span><br><span class="line">ll ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">    <span class="keyword">if</span>(q[x].<span class="built_in">size</span>()&lt;q[y].<span class="built_in">size</span>()) <span class="built_in">swap</span>(q[x],q[y]);</span><br><span class="line">    <span class="keyword">while</span>(q[y].<span class="built_in">size</span>())&#123;</span><br><span class="line">        temp.<span class="built_in">push_back</span>(<span class="built_in">max</span>(q[x].<span class="built_in">top</span>(),q[y].<span class="built_in">top</span>()));</span><br><span class="line">        q[x].<span class="built_in">pop</span>(),q[y].<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k:temp) q[x].<span class="built_in">push</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        <span class="built_in">merge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    q[u].<span class="built_in">push</span>(m[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(m[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,f;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(f),e[f].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q[<span class="number">1</span>].<span class="built_in">empty</span>()) ans+=q[<span class="number">1</span>].<span class="built_in">top</span>(),q[<span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="day9">Day9</h1>
<h2 id="数论">数论</h2>
<h3 id="taoi-2喵了个喵-ⅳ"><a
href="https://www.luogu.com.cn/problem/P9575">「TAOI-2」喵了个喵
Ⅳ</a></h3>
神秘题。<span class="math inline">\(n\)</span> 为偶数时显然。<span
class="math inline">\(n\)</span> 为奇数时先求出所有数的最大公约数 <span
class="math inline">\(d\)</span>，此时取 <span
class="math inline">\(x=2\)</span>，将所有数都约去 <span
class="math inline">\(d\)</span>，此时若有奇数个奇数，则会有偶数个偶数，必然无解，反之则可以按照奇偶容易地构造一组解。最后答案为
<span class="math inline">\(2d\)</span>。<br />

<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],d,cntodd,cnteven;</span><br><span class="line"><span class="type">bool</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(a[i]);</span><br><span class="line">            d=__gcd(d,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            a[i]/=d;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>) ++cntodd;</span><br><span class="line">            <span class="keyword">else</span> ++cnteven;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cntodd&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,cnt=<span class="number">0</span>;i&lt;=n&amp;&amp;cnt&lt;cntodd/<span class="number">2</span><span class="number">-1</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>) ans[i]=<span class="number">1</span>,++cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,cnt=<span class="number">0</span>;i&lt;=n&amp;&amp;cnt&lt;(cnteven<span class="number">+1</span>)/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(~a[i]&amp;<span class="number">1</span>) ans[i]=<span class="number">1</span>,++cnt;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">2</span>*d);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="ctsc2017-吉夫特"><a
href="https://www.luogu.com.cn/problem/P3773">[CTSC2017] 吉夫特</a></h3>
这题的转化真是神了。发现题目中 <span class="math inline">\(\bmod
2\)</span> 很特殊，<span class="math inline">\(\dbinom{a_{b_1}}{a_{b_2}}
\times \dbinom{a_{b_2}}{a_{b_3}} \times \cdots \times
\dbinom{a_{b_{k-1}}}{a_{b_k}} \bmod 2 &gt;0\)</span>
成立当且仅当对于任意 <span class="math inline">\(k&gt;1\)</span>，<span
class="math inline">\(\dbinom{a_{b_{k-1}}}{a_{b_k}}\bmod
2=1\)</span>，我们尝试使用 Lucas 定理展开<br />
<span class="math display">\[\binom{a_{b_{k-1}}}{a_{b_k}}\equiv
\binom{\lfloor a_{b_{k-1}}/2\rfloor}{\lfloor
a_{b_k}/2\rfloor}\binom{a_{b_{k-1}}\bmod 2}{a_{b_k}\bmod 2}\pmod
2\]</span>
持续展开，不难发现其等于两数二进制拆分后每一位的组合数相乘，又因为<br />
<span
class="math display">\[\binom{1}{1}=\binom{1}{0}=\binom{0}{0}=1\]</span>
<span class="math display">\[\binom{0}{1}=0\]</span> 所以 <span
class="math inline">\(\dbinom{a_{b_{k-1}}}{a_{b_k}}\bmod 2=1\)</span>
当且仅当 <span class="math inline">\(a_{b_k}\)</span> 在二进制下是 <span
class="math inline">\(a_{b_{k-1}}\)</span> 的子集，即 <span
class="math inline">\(a_{b_{k-1}} \operatorname{bitand}
a_{b_k}=a_{b_k}\)</span>。则我们可以推出 DP 方程，设 <span
class="math inline">\(dp_{i}\)</span> 表示以 <span
class="math inline">\(i\)</span> 为结尾的子序列方案数：<br />
<span class="math display">\[dp_{a_i}=\sum_{a_i\in a_j\land
j&lt;i}(dp_{a_j}+1)\]</span> <span
class="math inline">\(O(3^{\log{\max(a_i)}})\)</span>
子集枚举即可。<br />

<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">1000000007</span>,N=<span class="number">233350</span>;</span><br><span class="line"><span class="type">int</span> n,a,dp[N],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> s=(a<span class="number">-1</span>)&amp;a;s;s=(s<span class="number">-1</span>)&amp;a)</span><br><span class="line">            dp[s]=(dp[s]+dp[a]<span class="number">+1</span>)%mod;</span><br><span class="line">        ans=(ans+dp[a])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="day10">Day10</h1>
<h2 id="线性代数">线性代数</h2>
<h3 id="usaco07nov-cow-relays-g"><a
href="https://www.luogu.com.cn/problem/P2886">[USACO07NOV] Cow Relays
G</a></h3>
我们使用 <span class="math inline">\(\min\)</span> 和 <span
class="math inline">\(+\)</span> 代替原矩阵乘法中的 <span
class="math inline">\(+\)</span> 和 <span
class="math inline">\(\times\)</span>，也就是<br />
<span class="math display">\[C_{i,j}=\min(A_{i,k}+B_{k,j})\]</span> 设
<span class="math inline">\(A_{i,j}\)</span> 表示 <span
class="math inline">\(i\)</span> 到 <span
class="math inline">\(j\)</span> 的最短路，则走 <span
class="math inline">\(n\)</span> 步后的最短路即为 <span
class="math inline">\(A_{i,j}^n\)</span>。<br />
设离散化后点有 <span class="math inline">\(m\)</span> 个，时间复杂度
<span class="math inline">\(O(m^3\log n)\)</span>。<br />

<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1010</span>,M=<span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> n,t,s,e,a[N],cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> u,v,w;&#125;edge[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">    <span class="type">int</span> x[M][M];</span><br><span class="line">    <span class="built_in">Matrix</span>()&#123;<span class="built_in">memset</span>(x,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(x));&#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix &amp;a)<span class="type">const</span>&#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=cnt;k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">                    res.x[i][j]=<span class="built_in">min</span>(res.x[i][j],x[i][k]+a.x[k][j]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;b;</span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    Matrix res=a;</span><br><span class="line">    --b;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,t,s,e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(w,u,v);</span><br><span class="line">        <span class="keyword">if</span>(!a[u]) a[u]=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(!a[v]) a[v]=++cnt;</span><br><span class="line">        b.x[a[u]][a[v]]=b.x[a[v]][a[u]]=w;</span><br><span class="line">    &#125;</span><br><span class="line">    b=<span class="built_in">qpow</span>(b,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b.x[a[s]][a[e]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="模板矩阵求逆"><a
href="https://www.luogu.com.cn/problem/P4783">【模板】矩阵求逆</a></h3>
本题中的矩阵均为方阵。<br />
矩阵的逆：在模 <span class="math inline">\(p\)</span> 意义下，若 <span
class="math inline">\(B\times A=A\times B=I\)</span>，则 <span
class="math inline">\(B\)</span> 称为模 <span
class="math inline">\(p\)</span> 意义下 <span
class="math inline">\(A\)</span> 的逆矩阵，记作 <span
class="math inline">\(A^{-1}\)</span>。模 <span
class="math inline">\(p\)</span>
意义下,一个矩阵若有逆矩阵，则必然只有一个逆矩阵。<br />
矩阵的逆可以用高斯-约旦消元求出。原理：使用初等行变换将矩阵 <span
class="math inline">\(A\)</span> 转化为单位矩阵 <span
class="math inline">\(I\)</span>，同时对一个初始的单位矩阵 <span
class="math inline">\(I\)</span>
进行相同的初等行变换，最终得到的就是逆矩阵 <span
class="math inline">\(A^{-1}\)</span>。<br />
例如，我们构造原矩阵 <span class="math inline">\([A\mid
I]\)</span>，进行一系列初等行变换后，得到 <span
class="math inline">\([I\mid
A^{-1}]\)</span>。我们发现，高斯-约旦消元的过程就是将矩阵的左半部分变为单位矩阵的过程，非常适合求解矩阵的逆。<br />
无解判断：若消元过程中，主元与 <span class="math inline">\(p\)</span>
不互质则无解。<br />

<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">1e9</span><span class="number">+7</span>,N=<span class="number">410</span>;</span><br><span class="line"><span class="type">int</span> n,a[N][N*<span class="number">2</span>];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">read</span>(a[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i][i+n]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,cur,line=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cur=line;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=line<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[j][i]&gt;a[cur][i])</span><br><span class="line">                cur=j;</span><br><span class="line">        <span class="keyword">if</span>(__gcd(a[cur][i],mod)!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll inv=<span class="built_in">qpow</span>(a[cur][i],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=(n&lt;&lt;<span class="number">1</span>);j++)</span><br><span class="line">            <span class="built_in">swap</span>(a[cur][j],a[line][j]),a[line][j]=a[line][j]*inv%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(j!=line)&#123;</span><br><span class="line">                ll temp=a[j][i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=(n&lt;&lt;<span class="number">1</span>);k++)</span><br><span class="line">                    a[j][k]=((a[j][k]-a[line][k]*temp)%mod+mod)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        ++line;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j+n]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>海盗分金问题</title>
    <url>/2025/06/25/%E6%B5%B7%E7%9B%97%E5%88%86%E9%87%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>很抽象的问题，记录一下思路免得自己忘掉。 ### 题意简述 现有 <span
class="math inline">\(5\)</span> 个海盗，编号 <span
class="math inline">\(1\sim
5\)</span>，每个海盗都绝顶聪明且理性。他们要分配 <span
class="math inline">\(100\)</span> 个金币。规则如下：</p>
<ul>
<li><p>按照 <span class="math inline">\(1\sim 5\)</span>
的方式给出分配方案；</p></li>
<li><p>所有人都对分配方案进行投票；</p></li>
<li><p>若赞成人数过半，则按此方案分配，反之，提出方案者被丢到海里喂鲨鱼，由下一个人给出方案；</p></li>
<li><p>在金币数量相同的情况下，海盗会更倾向于让尽可能多的人喂鲨鱼，即更倾向于投反对票。</p></li>
</ul>
<p>问：<span class="math inline">\(1\)</span> 号海盗最多分得多少金币？
### 推导过程 考虑倒推。 若 <span class="math inline">\(1\sim 3\)</span>
均已喂了鲨鱼，现在场上剩 <span class="math inline">\(4\)</span> 和 <span
class="math inline">\(5\)</span>，<span class="math inline">\(5\)</span>
号一定投反对票让 <span class="math inline">\(4\)</span>
号喂鲨鱼，独吞金币。所以，在场上有 <span class="math inline">\(3\sim
5\)</span> 时，<span class="math inline">\(4\)</span>
号为了保命一定投赞成票。 由于 <span class="math inline">\(4\)</span>
号一定投赞成，<span class="math inline">\(3\)</span> 号可以给出方案
<span class="math inline">\((100,0,0)\)</span>，得到全部金币。 <span
class="math inline">\(2\)</span> 号可以依据 <span
class="math inline">\(3\)</span> 号的方案，给出 <span
class="math inline">\((98,0,1,1)\)</span>。由于 <span
class="math inline">\(4,5\)</span> 赞成 <span
class="math inline">\(2\)</span> 号能获得比 <span
class="math inline">\(3\)</span> 号更大的利益，所以一定赞成 <span
class="math inline">\(2\)</span> 号。 <span
class="math inline">\(1\)</span> 号拿出更大的诚意，给出 <span
class="math inline">\((97,0,1,2,0)\)</span> 或 <span
class="math inline">\((97,0,1,0,2)\)</span>，对于 <span
class="math inline">\(3\)</span> 号和 <span
class="math inline">\(4/5\)</span> 号来说，这比 <span
class="math inline">\(2\)</span> 号更优。</p>
]]></content>
  </entry>
  <entry>
    <title>暑假集训题目合集-1</title>
    <url>/2025/07/11/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86-1/</url>
    <content><![CDATA[Day <span class="math inline">\(n\)</span> 指第 <span
class="math inline">\(n\)</span> 个讲课日，模拟赛过屎，不放了。 # Day1
## 单调队列优化 DP 一般形如 <span
class="math inline">\(dp_i=\max_{j\in[l_i,r_i]}(f(j))+g(j)\)</span>
的形式可以进行单调队列优化，其中 <span
class="math inline">\(f(i)\)</span> 是一个关于 <span
class="math inline">\(j\)</span> 的函数，<span
class="math inline">\([l_i,r_i]\)</span> 是滑动窗口。 ### <a
href="https://www.luogu.com.cn/problem/P1776">宝物筛选</a>
多重背包优化。<span class="math inline">\(O(nW\log m)\)</span>
的二进制拆分优化就不讲了。<br />
考虑朴素的 <span class="math inline">\(O(nWm)\)</span> 转移： <span
class="math display">\[dp_{j}=\max_{k=0}^{m_i}(dp_{j-k\times
w_i}+k\times v_i)\]</span><br />
尝试改写成适合单调队列优化的形式，按余数分组：<br />
设当前 <span class="math inline">\(r=j\bmod w_i\)</span>，<span
class="math inline">\(t=\lfloor
j/w_i\rfloor\)</span>，状态转移方程改写为： <span
class="math display">\[dp_j=\max_{k=0}^{\min(m_i,t)}(dp_{r+(t-k)\cdot
w_i}+k\cdot v_i)\]</span> 令 <span
class="math inline">\(t&#39;=t-k\)</span>，则 <span
class="math inline">\(k=t-t&#39;\)</span>： <span
class="math display">\[\begin{aligned}
dp_j&amp;=\max(dp_{r+t&#39;\cdot w_i}+(t-t&#39;)\cdot v_i)\\
&amp;=\max(dp_{r+t&#39;\cdot w_i}+t&#39;\cdot v_i)+t\cdot v_i
\end{aligned}\]</span> <span
class="math inline">\(t&#39;\in[\max(0,t-m_i),t]\)</span>，构成一个滑动窗口。<br />
时间复杂度 <span class="math inline">\(O(nW)\)</span>。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">4e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="type">int</span> val,t;</span><br><span class="line">    <span class="built_in">Queue</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Queue</span>(<span class="type">int</span> val,<span class="type">int</span> t):<span class="built_in">val</span>(val),<span class="built_in">t</span>(t)&#123;&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="type">int</span> n,W,v,w,m,dp[N],l,r,tag,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,W);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(v,w,m);</span><br><span class="line">        <span class="keyword">if</span>(w==<span class="number">0</span>)&#123;</span><br><span class="line">            tag+=v*m;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">0</span>;d&lt;w;d++)&#123;</span><br><span class="line">            l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;d+t*w&lt;=W;t++)&#123;</span><br><span class="line">                <span class="type">int</span> j=t*w+d,val=dp[j]-t*v;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&lt;=val) --r;</span><br><span class="line">                q[++r]=<span class="built_in">Queue</span>(val,t);</span><br><span class="line">                <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l].t&lt;t-m) ++l;</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(q[l].val+t*v,dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=W;i++) ans=<span class="built_in">max</span>(ans,dp[i]+tag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="noi2005-瑰丽华尔兹"><a
href="https://www.luogu.com.cn/problem/P2254">[NOI2005]
瑰丽华尔兹</a></h3>
单调队列优化 DP。<br />
容易想到 <span class="math inline">\(O(nmT)\)</span> 的方程：设 <span
class="math inline">\(dp_{t,i,j}\)</span> 表示在 <span
class="math inline">\((i,j)\)</span> 位置经过 <span
class="math inline">\(t\)</span> 时间的答案，容易写出转移： <span
class="math display">\[dp_{t,i,j}=\max(dp_{t-1,i,j},dp_{t-1,i&#39;,j&#39;}+1)\]</span>
考虑优化成 <span
class="math inline">\(O(nmk)\)</span>，则我们首先将状态优化为 <span
class="math inline">\(dp_{k,i,j}\)</span> 表示第 <span
class="math inline">\(k\)</span> 个区间，在 <span
class="math inline">\((i,j)\)</span> 位置的答案。转移变为 <span
class="math display">\[dp_{k,i,j}=\max(dp_{k-1,i&#39;,j&#39;}+dis)\]</span>
具体地，假设当前在向 <span class="math inline">\(i\)</span>
的正方向滑行，我们可以写出： <span
class="math display">\[dp_{k,i,j}=\max_{pos=i-len_k}^i(dp_{k-1,pos,j}-pos)+i\]</span>
其余三个方向同理，这就可以单调队列优化了。<br />
可以滚动数组去掉 <span class="math inline">\(k\)</span> 这一维。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Abs</span><span class="params">(<span class="type">const</span> T &amp;x)</span></span>&#123;<span class="keyword">return</span> x&lt;<span class="number">0</span>?~x<span class="number">+1</span>:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;<span class="keyword">return</span> a&lt;b?b:a;&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">210</span>,fx[]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,fy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="type">int</span> val,x,y;</span><br><span class="line">    <span class="built_in">Queue</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Queue</span>(<span class="type">int</span> val,<span class="type">int</span> x,<span class="type">int</span> y):<span class="built_in">val</span>(val),<span class="built_in">x</span>(x),<span class="built_in">y</span>(y)&#123;&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;ax,<span class="type">const</span> <span class="type">int</span> &amp;ay,<span class="type">const</span> <span class="type">int</span> &amp;bx,<span class="type">const</span> <span class="type">int</span> &amp;by)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Abs</span>(ax-bx)+<span class="built_in">Abs</span>(ay-by);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,sx,sy,k,dp[N][N],op,l,r,ans;</span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;=<span class="number">1</span>&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&lt;=m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[x][y]==<span class="string">&#x27;x&#x27;</span>)&#123;</span><br><span class="line">            l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">            x+=fx[op],y+=fy[op];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r&amp;&amp;dp[x][y]&gt;q[r].val+<span class="built_in">dis</span>(x,y,q[r].x,q[r].y)) --r;</span><br><span class="line">        q[++r]=<span class="built_in">Queue</span>(dp[x][y],x,y);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r&amp;&amp;(<span class="built_in">Abs</span>(x-q[l].x)&gt;len||<span class="built_in">Abs</span>(y-q[l].y)&gt;len)) ++l;</span><br><span class="line">        dp[x][y]=<span class="built_in">Max</span>(dp[x][y],q[l].val+<span class="built_in">dis</span>(x,y,q[l].x,q[l].y));</span><br><span class="line">        ans=<span class="built_in">Max</span>(ans,dp[x][y]);</span><br><span class="line">        x+=fx[op],y+=fy[op];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,sx,sy,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;s[i][j]);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[sx][sy]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,s,t;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(s,t,op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) <span class="built_in">dfs</span>(n,j,t-s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) <span class="built_in">dfs</span>(<span class="number">1</span>,j,t-s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">dfs</span>(j,m,t-s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">dfs</span>(j,<span class="number">1</span>,t-s<span class="number">+1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<p>闲话：《海上钢琴师》真的非常好看！ ### <a
href="https://www.luogu.com.cn/problem/P2569">[SCOI2010] 股票交易</a> 设
<span class="math inline">\(dp_{i,j}\)</span> 表示 <span
class="math inline">\(i\)</span> 天结束时手上有 <span
class="math inline">\(j\)</span> 个股票时的最大收益。转移： -
什么也不做： <span class="math display">\[dp_{i,j}=dp_{i-1,j}\]</span> -
买入： <span class="math display">\[dp_{i,j}=\max(dp_{i-W-1,j-k}-k\times
AP_i)\]</span> - 卖出： <span
class="math display">\[dp_{i,j}=\max(dp_{i-W-1,j+k}+k\times
BP_i)\]</span></p>
第一个式子没有研究价值，我们看后两个。将式子转化，用 <span
class="math inline">\(k&#39;\)</span> 分别代替 <span
class="math inline">\(j-k\)</span> 和 <span
class="math inline">\(j+k\)</span>： <span
class="math display">\[dp_{i,j}=\max(dp_{i-W-1,k&#39;}+k&#39;\times
AP_i)-j\times AP_i\quad j-k&#39;\le AS_i\]</span> <span
class="math display">\[dp_{i,j}=\max(dp_{i-W-1,k&#39;}+k&#39;\times
BP_i)-j\times BP_i\quad k&#39;-j\le BS_i\]</span> 显然可以单调队列。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2010</span>;</span><br><span class="line"><span class="type">int</span> t,maxp,w,l,r,ap[N],dp[N][N],bp[N],as[N],bs[N],ans; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ll k;</span><br><span class="line">    <span class="built_in">Queue</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Queue</span>(<span class="type">int</span> val,<span class="type">int</span> k):<span class="built_in">val</span>(val),<span class="built_in">k</span>(k)&#123;&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(t,maxp,w);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++) <span class="built_in">read</span>(ap[i],bp[i],as[i],bs[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=as[i];j++) dp[i][j]=-ap[i]*j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=maxp;j++)</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i<span class="number">-1</span>][j]);</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> pre=i-w<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pre&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=maxp;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&lt;=dp[pre][j]+j*ap[i]) --r;</span><br><span class="line">            q[++r]=<span class="built_in">Queue</span>(dp[pre][j]+j*ap[i],j);</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;j-q[l].k&gt;as[i]) ++l;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i][j],q[l].val-j*ap[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=maxp;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&lt;=dp[pre][j]+j*bp[i]) --r;</span><br><span class="line">            q[++r]=<span class="built_in">Queue</span>(dp[pre][j]+j*bp[i],j);</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l].k-j&gt;bs[i]) ++l;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i][j],q[l].val-j*bp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=maxp;i++) ans=<span class="built_in">max</span>(ans,dp[t][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="玉蟾宫"><a
href="https://www.luogu.com.cn/problem/P4147">玉蟾宫</a></h3>
插一个单调栈典题。<br />
我们考虑枚举行数，对于一行内，维护每一列向上延伸最多的 <code>F</code>
数量（类似直方图）。例如，对于样例<br />
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">R F F F F F </span><br><span class="line">F F F F F F </span><br><span class="line">R R R F F F </span><br><span class="line">F F F F F F </span><br><span class="line">F F F F F F</span><br></pre></td></tr></table></figure> 假设我们枚举到最后一行，那么应该向上延伸最多的
<code>F</code> 数量应当是： <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      F F F</span><br><span class="line">      F F F</span><br><span class="line">      F F F</span><br><span class="line">F F F F F F</span><br><span class="line">F F F F F F</span><br><span class="line">2 2 2 5 5 5</span><br></pre></td></tr></table></figure> 此时枚举列，同时对向上延伸最多
<code>F</code> 数量维护单调栈。<br />
时间复杂度 <span class="math inline">\(O(nm)\)</span>。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stack</span>&#123;</span><br><span class="line">    <span class="type">int</span> h,len;</span><br><span class="line">    <span class="built_in">Stack</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Stack</span>(<span class="type">int</span> h,<span class="type">int</span> len):<span class="built_in">h</span>(h),<span class="built_in">len</span>(len)&#123;&#125;</span><br><span class="line">&#125;st[N];</span><br><span class="line"><span class="type">int</span> n,m,top,h[N][N],ans;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;c;</span><br><span class="line">            h[i][j]=(c==<span class="string">&#x27;F&#x27;</span>)?h[i<span class="number">-1</span>][j]<span class="number">+1</span>:<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(top&amp;&amp;st[top].h&gt;h[i][j])&#123;</span><br><span class="line">                temp+=st[top].len;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,st[top].h*temp);</span><br><span class="line">                --top;</span><br><span class="line">            &#125;</span><br><span class="line">            st[++top]=<span class="built_in">Stack</span>(h[i][j],temp<span class="number">+1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(top)&#123;</span><br><span class="line">            temp+=st[top].len;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,st[top].h*temp);</span><br><span class="line">            --top;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans*<span class="number">3</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="并查集">并查集</h2>
<h3 id="apio2008-免费道路"><a
href="https://www.luogu.com.cn/problem/P3623">[APIO2008]
免费道路</a></h3>
题意：一个边权为 <span class="math inline">\(0\)</span> 或 <span
class="math inline">\(1\)</span> 的图，求边权和为 <span
class="math inline">\(n-k\)</span> 的生成树。 首先 Kruskal
求最大生成树，求得必须要加入的 <span class="math inline">\(0\)</span>
边。 再 Kruskal 一遍，先将 <span class="math inline">\(0\)</span> 边加至
<span class="math inline">\(k\)</span> 条，然后一直加 <span
class="math inline">\(1\)</span> 边直到求出生成树。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e4</span><span class="number">+10</span>,M=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,fa[N],tot,cnt,ans[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;<span class="type">int</span> u,v,w;&#125;e[M];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">l</span><span class="params">(<span class="type">const</span> edge &amp;x,<span class="type">const</span> edge &amp;y)</span></span>&#123;<span class="keyword">return</span> x.w&lt;y.w;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">g</span><span class="params">(<span class="type">const</span> edge &amp;x,<span class="type">const</span> edge &amp;y)</span></span>&#123;<span class="keyword">return</span> x.w&gt;y.w;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">read</span>(e[i].u,e[i].v,e[i].w);</span><br><span class="line">    <span class="built_in">sort</span>(e<span class="number">+1</span>,e<span class="number">+1</span>+m,g);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="built_in">find</span>(e[i].u),v=<span class="built_in">find</span>(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">        fa[u]=v;</span><br><span class="line">        ++tot;</span><br><span class="line">        <span class="keyword">if</span>(e[i].w==<span class="number">0</span>) ++cnt,e[i].w=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tot==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;k)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no solution\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e<span class="number">+1</span>,e<span class="number">+1</span>+m,l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="built_in">find</span>(e[i].u),v=<span class="built_in">find</span>(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(e[i].w==<span class="number">-1</span>)&#123;</span><br><span class="line">            fa[u]=v;</span><br><span class="line">            e[i].w=<span class="number">0</span>;</span><br><span class="line">            ans[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tot&lt;k&amp;&amp;e[i].w==<span class="number">0</span>)&#123;</span><br><span class="line">            fa[u]=v;</span><br><span class="line">            ans[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tot&gt;=k&amp;&amp;e[i].w==<span class="number">1</span>)&#123;</span><br><span class="line">            fa[u]=v;</span><br><span class="line">            ans[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tot==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tot!=n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no solution\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j=ans[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,e[j].u,e[j].v,e[j].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="ahoi2013-连通图"><a
href="https://www.luogu.com.cn/problem/P5227">[AHOI2013] 连通图</a></h3>
线段树分治+可撤销并查集。 在时间轴上开线段树，每个节点维护
<code>std::vector</code>
表示当前区间需要加的边，使用可撤销并查集在回溯时撤销当前节点添加的边。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,fa[N],siz[N],k,last[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">    <span class="built_in">Edge</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> u,<span class="type">int</span> v):<span class="built_in">u</span>(u),<span class="built_in">v</span>(v)&#123;&#125;</span><br><span class="line">&#125;edge[M];</span><br><span class="line">vector&lt;Edge&gt; tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,Edge t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        tree[u].<span class="built_in">push_back</span>(t);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(ls,l,mid,x,y,t);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line">stack&lt;Edge&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x),y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(siz[x]&gt;siz[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    fa[x]=y;</span><br><span class="line">    siz[y]+=siz[x];</span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Edge</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_ans</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=st.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(Edge x:tree[u]) <span class="built_in">merge</span>(x.u,x.v);</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(siz[<span class="built_in">find</span>(<span class="number">1</span>)]==n) <span class="built_in">printf</span>(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Disconnected\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">get_ans</span>(ls,l,mid);</span><br><span class="line">        <span class="built_in">get_ans</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>((<span class="type">int</span>)st.<span class="built_in">size</span>()&gt;temp)&#123;</span><br><span class="line">        Edge x=st.<span class="built_in">top</span>();</span><br><span class="line">        <span class="type">int</span> u=x.u,v=x.v;</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        siz[v]-=siz[u];</span><br><span class="line">        fa[u]=u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,siz[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(edge[i].u,edge[i].v);</span><br><span class="line">    <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,c,x;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(c);</span><br><span class="line">        <span class="keyword">while</span>(c--)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            <span class="keyword">if</span>(last[x]<span class="number">+1</span>&lt;=i<span class="number">-1</span>) <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,k,last[x]<span class="number">+1</span>,i<span class="number">-1</span>,edge[x]);</span><br><span class="line">            last[x]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,k,last[i]<span class="number">+1</span>,k,edge[i]);</span><br><span class="line">    <span class="built_in">get_ans</span>(<span class="number">1</span>,<span class="number">1</span>,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="day2">Day2</h1>
<h2 id="trie">Trie</h2>
<h3 id="jsoi2009-电子字典"><a
href="https://www.luogu.com.cn/problem/P4407">[JSOI2009]
电子字典</a></h3>
<p>Trie 题怎么能用 Trie 做呢？<br />
由于串长极小，直接字符串哈希，实现时需要注意以下几个点： -
使用自然溢出哈希； - 记得去重，去重一定不要用 <code>std::set</code>，会
T 飞。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ull base[<span class="number">25</span>],h[<span class="number">25</span>];</span><br><span class="line">gp_hash_table&lt;ull,<span class="type">int</span>&gt; word;</span><br><span class="line"><span class="type">char</span> s[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">22</span>;i++) base[i]=base[i<span class="number">-1</span>]*<span class="number">131</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s));</span><br><span class="line">        <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s<span class="number">+1</span>);</span><br><span class="line">        h[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">strlen</span>(s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">            h[i]=h[i<span class="number">-1</span>]*<span class="number">131</span>+s[i];</span><br><span class="line">        word[h[len]]=m<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s));</span><br><span class="line">        <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line">        h[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s<span class="number">+1</span>);</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">strlen</span>(s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">            h[i]=h[i<span class="number">-1</span>]*<span class="number">131</span>+s[i];</span><br><span class="line">        <span class="keyword">if</span>(word.<span class="built_in">find</span>(h[len])!=word.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">            ull hash1=h[i<span class="number">-1</span>]*base[len-i]+(h[len]-h[i]*base[len-i]);</span><br><span class="line">            <span class="keyword">auto</span> it=word.<span class="built_in">find</span>(hash1);</span><br><span class="line">            <span class="keyword">if</span>(it!=word.<span class="built_in">end</span>()&amp;&amp;it-&gt;second!=m)</span><br><span class="line">                it-&gt;second=m,++res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> j=<span class="string">&#x27;a&#x27;</span>;j&lt;=<span class="string">&#x27;z&#x27;</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==s[i]) <span class="keyword">continue</span>;</span><br><span class="line">                ull hash1=h[len]-s[i]*base[len-i]+j*base[len-i];</span><br><span class="line">                <span class="keyword">auto</span> it=word.<span class="built_in">find</span>(hash1);</span><br><span class="line">                <span class="keyword">if</span>(it!=word.<span class="built_in">end</span>()&amp;&amp;it-&gt;second!=m)</span><br><span class="line">                    it-&gt;second=m,++res;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> j=<span class="string">&#x27;a&#x27;</span>;j&lt;=<span class="string">&#x27;z&#x27;</span>;j++)&#123;</span><br><span class="line">                ull hash1=h[i]*base[len-i<span class="number">+1</span>]+j*base[len-i]+(h[len]-h[i]*base[len-i]);</span><br><span class="line">                <span class="keyword">auto</span> it=word.<span class="built_in">find</span>(hash1);</span><br><span class="line">                <span class="keyword">if</span>(it!=word.<span class="built_in">end</span>()&amp;&amp;it-&gt;second!=m)</span><br><span class="line">                    it-&gt;second=m,++res;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="usaco12dec-first-g"><a
href="https://www.luogu.com.cn/problem/P3065">[USACO12DEC] First!
G</a></h3>
建 Trie，在 Trie 上查找时对字母连边，拓扑排序判环。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">3e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,nxt[N][<span class="number">26</span>],tot,e[<span class="number">26</span>][<span class="number">26</span>],indegree[<span class="number">26</span>],cnt,ans[N];</span><br><span class="line"><span class="type">bool</span> ed[N];</span><br><span class="line">string s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="type">int</span> k=c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[p][k]) nxt[p][k]=++tot;</span><br><span class="line">        p=nxt[p][k];</span><br><span class="line">    &#125;</span><br><span class="line">    ed[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="built_in">sizeof</span>(e));</span><br><span class="line">    <span class="built_in">memset</span>(indegree,<span class="number">0</span>,<span class="built_in">sizeof</span>(indegree));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[p]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> k=c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(k!=i&amp;&amp;nxt[p][i]&amp;&amp;!e[k][i])&#123;</span><br><span class="line">                e[k][i]=<span class="number">1</span>;</span><br><span class="line">                ++indegree[i];</span><br><span class="line">            &#125;</span><br><span class="line">        p=nxt[p][k];</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(!indegree[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;<span class="number">26</span>;v++)</span><br><span class="line">            <span class="keyword">if</span>(e[u][v]&amp;&amp;!--indegree[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(indegree[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">        <span class="built_in">insert</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(s[i]))</span><br><span class="line">            ans[++cnt]=i;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        cout&lt;&lt;s[ans[i]]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="ioi-2008-type-printer"><a
href="https://www.luogu.com.cn/problem/P4683">[IOI 2008] Type
Printer</a></h3>
显然先建出 Trie，考虑怎样的遍历顺序更优。<br />
发现这不是<a
href="https://www.luogu.com.cn/problem/P3698">老熟人</a>吗？
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">25010</span>;</span><br><span class="line"><span class="type">int</span> n,nxt[N*<span class="number">20</span>][<span class="number">26</span>],tot;</span><br><span class="line"><span class="type">bool</span> ed[N*<span class="number">20</span>],flag[N*<span class="number">20</span>],f;</span><br><span class="line">string maxlen,ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="type">int</span> k=c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[p][k]) nxt[p][k]=++tot;</span><br><span class="line">        p=nxt[p][k];</span><br><span class="line">    &#125;</span><br><span class="line">    ed[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="type">int</span> k=c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        p=nxt[p][k];</span><br><span class="line">        flag[p]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ed[u]) ans.<span class="built_in">push_back</span>(<span class="string">&#x27;P&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> maxk=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> v=nxt[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!v) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag[v]) maxk=i;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(i+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(~maxk)&#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(maxk+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(nxt[u][maxk]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag[u]&amp;&amp;!~maxk)&#123;</span><br><span class="line">        cout&lt;&lt;ans.<span class="built_in">length</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:ans)</span><br><span class="line">            cout&lt;&lt;c&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="built_in">insert</span>(s);</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">length</span>()&gt;maxlen.<span class="built_in">length</span>()) maxlen=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">query</span>(maxlen);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="笛卡尔树">笛卡尔树</h2>
<h3 id="tjoi2011-树的序"><a
href="https://www.luogu.com.cn/problem/P1377">[TJOI2011] 树的序</a></h3>
考虑 BST 每个节点记录权值 <span class="math inline">\(k\)</span>
和插入的时间 <span class="math inline">\(t\)</span>，则 <span
class="math inline">\(k\)</span> 满足 BST 的性质，<span
class="math inline">\(t\)</span> 满足小根堆的性质，这样构建的 BST 是一棵
Treap。<br />
题意转化为：重新分配 <span
class="math inline">\(t\)</span>，使得生成序列最小。<br />
既然 <span class="math inline">\(t\)</span>
维度是小根堆，那么满足父亲小于后代。贪心地想，较小的 <span
class="math inline">\(t\)</span> 分配顺序为：父亲 <span
class="math inline">\(&gt;\)</span> 左子树 <span
class="math inline">\(&gt;\)</span> 右子树，也就是 BST 的前序遍历。
笛卡尔树同样满足 Treap 的性质。它的 <span
class="math inline">\(k\)</span> 与 <span
class="math inline">\(t\)</span> 正好与本题的 BST 相反。则我们只需交换
<span class="math inline">\(k\)</span> 和 <span
class="math inline">\(t\)</span> 并 <span
class="math inline">\(O(n)\)</span> 构建笛卡尔树即可。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],st[N],top,son[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,u);</span><br><span class="line">    <span class="keyword">if</span>(son[u][<span class="number">0</span>]) <span class="built_in">dfs</span>(son[u][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(son[u][<span class="number">1</span>]) <span class="built_in">dfs</span>(son[u][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) <span class="built_in">read</span>(x),a[x]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> last=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;a[st[top]]&gt;a[i]) last=st[top--];</span><br><span class="line">        <span class="keyword">if</span>(top) son[st[top]][<span class="number">1</span>]=i;</span><br><span class="line">        son[i][<span class="number">0</span>]=last;</span><br><span class="line">        st[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        vis[son[i][<span class="number">0</span>]]=vis[son[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="数据结构">数据结构</h2>
<h3 id="最大异或和"><a
href="https://www.luogu.com.cn/problem/P4735">最大异或和</a></h3>
可持久化 01 trie 模板题。<br />
操作与主席树类似，对于查询，设我们已经维护了所有的前缀异或和 <span
class="math inline">\(sum_i=\oplus_{j=1}^ia_j\)</span>，则只需最大化
<span class="math inline">\(sum_{p-1}\oplus sum_n\oplus
x\)</span>。后两项是给定的，则我们只需贪心求出答案即可。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::max;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">6e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,nxt[N*<span class="number">25</span>][<span class="number">2</span>],siz[N*<span class="number">25</span>],tot,root[N],sum;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> old,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    root[u]=++tot;</span><br><span class="line">    <span class="type">int</span> p=root[u],q=root[old];</span><br><span class="line">    siz[p]=siz[q]<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">24</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        nxt[p][<span class="number">0</span>]=nxt[q][<span class="number">0</span>],nxt[p][<span class="number">1</span>]=nxt[q][<span class="number">1</span>];</span><br><span class="line">        nxt[p][c]=++tot;</span><br><span class="line">        p=nxt[p][c],q=nxt[q][c];</span><br><span class="line">        siz[p]=siz[q]<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=root[a],q=root[b],res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">24</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(siz[nxt[q][c^<span class="number">1</span>]]&gt;siz[nxt[p][c^<span class="number">1</span>]])&#123;</span><br><span class="line">            res|=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            p=nxt[p][c^<span class="number">1</span>];</span><br><span class="line">            q=nxt[q][c^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p=nxt[p][c];</span><br><span class="line">            q=nxt[q][c];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a);</span><br><span class="line">        <span class="built_in">insert</span>(i,i<span class="number">-1</span>,sum^=a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> op;</span><br><span class="line">    <span class="type">int</span> x,l,r;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        op=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(op!=<span class="string">&#x27;A&#x27;</span>&amp;&amp;op!=<span class="string">&#x27;Q&#x27;</span>) op=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            ++n;</span><br><span class="line">            <span class="built_in">insert</span>(n,n<span class="number">-1</span>,sum^=x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">read</span>(l,r,x);</span><br><span class="line">            <span class="type">int</span> ans;</span><br><span class="line">            <span class="keyword">if</span>(l==<span class="number">1</span>) ans=<span class="built_in">max</span>(<span class="built_in">query</span>(sum^x,<span class="number">0</span>,r<span class="number">-1</span>),sum^x);</span><br><span class="line">            <span class="keyword">else</span> ans=<span class="built_in">query</span>(sum^x,l<span class="number">-2</span>,r<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="十二省联考-2019-异或粽子"><a
href="https://www.luogu.com.cn/problem/P5283">[十二省联考 2019]
异或粽子</a></h3>
类似<a href="https://www.luogu.com.cn/problem/P2048">[NOI2010]
超级钢琴</a>的贪心，由于 <span class="math inline">\(a_i\oplus
a_j=a_j\oplus a_i\)</span>，只需使用堆查询最大的 <span
class="math inline">\(2k\)</span> 个，再令答案除以 <span
class="math inline">\(2\)</span>。可以用 Trie 查询全局第 <span
class="math inline">\(k\)</span> 大，方法类似线段树上二分。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">5e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,k,nxt[N&lt;&lt;<span class="number">5</span>][<span class="number">2</span>],siz[N&lt;&lt;<span class="number">5</span>],tot=<span class="number">1</span>;</span><br><span class="line">ll a[N],ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    ++siz[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[p][c]) nxt[p][c]=++tot;</span><br><span class="line">        p=nxt[p][c];</span><br><span class="line">        ++siz[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x,<span class="type">int</span> rnk)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(siz[nxt[p][c]]&gt;=rnk) p=nxt[p][c];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            rnk-=siz[nxt[p][c]];</span><br><span class="line">            p=nxt[p][c^<span class="number">1</span>];</span><br><span class="line">            res|=<span class="number">1ll</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> id,rnk;</span><br><span class="line">    ll val;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> id,<span class="type">int</span> rnk,ll val):<span class="built_in">id</span>(id),<span class="built_in">rnk</span>(rnk),<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> val&lt;x.val;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,k);k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        a[i]^=a[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">insert</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">node</span>(i,n<span class="number">+1</span>,<span class="built_in">query</span>(a[i],n<span class="number">+1</span>)));</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        node u=q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans+=u.val;</span><br><span class="line">        <span class="keyword">if</span>(u.rnk) q.<span class="built_in">push</span>(<span class="built_in">node</span>(u.id,u.rnk<span class="number">-1</span>,<span class="built_in">query</span>(a[u.id],u.rnk<span class="number">-1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="day3">Day3</h1>
<h2 id="字符串哈希">字符串哈希</h2>
<h3 id="poi-2006-pal-palindromes"><a
href="https://www.luogu.com.cn/problem/P3449">[POI 2006]
PAL-Palindromes</a></h3>
容易发现，两个回文串 <span class="math inline">\(A\)</span>，<span
class="math inline">\(B\)</span> 组合成新回文串当且仅当 <span
class="math inline">\(AB\)</span> 等于 <span
class="math inline">\(BA\)</span>。设 <span
class="math inline">\(A\)</span> 的哈希值为 <span
class="math inline">\(a\)</span>，<span class="math inline">\(B\)</span>
的哈希值为 <span class="math inline">\(b\)</span>，有 <span
class="math display">\[a\times base^{|B|}+b=b\times
base^{|A|}+a\]</span> 简单移项 <span
class="math display">\[\frac{a}{base^{|A|}-1}=\frac{b}{base^{|B|}-1}\]</span>
开哈希桶维护即可。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod1=<span class="number">998244353</span>,mod2=<span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    a%=p;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pair_hash</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &amp;x)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="type">size_t</span> seed=<span class="number">0</span>;</span><br><span class="line">        seed^=hash&lt;<span class="type">int</span>&gt;&#123;&#125;(x.first)<span class="number">+0x9e3779b9</span>+(seed&lt;&lt;<span class="number">6</span>)+(seed&gt;&gt;<span class="number">2</span>);</span><br><span class="line">        seed^=hash&lt;<span class="type">int</span>&gt;&#123;&#125;(x.second)<span class="number">+0x9e3779b9</span>+(seed&lt;&lt;<span class="number">6</span>)+(seed&gt;&gt;<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> seed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">gp_hash_table&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,<span class="type">int</span>,pair_hash&gt; cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,temp;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;temp&gt;&gt;s;</span><br><span class="line">        ll h1=<span class="number">0</span>,h2=<span class="number">0</span>,base1=<span class="number">1</span>,base2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            h1=(h1*<span class="number">131</span>+c)%mod1;</span><br><span class="line">            base1=base1*<span class="number">131</span>%mod1;</span><br><span class="line">            h2=(h2*<span class="number">131</span>+c)%mod2;</span><br><span class="line">            base2=base2*<span class="number">131</span>%mod2;</span><br><span class="line">        &#125;</span><br><span class="line">        ll x=h1*<span class="built_in">qpow</span>(base1<span class="number">-1</span>,mod1<span class="number">-2</span>,mod1)%mod1;</span><br><span class="line">        ll y=h2*<span class="built_in">qpow</span>(base2<span class="number">-1</span>,mod2<span class="number">-2</span>,mod2)%mod2;</span><br><span class="line">        ans+=cnt[<span class="built_in">make_pair</span>(x,y)];</span><br><span class="line">        ++cnt[<span class="built_in">make_pair</span>(x,y)];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans*<span class="number">2</span>+n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="poi-2012-okr-a-horrible-poem"><a
href="https://www.luogu.com.cn/problem/P3538">[POI 2012] OKR-A Horrible
Poem</a></h3>
<span class="math inline">\(A\)</span> 的一个子串 <span
class="math inline">\(B\)</span> 能成为 <span
class="math inline">\(A\)</span> 的一个完整周期，当且仅当其长度为 <span
class="math inline">\(A\)</span>
长度的因数。直接枚举因数。判断是否是完整周期的方法：设 <span
class="math inline">\(h_{l,r}\)</span> 表示 <span
class="math inline">\([l,r]\)</span> 的哈希值，则当一个长为 <span
class="math inline">\(len\)</span> 的子串满足 <span
class="math inline">\(h_{l,r-len}=h_{l+len,r}\)</span>
时，其为一个完整周期。先跑一遍线性筛降低枚举因数的时间复杂度。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">5e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,q,e[N],p[N],tot;</span><br><span class="line">ull h[N],base[N];</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function">ull <span class="title">gethash</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> h[r]-h[l<span class="number">-1</span>]*base[r-l<span class="number">+1</span>];&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %s %d&quot;</span>,&amp;n,s<span class="number">+1</span>,&amp;q);</span><br><span class="line">    base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        base[i]=base[i<span class="number">-1</span>]*<span class="number">131</span>;</span><br><span class="line">        h[i]=h[i<span class="number">-1</span>]*<span class="number">131</span>+s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e[i]) p[e[i]=++tot]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=e[i]&amp;&amp;p[j]&lt;=n/i;j++)</span><br><span class="line">            e[p[j]*i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a,b,len,ans;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        len=ans=b-a<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> prime=p[e[len]];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">gethash</span>(a+ans/prime,b)==<span class="built_in">gethash</span>(a,b-ans/prime))</span><br><span class="line">                ans/=prime;</span><br><span class="line">            len/=prime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="ontak2015-tasowanie"><a
href="https://www.luogu.com.cn/problem/P8023">[ONTAK2015]
Tasowanie</a></h3>
双指针+二分+哈希。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[N],b[N],len,p1,p2;</span><br><span class="line">ull h1[N],h2[N],base[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethash1</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> h1[r]-h1[l<span class="number">-1</span>]*base[r-l<span class="number">+1</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethash2</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> h2[r]-h2[l<span class="number">-1</span>]*base[r-l<span class="number">+1</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">gethash1</span>(p1,p1+x<span class="number">-1</span>)==<span class="built_in">gethash2</span>(p2,p2+x<span class="number">-1</span>);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(b[i]);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m) <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">+1</span>;i&lt;=m;i++) a[i]=<span class="number">1e3</span><span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m) <span class="keyword">for</span>(<span class="type">int</span> i=m<span class="number">+1</span>;i&lt;=n;i++) b[i]=<span class="number">1e3</span><span class="number">+1</span>;</span><br><span class="line">    base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    len=<span class="built_in">max</span>(n,m);</span><br><span class="line">    a[len<span class="number">+1</span>]=b[len<span class="number">+1</span>]=<span class="number">1e3</span><span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++) base[i]=base[i<span class="number">-1</span>]*<span class="number">13331</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">        h1[i]=h1[i<span class="number">-1</span>]*<span class="number">13331</span>+a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">        h2[i]=h2[i<span class="number">-1</span>]*<span class="number">13331</span>+b[i];</span><br><span class="line">    p1=<span class="number">1</span>,p2=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[p1]&lt;b[p2]) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[p1++]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[p1]&gt;b[p2]) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[p2++]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> l=<span class="number">1</span>,r=<span class="built_in">min</span>(len-p1<span class="number">+1</span>,len-p2<span class="number">+1</span>);</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid<span class="number">+1</span>;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[p1+r]&lt;b[p2+r]) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[p1++]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[p2++]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="kmp">KMP</h2>
<h3 id="hnoi2008-gt考试"><a
href="https://www.luogu.com.cn/problem/P3193">[HNOI2008] GT考试</a></h3>
设 <span class="math inline">\(f_{i,j}\)</span> 表示长串匹配前 <span
class="math inline">\(i\)</span> 个字符，短串匹配前 <span
class="math inline">\(j\)</span> 个字符的方案数。答案为： <span
class="math display">\[ans=\sum_{i=0}^{m-1} f_{n,i}\]</span> 设 <span
class="math inline">\(g_{i,j}\)</span> 表示匹配到第 <span
class="math inline">\(i\)</span> 位时加入一个数字后匹配到第 <span
class="math inline">\(j\)</span> 位的方案数，可以用 KMP 求出。 <span
class="math display">\[f_{i,j}=\sum_{k=0}^{m-1}f_{i-1,k}\times
g_{k,j}\]</span> 注意到这是矩阵乘法的形式，矩阵快速幂 <span
class="math inline">\(O(m^3\log n)\)</span>。<br />
在转化成矩阵的过程中，<span class="math inline">\(f_{i,j}\)</span>
被转化为一个一行 <span class="math inline">\(m-1\)</span> 列的矩阵。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="type">int</span> n,m,mod,nxt[<span class="number">25</span>],ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">Matrix</span>()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;m;k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">                    res.a[i][j]=(res.a[i][j]+a[i][k]*x.a[k][j]%mod)%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;base,f,g;</span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    Matrix res=base;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) base.a[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s<span class="number">+1</span>);</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[j<span class="number">+1</span>]!=s[i]) j=nxt[j];</span><br><span class="line">        <span class="keyword">if</span>(s[j<span class="number">+1</span>]==s[i]) j++;</span><br><span class="line">        nxt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c=<span class="string">&#x27;0&#x27;</span>;c&lt;=<span class="string">&#x27;9&#x27;</span>;c++)&#123;</span><br><span class="line">            j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&amp;&amp;s[j<span class="number">+1</span>]!=c) j=nxt[j];</span><br><span class="line">            <span class="keyword">if</span>(s[j<span class="number">+1</span>]==c) j++;</span><br><span class="line">            g.a[i][j]=(g.a[i][j]<span class="number">+1</span>)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    f.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    f=f*<span class="built_in">qpow</span>(g,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) ans=(ans+f.a[<span class="number">0</span>][i])%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="manacher">Manacher</h2>
感觉自己没理解 Manacher 啊，改天<a
href="https://headless-piston.github.io/2025/07/05/Manacher/">重学一次</a>。
### <a href="https://www.luogu.com.cn/problem/P1659">[国家集训队]
拉拉队排练</a> 由于只需要找长度为奇数的回文串，无需在字符间插入
<code>#</code>，直接跑 Manacher，开差分数组 <span
class="math inline">\(sum\)</span>，表示当前长度的回文串数量。当位置
<span class="math inline">\(i\)</span> 的最长回文半径为 <span
class="math inline">\(p_i\)</span> 时，容易想到半径长度小于等于 <span
class="math inline">\(p_i\)</span> 的都是回文串，则我们只需在差分数组
<span class="math inline">\(sum_1\)</span> 处加 <span
class="math inline">\(1\)</span>，<span
class="math inline">\(sum_{p_i\times 2}\)</span> 处减 <span
class="math inline">\(1\)</span> 就行了。最后统计答案时要用快速幂。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+10</span>,mod=<span class="number">19930726</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    a%=mod;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,p[N];</span><br><span class="line">ll k,sum[N],ans;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s<span class="number">+1</span>);</span><br><span class="line">    s[<span class="number">0</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,r=<span class="number">0</span>,mid=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=r) p[i]=<span class="built_in">min</span>(p[mid*<span class="number">2</span>-i],r-i<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">while</span>(s[i-p[i]]==s[i+p[i]]) ++p[i];</span><br><span class="line">        <span class="keyword">if</span>(p[i]+i&gt;r) r=p[i]+i<span class="number">-1</span>,mid=i;</span><br><span class="line">        ++sum[<span class="number">1</span>],--sum[p[i]*<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">    <span class="type">int</span> tot=n;</span><br><span class="line">    ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tot%<span class="number">2</span>==<span class="number">0</span>) --tot;</span><br><span class="line">    <span class="keyword">while</span>(k&amp;&amp;tot&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        ans=ans*<span class="built_in">qpow</span>(tot,<span class="built_in">min</span>(sum[tot],k))%mod;</span><br><span class="line">        k=<span class="built_in">max</span>(k-sum[tot],<span class="number">0ll</span>);</span><br><span class="line">        tot-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="国家集训队-最长双回文串"><a
href="https://www.luogu.com.cn/problem/P4555">[国家集训队]
最长双回文串</a></h3>
在跑 Manacher 同时维护以每个点开头和结尾的最长回文串长度。仅 Manacher
求解的答案不完全，需要再递推地扫一遍，最后枚举中点即可。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">char</span> t[N],s[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> len0,len,p[N&lt;&lt;<span class="number">1</span>],a[N&lt;&lt;<span class="number">1</span>],b[N&lt;&lt;<span class="number">1</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t<span class="number">+1</span>);</span><br><span class="line">    len0=<span class="built_in">strlen</span>(t<span class="number">+1</span>);</span><br><span class="line">    s[<span class="number">0</span>]=s[<span class="number">1</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len0;i++)&#123;</span><br><span class="line">        s[++len]=t[i];</span><br><span class="line">        s[++len]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,r=<span class="number">0</span>,mid=<span class="number">0</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">2</span>*mid-i;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=r) p[i]=<span class="built_in">min</span>(r-i<span class="number">+1</span>,p[j]);</span><br><span class="line">        <span class="keyword">else</span> p[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(s[i-p[i]]==s[i+p[i]]) ++p[i];</span><br><span class="line">        <span class="keyword">if</span>(i+p[i]<span class="number">-1</span>&gt;r)&#123;</span><br><span class="line">            r=i+p[i]<span class="number">-1</span>;</span><br><span class="line">            mid=i;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i+p[i]<span class="number">-1</span>]=<span class="built_in">max</span>(a[i+p[i]<span class="number">-1</span>],p[i]<span class="number">-1</span>);</span><br><span class="line">        b[i-p[i]<span class="number">+1</span>]=<span class="built_in">max</span>(b[i-p[i]<span class="number">+1</span>],p[i]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>) a[i]=<span class="built_in">max</span>(a[i],a[i<span class="number">+2</span>]<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i+=<span class="number">2</span>) b[i]=<span class="built_in">max</span>(b[i],b[i<span class="number">-2</span>]<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i+=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&amp;&amp;b[i]) ans=<span class="built_in">max</span>(ans,a[i]+b[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="day4">Day4</h1>
<h2 id="搜索">搜索</h2>
搜索题真是无聊死了，就少放几道吧…… ### <a
href="https://www.luogu.com.cn/problem/P8817">[CSP-S 2022] 假期计划</a>
<span class="math inline">\(n\)</span> 遍 BFS
求全源最短路，之后考虑枚举。将 <span class="math inline">\(5\)</span>
个点记作 <span class="math inline">\(1,2,3,4,5\)</span>，则枚举 <span
class="math inline">\(3,4\)</span> 点，判断 <span
class="math inline">\(2,5\)</span>
是否与已选的点重复。可以预处理出每个能同时到达 <span
class="math inline">\(1\)</span>
点和另一个点的前三大点，因为它最多只有可能与 <span
class="math inline">\(3,4\)</span> 中的一个和 <span
class="math inline">\(2,5\)</span> 中的一个重合。总体时间复杂度 <span
class="math inline">\(O(nm+n^2)\)</span>。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2510</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,dis[N][N];</span><br><span class="line">ll ans,val[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> id):<span class="built_in">id</span>(id)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val[id]!=val[x.id]?val[id]&lt;val[x.id]:id&lt;x.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;node&gt; st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,k);++k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="built_in">read</span>(val[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dis[i][i]=<span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> v:e[u])</span><br><span class="line">                <span class="keyword">if</span>(dis[i][u]<span class="number">+1</span>&lt;dis[i][v]&amp;&amp;dis[i][u]<span class="number">+1</span>&lt;=k)&#123;</span><br><span class="line">                    dis[i][v]=dis[i][u]<span class="number">+1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis[i][j]&lt;=k&amp;&amp;dis[<span class="number">1</span>][j]&lt;=k)</span><br><span class="line">                st[i].<span class="built_in">insert</span>(<span class="built_in">node</span>(j));</span><br><span class="line">            <span class="keyword">if</span>(st[i].<span class="built_in">size</span>()&gt;<span class="number">3</span>) st[i].<span class="built_in">erase</span>(st[i].<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> b=<span class="number">2</span>;b&lt;=n;b++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">2</span>;c&lt;=n;c++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b==c||dis[b][c]&gt;k) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> temp1:st[b])&#123;</span><br><span class="line">                <span class="type">int</span> a=temp<span class="number">1.</span>id;</span><br><span class="line">                <span class="keyword">if</span>(a==b||a==c) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> temp2:st[c])&#123;</span><br><span class="line">                    <span class="type">int</span> d=temp<span class="number">2.</span>id;</span><br><span class="line">                    <span class="keyword">if</span>(d==b||d==c||a==d) <span class="keyword">continue</span>;</span><br><span class="line">                    ans=<span class="built_in">max</span>(ans,val[a]+val[b]+val[c]+val[d]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="ahoi2012-铁盘整理"><a
href="https://www.luogu.com.cn/problem/P2534">[AHOI2012]
铁盘整理</a></h3>
IDA* 板题。先离散化，估价函数为相邻差不为 <span
class="math inline">\(1\)</span> 的个数。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">18</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],b[N],lim;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">h</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) res+=(<span class="built_in">abs</span>(a[i<span class="number">+1</span>]-a[i])!=<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt,<span class="type">int</span> pre)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=<span class="built_in">h</span>();</span><br><span class="line">    <span class="keyword">if</span>(temp==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(cnt+temp&gt;lim) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==pre) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">reverse</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+i);</span><br><span class="line">        f|=<span class="built_in">dfs</span>(cnt<span class="number">+1</span>,i);</span><br><span class="line">        <span class="built_in">reverse</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]),b[i]=a[i];</span><br><span class="line">    <span class="built_in">sort</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">lower_bound</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+n,a[i])-b;</span><br><span class="line">    a[n<span class="number">+1</span>]=n<span class="number">+1</span>;</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lim);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++lim;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="prime-gift"><a
href="https://codeforces.com/problemset/problem/912/E">Prime
Gift</a></h3>
容易发现，<span class="math inline">\(p_i\)</span>
越小，方案数越多。<span class="math inline">\(n=16\)</span>
时不可接受，考虑 Meet in the middle。最坏情况下前 <span
class="math inline">\(8\)</span> 个质数 <span
class="math inline">\(2,3,5,7,11,13,17,19\)</span>，在 <span
class="math inline">\(10^{18}\)</span> 内能组成 <span
class="math inline">\(7039193\)</span>
种数字。实际实现时可以将数的分配得更加均匀以降低复杂度。之后二分答案+双指针求解即可。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> ll lim=<span class="number">1e18</span>,N=<span class="number">7039192</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,p[<span class="number">20</span>],k,tota,totb;</span><br><span class="line">ll a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,ll num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs1</span>(x<span class="number">+2</span>,num);</span><br><span class="line">    <span class="keyword">for</span>(ll i=p[x];;i*=p[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(lim/i&lt;num) <span class="keyword">break</span>;</span><br><span class="line">        a[++tota]=num*i;</span><br><span class="line">        <span class="built_in">dfs1</span>(x<span class="number">+2</span>,num*i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,ll num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(x<span class="number">+2</span>,num);</span><br><span class="line">    <span class="keyword">for</span>(ll i=p[x];;i*=p[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(lim/i&lt;num) <span class="keyword">break</span>;</span><br><span class="line">        b[++totb]=num*i;</span><br><span class="line">        <span class="built_in">dfs2</span>(x<span class="number">+2</span>,num*i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=totb;i&lt;=tota;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;x/a[i]&lt;b[j]) --j;</span><br><span class="line">        cnt+=j;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt&lt;k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(p[i]);</span><br><span class="line">    <span class="built_in">sort</span>(p<span class="number">+1</span>,p<span class="number">+1</span>+n);</span><br><span class="line">    a[++tota]=b[++totb]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+tota);</span><br><span class="line">    <span class="built_in">sort</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+totb);</span><br><span class="line">    <span class="built_in">read</span>(k);</span><br><span class="line">    ll l=<span class="number">1</span>,r=<span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="usaco09nov-lights-g"><a
href="https://www.luogu.com.cn/problem/P2962">[USACO09NOV] Lights
G</a></h3>
Meet in the middle，开一个 <code>std::map</code>
记录状态对应的最小操作次数，按照补集相加。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">40</span>;</span><br><span class="line"><span class="type">int</span> n,m,ans;</span><br><span class="line">ll a[N];</span><br><span class="line">map&lt;ll,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=<span class="number">1ll</span>&lt;&lt;i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        --u,--v;</span><br><span class="line">        a[u]|=<span class="number">1ll</span>&lt;&lt;v;</span><br><span class="line">        a[v]|=<span class="number">1ll</span>&lt;&lt;u;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=n<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;(n&gt;&gt;<span class="number">1</span>));i++)&#123;</span><br><span class="line">        ll temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;(n&gt;&gt;<span class="number">1</span>);j++)</span><br><span class="line">            <span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">                temp^=a[j];</span><br><span class="line">        <span class="keyword">if</span>(!mp.<span class="built_in">count</span>(temp)) mp[temp]=__builtin_popcount(i);</span><br><span class="line">        <span class="keyword">else</span> mp[temp]=<span class="built_in">min</span>(mp[temp],__builtin_popcount(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;(n-(n&gt;&gt;<span class="number">1</span>)));i++)&#123;</span><br><span class="line">        ll temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n-(n&gt;&gt;<span class="number">1</span>);j++)</span><br><span class="line">            <span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">                temp^=a[(n&gt;&gt;<span class="number">1</span>)+j];</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">count</span>(((<span class="number">1ll</span>&lt;&lt;n)<span class="number">-1</span>)^temp))</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,__builtin_popcount(i)+mp[((<span class="number">1ll</span>&lt;&lt;n)<span class="number">-1</span>)^temp]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="机关"><a
href="https://www.luogu.com.cn/problem/P5507">机关</a></h3>
<del>坏题。</del><br />
考虑 A*。容易想到 <span class="math inline">\(4\)</span>
进制状压，则状态 <span class="math inline">\(x\)</span> 的估价 <span
class="math inline">\(h(x)\)</span> 应为当前已经旋转的次数与所有不为
<span class="math inline">\(1\)</span> 的旋钮旋到 <span
class="math inline">\(1\)</span> 所需总步数除以 <span
class="math inline">\(2\)</span>
的和。因为最好情况是旋一个按钮时另一个正好也到了 <span
class="math inline">\(1\)</span>。每个状态记录一个 <span
class="math inline">\(pre\)</span>
表示是从哪个状态转移过来的以输出方案。<br />

<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=(<span class="number">1</span>&lt;&lt;<span class="number">24</span>)<span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> st,a[<span class="number">15</span>][<span class="number">4</span>],b[N],pre[N],step[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==st) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">write</span>(pre[x]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">h</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp=(x&gt;&gt;(i&lt;&lt;<span class="number">1</span>))&amp;<span class="number">3</span>;</span><br><span class="line">        res+=temp?<span class="number">4</span>-temp:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,h;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> x,<span class="type">int</span> h):<span class="built_in">x</span>(x),<span class="built_in">h</span>(h)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;a)<span class="type">const</span>&#123;<span class="keyword">return</span> h&gt;a.h;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,x;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(x);</span><br><span class="line">        st|=(x<span class="number">-1</span>)&lt;&lt;(i&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">            <span class="built_in">read</span>(a[i][j]),--a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">node</span>(st,<span class="built_in">h</span>(st)));</span><br><span class="line">    vis[st]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">top</span>().x;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> pos1=i&lt;&lt;<span class="number">1</span>,temp1=(x&gt;&gt;pos1)&amp;<span class="number">3</span>,j=a[i][temp1];</span><br><span class="line">            <span class="type">int</span> pos2=j&lt;&lt;<span class="number">1</span>,temp2=(x&gt;&gt;pos2)&amp;<span class="number">3</span>,res=x;</span><br><span class="line">            res&amp;=~(<span class="number">3</span>&lt;&lt;pos1);</span><br><span class="line">            res&amp;=~(<span class="number">3</span>&lt;&lt;pos2);</span><br><span class="line">            res|=((temp1<span class="number">+1</span>)&amp;<span class="number">3</span>)&lt;&lt;pos1;</span><br><span class="line">            res|=((temp2<span class="number">+1</span>)&amp;<span class="number">3</span>)&lt;&lt;pos2;</span><br><span class="line">            <span class="keyword">if</span>(!vis[res])&#123;</span><br><span class="line">                vis[res]=<span class="number">1</span>;</span><br><span class="line">                step[res]=step[x]<span class="number">+1</span>;</span><br><span class="line">                pre[res]=x,b[res]=i<span class="number">+1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">node</span>(res,step[res]+<span class="built_in">h</span>(res)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,step[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="day5">Day5</h1>
<h2 id="最小生成树">最小生成树</h2>
<h3 id="noip-2013-提高组-货车运输"><a
href="https://www.luogu.com.cn/problem/P1967">[NOIP 2013 提高组]
货车运输</a></h3>
最优情况一定是走最大生成树上的边，所以先 Kruskal
求最大生成树，接下来求树上两点间路径权值最小值，可以边权下放点权上树剖+线段树或倍增。另外，图不保证连通，实际上要对森林做操作。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e4</span><span class="number">+10</span>,M=<span class="number">5e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,q,boss[N],cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> boss[x]==x?x:boss[x]=<span class="built_in">find</span>(boss[x]);&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> w&gt;x.w;&#125;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge1</span>&#123;<span class="type">int</span> v,w;&#125;;</span><br><span class="line">vector&lt;Edge1&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) boss[i]=i;</span><br><span class="line">    <span class="built_in">sort</span>(edge<span class="number">+1</span>,edge<span class="number">+1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m&amp;&amp;cnt&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="built_in">find</span>(edge[i].u),v=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">        boss[u]=v;</span><br><span class="line">        ++cnt;</span><br><span class="line">        u=edge[i].u,v=edge[i].v;</span><br><span class="line">        <span class="type">int</span> w=edge[i].w;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(&#123;v,w&#125;);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(&#123;u,w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[N],dfncnt,son[N],fa[N],siz[N],top[N],dep[N],w[N],P,tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    fa[u]=f;</span><br><span class="line">    dep[u]=dep[f]<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=t.v;</span><br><span class="line">        <span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">        w[v]=t.w;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])</span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">    top[u]=topf;</span><br><span class="line">    dfn[u]=++dfncnt;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=t.v;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!siz[i]) w[i]=<span class="number">2e9</span>,<span class="built_in">dfs1</span>(i,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">dfs2</span>(i,i);</span><br><span class="line">    P=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(P&lt;=n<span class="number">+1</span>) P&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(tree,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(tree));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        tree[P+dfn[i]]=w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=P<span class="number">-1</span>;i;i--)</span><br><span class="line">        tree[i]=<span class="built_in">min</span>(tree[<span class="built_in">ls</span>(i)],tree[<span class="built_in">rs</span>(i)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    l+=P<span class="number">-1</span>,r+=P<span class="number">+1</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(l^<span class="number">1</span>^r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(~l&amp;<span class="number">1</span>) res=<span class="built_in">min</span>(tree[l^<span class="number">1</span>],res);</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res=<span class="built_in">min</span>(tree[r^<span class="number">1</span>],res);</span><br><span class="line">        l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find</span>(x)!=<span class="built_in">find</span>(y)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res=<span class="built_in">min</span>(res,<span class="built_in">query</span>(dfn[top[x]],dfn[x]));</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y) res=<span class="built_in">min</span>(res,<span class="built_in">query</span>(dfn[x]<span class="number">+1</span>,dfn[y]));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        edge[i]=&#123;u,v,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">kruskal</span>();</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">read</span>(x,y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask</span>(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="bjwc2010-严格次小生成树"><a
href="https://www.luogu.com.cn/problem/P4180">[BJWC2010]
严格次小生成树</a></h3>
跟上一道题一个套路。考虑枚举替换边的过程，首先加一条边形成环，再从环上删去最大的一条小于加入边边权的边。线段树维护区间最大值和区间严格次大值即可。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">3e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,boss[N],cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> maxn,se;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> maxn=<span class="number">-1</span>,<span class="type">int</span> se=<span class="number">-1</span>):<span class="built_in">maxn</span>(maxn),<span class="built_in">se</span>(se)&#123;&#125;</span><br><span class="line">    node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        node res;</span><br><span class="line">        res.maxn=<span class="built_in">max</span>(maxn,x.maxn);</span><br><span class="line">        res.se=<span class="built_in">max</span>(se,x.se);</span><br><span class="line">        <span class="keyword">if</span>(maxn!=x.maxn)</span><br><span class="line">            res.se=<span class="built_in">max</span>(res.se,<span class="built_in">min</span>(maxn,x.maxn));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> P;</span><br><span class="line">node tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    l+=P<span class="number">-1</span>,r+=P<span class="number">+1</span>;</span><br><span class="line">    node res;</span><br><span class="line">    <span class="keyword">while</span>(l^<span class="number">1</span>^r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(~l&amp;<span class="number">1</span>) res=res+tree[l^<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res=res+tree[r^<span class="number">1</span>];</span><br><span class="line">        l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> w&lt;x.w;&#125;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge1</span>&#123;<span class="type">int</span> v,w;&#125;;</span><br><span class="line">vector&lt;Edge1&gt; e[N];</span><br><span class="line">ll ans,minval;</span><br><span class="line"><span class="type">int</span> dfn[N],top[N],dfncnt,dep[N],fa[N],siz[N],son[N],w[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> boss[x]==x?x:boss[x]=<span class="built_in">find</span>(boss[x]);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    dep[u]=dep[f]<span class="number">+1</span>;</span><br><span class="line">    fa[u]=f;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=t.v;</span><br><span class="line">        <span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">        w[v]=t.w;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])</span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">    top[u]=topf;</span><br><span class="line">    dfn[u]=++dfncnt;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=t.v;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    node res;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res=res+<span class="built_in">query</span>(dfn[top[x]],dfn[x]);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y) res=res+<span class="built_in">query</span>(dfn[x]<span class="number">+1</span>,dfn[y]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        edge[i]=&#123;u,v,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(edge<span class="number">+1</span>,edge<span class="number">+1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) boss[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m&amp;&amp;cnt&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="built_in">find</span>(edge[i].u),v=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">        boss[u]=v;</span><br><span class="line">        vis[i]=<span class="number">1</span>;</span><br><span class="line">        u=edge[i].u,v=edge[i].v;</span><br><span class="line">        <span class="type">int</span> w=edge[i].w;</span><br><span class="line">        minval+=w;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(&#123;v,w&#125;);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(&#123;u,w&#125;);</span><br><span class="line">        <span class="keyword">if</span>(++cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    P=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(P&lt;=n<span class="number">+1</span>) P&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        tree[P+dfn[i]]=w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=P<span class="number">-1</span>;i;i--)</span><br><span class="line">        tree[i]=tree[i&lt;&lt;<span class="number">1</span>]+tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    ans=<span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> x=edge[i].u,y=edge[i].v,w=edge[i].w;</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">        node temp=<span class="built_in">ask</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(temp.maxn==w)</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,minval-temp.se+w);</span><br><span class="line">        <span class="keyword">else</span> ans=<span class="built_in">min</span>(ans,minval-temp.maxn+w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="peaks"><a
href="https://www.luogu.com.cn/problem/P4197">Peaks</a></h3>
Kruskal
重构树的在线做法还是太吃操作了，我们直接离线。容易想到将边权和询问的
<span class="math inline">\(x\)</span> 升序排序后动态加边，查询第 <span
class="math inline">\(k\)</span>
大直接线段树上二分，加边用并查集+线段树合并维护。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">5e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,q,h[N],b[N],len,tot,root[N],fa[N],now,ans[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> w&lt;x.w;&#125;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span>&#123;</span><br><span class="line">    <span class="type">int</span> v,x,k,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Query &amp;a)<span class="type">const</span>&#123;<span class="keyword">return</span> x&lt;a.x;&#125;</span><br><span class="line">&#125;qu[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span>&#123;</span><br><span class="line">    <span class="type">int</span> ls,rs,sum;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tree[u].sum=tree[tree[u].ls].sum+tree[tree[u].rs].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!u) u=++tot;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        ++tree[u].sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(tree[u].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(tree[u].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a||!b) <span class="keyword">return</span> a|b;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[a].sum+=tree[b].sum;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    tree[a].ls=<span class="built_in">merge</span>(tree[a].ls,tree[b].ls,l,mid);</span><br><span class="line">    tree[a].rs=<span class="built_in">merge</span>(tree[a].rs,tree[b].rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="built_in">push_up</span>(a);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=tree[tree[u].ls].sum)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tree[u].ls,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tree[u].rs,mid<span class="number">+1</span>,r,k-tree[tree[u].ls].sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(h[i]);</span><br><span class="line">        b[i]=h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+n);</span><br><span class="line">    len=<span class="built_in">unique</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+n)-b<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">lower_bound</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+len,h[i])-b;</span><br><span class="line">        <span class="built_in">modify</span>(root[i],<span class="number">1</span>,len,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        e[i]=&#123;u,v,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e<span class="number">+1</span>,e<span class="number">+1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,v,x,k;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(v,x,k);</span><br><span class="line">        qu[i]=&#123;v,x,k,i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(qu<span class="number">+1</span>,qu<span class="number">+1</span>+q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=qu[i].x,k=qu[i].k,id=qu[i].id;</span><br><span class="line">        <span class="keyword">while</span>(e[now<span class="number">+1</span>].w&lt;=x&amp;&amp;now&lt;m)&#123;</span><br><span class="line">            ++now;</span><br><span class="line">            <span class="type">int</span> u=<span class="built_in">find</span>(e[now].u),v=<span class="built_in">find</span>(e[now].v);</span><br><span class="line">            <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">            fa[u]=v;</span><br><span class="line">            root[v]=<span class="built_in">merge</span>(root[v],root[u],<span class="number">1</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> v=<span class="built_in">find</span>(qu[i].v);</span><br><span class="line">        <span class="keyword">if</span>(tree[root[v]].sum&lt;k) ans[id]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[id]=b[<span class="built_in">query</span>(root[v],<span class="number">1</span>,len,tree[root[v]].sum-k<span class="number">+1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="最短路">最短路</h2>
没做。 ## 拓扑排序 ### <a
href="https://www.luogu.com.cn/problem/P2272">[ZJOI2007]
最大半连通子图</a>
容易发现，半连通子图就是若干相连的强连通分量，则找最大半连通子图转化为缩点后在
DAG 上找最长链+计数。注意去重。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,mod,head[N],tot_edge;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;<span class="type">int</span> to,nxt;&#125;e1[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    e1[++tot_edge].to=v;</span><br><span class="line">    e1[tot_edge].nxt=head[u];</span><br><span class="line">    head[u]=tot_edge;</span><br><span class="line">&#125;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="type">bool</span> instack[N];</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],dfncnt,scccnt,scc[N],w[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++dfncnt;</span><br><span class="line">    instack[u]=<span class="number">1</span>;</span><br><span class="line">    st.<span class="built_in">push</span>(u);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e1[i].nxt)&#123;</span><br><span class="line">        <span class="type">int</span> v=e1[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(v);</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v])</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line">        ++scccnt;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> v=st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            instack[v]=<span class="number">0</span>;</span><br><span class="line">            scc[v]=scccnt;</span><br><span class="line">            ++w[scccnt];</span><br><span class="line">            <span class="keyword">if</span>(u==v) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e2[N];</span><br><span class="line"><span class="type">int</span> indegree[N],dp[N],dis[N],ans1,ans2;</span><br><span class="line">set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; p;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        <span class="built_in">add_edge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e1[i].nxt)&#123;</span><br><span class="line">            <span class="type">int</span> v=e1[i].to;</span><br><span class="line">            <span class="keyword">if</span>(scc[u]==scc[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.<span class="built_in">find</span>(<span class="built_in">make_pair</span>(scc[u],scc[v]))!=p.<span class="built_in">end</span>())</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            p.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(scc[u],scc[v]));</span><br><span class="line">            e2[scc[u]].<span class="built_in">push_back</span>(scc[v]);</span><br><span class="line">            ++indegree[scc[v]];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=scccnt;i++)</span><br><span class="line">        <span class="keyword">if</span>(!indegree[i])&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            dis[i]=w[i];</span><br><span class="line">            dp[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v:e2[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&lt;dis[u]+w[v])&#123;</span><br><span class="line">                dis[v]=dis[u]+w[v];</span><br><span class="line">                dp[v]=dp[u];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dis[v]==dis[u]+w[v])</span><br><span class="line">                dp[v]=(dp[u]+dp[v])%mod;</span><br><span class="line">            <span class="keyword">if</span>(!--indegree[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=scccnt;i++) ans1=<span class="built_in">max</span>(ans1,dis[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=scccnt;i++)</span><br><span class="line">        <span class="keyword">if</span>(dis[i]==ans1) ans2=(ans2+dp[i])%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d\n&quot;</span>,ans1,ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h1 id="day6">Day6</h1>
<h2 id="二分图">二分图</h2>
<h3 id="machine-schedule"><a
href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=246&amp;page=show_problem&amp;problem=3635">Machine
Schedule</a></h3>
连接每个 <span class="math inline">\(a_i\)</span> 和 <span
class="math inline">\(b_i\)</span>，问题变为了二分图上找最小点覆盖。直接跑二分图最大匹配即可。<br />
Kőnig 定理：二分图中，最小点覆盖中的顶点数量等于最大匹配中的边数量。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,ans,match[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!match[v]||<span class="built_in">dfs</span>(match[v]))&#123;</span><br><span class="line">                match[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">int</span>)*(n<span class="number">+10</span>));</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">read</span>(m,k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,a;i&lt;=k;i++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(a,u,v);</span><br><span class="line">            e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">bool</span>)*(n<span class="number">+10</span>));</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(i)) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="usaco05jan-muddy-fields-g"><a
href="https://www.luogu.com.cn/problem/P6062">[USACO05JAN] Muddy Fields
G</a></h3>
贪心地考虑，极长地放木板一定优。将所有横着的和竖着的木板编号，相交的连边，之后二分图最大匹配。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> r,c,tota,totb,a[N][N],b[N][N],match[N*N],ans;</span><br><span class="line"><span class="type">char</span> mp[N][N];</span><br><span class="line"><span class="type">bool</span> vis[N*N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N*N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!match[v]||<span class="built_in">dfs</span>(match[v]))&#123;</span><br><span class="line">                match[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;r&gt;&gt;c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)&#123;</span><br><span class="line">            cin&gt;&gt;mp[i][j];</span><br><span class="line">            <span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j<span class="number">-1</span>]==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    a[i][j]=a[i][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> a[i][j]=++tota;</span><br><span class="line">                <span class="keyword">if</span>(mp[i<span class="number">-1</span>][j]==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    b[i][j]=b[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> b[i][j]=++totb;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j]&amp;&amp;b[i][j])</span><br><span class="line">                    e[a[i][j]].<span class="built_in">push_back</span>(b[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tota;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(i)) ++ans;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="guardian-of-decency"><a
href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=242&amp;page=show_problem&amp;problem=3235">Guardian
of Decency</a></h3>
最大独立集与最小点覆盖之和为顶点数目，这个推论适用于一般图。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> t,n,match[N],ans,cnta,cntb;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    string music,sport;</span><br><span class="line">&#125;a[N],b[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!match[v]||<span class="built_in">dfs</span>(match[v]))&#123;</span><br><span class="line">                match[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">int</span>)*(n<span class="number">+10</span>));</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i].h&gt;&gt;a[i].sex&gt;&gt;a[i].music&gt;&gt;a[i].sport;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i].h-a[j].h)&gt;<span class="number">40</span>||a[i].sex==a[j].sex||</span><br><span class="line">                    a[i].music!=a[j].music||a[i].sport==a[j].sport)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[i].sex==<span class="string">&#x27;M&#x27;</span>) e[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">                <span class="keyword">else</span> e[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">bool</span>)*(n<span class="number">+10</span>));</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(i)) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n-ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h2 id="欧拉路径">欧拉路径</h2>
<p>没做。 ## 连通分量 没做。</p>
<p>参考资料：<br />
https://oi-wiki.org/graph/graph-matching/bigraph-match/</p>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>杂题合集</title>
    <url>/2025/07/04/%E6%9D%82%E9%A2%98%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h3 id="abc_405e"><a
href="https://atcoder.jp/contests/abc405/tasks/abc405_e"
title="abc_405e">abc_405e</a></h3>
<p>简单组合计数。形式化地说，A 必须在 C 左边，A 必须在 D 左边，B 必须在
D左边，不难发现应对 C 进行分割，左半部分与 B 重合，而右半部分与 D
重合。如图 <img
src="https://github.com/headless-piston/blog_images/blob/main/abc405e.png?raw=true"
alt="image" /> 枚举 C 中的断点 <span
class="math inline">\(i\)</span>，答案即为 <span
class="math display">\[\sum_{i=0}^{c}\binom{a+b+i}{b}\binom{c-i+d-1}{d-1}\]</span>
预处理阶乘和逆元可以做到 <span class="math inline">\(O(n)\)</span>。 ###
<a href="https://www.luogu.com.cn/problem/P12509"
title="【模板】通信题">【模板】通信题</a> 通信题真好玩。
我们只能使用不大于 <span class="math inline">\(2^{20}\)</span>
的非负整数存储状态。注意到这个数刚好比 <span
class="math inline">\(10^6\)</span>
略大。这给我们对每一位附上不同权值提供了方便。考虑利用异或运算的性质，给每一位附上当前字符下标的权值（下标从
<span class="math inline">\(1\)</span>）开始，然后求其异或和。将 <span
class="math inline">\(S\)</span> 和 <span
class="math inline">\(T\)</span> 的结果异或起来即得答案。注意下标一定从
<span class="math inline">\(1\)</span> 开始，否则第一位的值无论如何都是
<span class="math inline">\(0\)</span>。</p>
<details>
<summary>
communication.cpp
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Alice</span><span class="params">(string S)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S.<span class="built_in">length</span>();i++)</span><br><span class="line">        res^=(i<span class="number">+1</span>)*(S[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Bob</span><span class="params">(string T,<span class="type">int</span> X)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;T.<span class="built_in">length</span>();i++)</span><br><span class="line">        res^=(i<span class="number">+1</span>)*(T[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> X^res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="mdoi-r1group"><a href="https://www.luogu.com.cn/problem/P6069"
title="『MdOI R1』Group">『MdOI R1』Group</a></h3>
<p>二分答案。 注意到，对 <span class="math inline">\(a\)</span>
进行排序，则我们可以选中其中一段连续的区间，计算它的方差。而两侧的值直接设为区间的平均值，不产生贡献。这样是最优策略。在检查合法性时直接从
<span class="math inline">\(1\)</span> 到 <span
class="math inline">\(n\)</span>
枚举区间就好了，预处理前缀和和前缀平方和可做到 <span
class="math inline">\(O(1)\)</span> 求方差。 二分时，<span
class="math inline">\(l\)</span> 必须从 <span
class="math inline">\(1\)</span> 开始。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],l,r;</span><br><span class="line">ll m,sum[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r=l+len<span class="number">-1</span>;r&lt;=n;l++,r++)&#123;</span><br><span class="line">        ll s=sum[r][<span class="number">0</span>]-sum[l<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">double</span> p=<span class="number">1.0</span>*s/len;</span><br><span class="line">        <span class="type">double</span> res=len*p*p;</span><br><span class="line">        res-=<span class="number">2</span>*s*p;</span><br><span class="line">        res+=sum[r][<span class="number">1</span>]-sum[l<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(res&lt;=m)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    std::<span class="built_in">sort</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum[i][<span class="number">0</span>]=sum[i<span class="number">-1</span>][<span class="number">0</span>]+a[i];</span><br><span class="line">        sum[i][<span class="number">1</span>]=sum[i<span class="number">-1</span>][<span class="number">1</span>]<span class="number">+1ll</span>*a[i]*a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    l=<span class="number">1</span>,r=n;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))</span><br><span class="line">            l=mid<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n-r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="noip-2014-提高组-飞扬的小鸟"><a
href="https://www.luogu.com.cn/problem/P1941"
title="[NOIP 2014 提高组] 飞扬的小鸟">[NOIP 2014 提高组]
飞扬的小鸟</a></h3>
<span class="math inline">\(dp_{i,j}\)</span> 表示在 <span
class="math inline">\((i,j)\)</span>
所用的最少点击屏幕数，显然有朴素转移方程 <span
class="math display">\[dp_{i,j}=\min(dp_{i,j},dp_{i-1,j-k\times
x_{i-1}},dp_{i-1,j+y_{i-1}})\]</span> 时间复杂度 <span
class="math inline">\(O(nm^2)\)</span>。 考虑优化，复杂度瓶颈在于 <span
class="math inline">\(k\)</span>
的枚举。我们发现，可以使用类似完全背包的处理，从 <span
class="math inline">\(dp_{i,j-(k-1)\times x_{i-1}}\)</span> 转移到 <span
class="math inline">\(dp_{i,j-k\times x_{i-1}}\)</span> 而不必从 <span
class="math inline">\(dp_{i-1}\)</span> 转移。时间复杂度 <span
class="math inline">\(O(nm)\)</span>。
注意要先处理点击屏幕的情况，否则可能出现同一横坐标既向下又向上的情况。
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b,<span class="type">const</span> Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Min</span>(<span class="built_in">Min</span>(a,b),args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>,M=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,x[N],y[N],dp[N][M],cnt,res;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,h;</span><br><span class="line">&#125;c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">read</span>(n,m,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">read</span>(x[i],y[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,p;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(p);</span><br><span class="line">        <span class="built_in">read</span>(c[p].l,c[p].h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=x[i<span class="number">-1</span>]<span class="number">+1</span>;j&lt;=m;j++)</span><br><span class="line">            dp[i][j]=<span class="built_in">Min</span>(dp[i][j],dp[i<span class="number">-1</span>][j-x[i<span class="number">-1</span>]]<span class="number">+1</span>,dp[i][j-x[i<span class="number">-1</span>]]<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=m-x[i<span class="number">-1</span>];j&lt;=m;j++)</span><br><span class="line">            dp[i][m]=<span class="built_in">Min</span>(dp[i][m],dp[i<span class="number">-1</span>][j]<span class="number">+1</span>,dp[i][j]<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j+y[i<span class="number">-1</span>]&lt;=m;j++)</span><br><span class="line">            dp[i][j]=<span class="built_in">Min</span>(dp[i][j],dp[i<span class="number">-1</span>][j+y[i<span class="number">-1</span>]]);</span><br><span class="line">        <span class="keyword">if</span>(c[i].h)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c[i].l;j++)</span><br><span class="line">                dp[i][j]=inf;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=c[i].h;j&lt;=m;j++)</span><br><span class="line">                dp[i][j]=inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j]!=inf)&#123;</span><br><span class="line">                f=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(f)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0\n%d\n&quot;</span>,cnt<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        res=<span class="built_in">Min</span>(res,dp[n][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1\n%d\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="邦邦的大合唱站队"><a
href="https://www.luogu.com.cn/problem/P3694"
title="邦邦的大合唱站队">邦邦的大合唱站队</a></h3>
<p>状压
DP，每一位表示一种乐队。预处理前缀和计算长度。代码实现也很简单。<del>（很久没有独立想出过
DP 题了）</del></p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,a,dp[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],sum[N][<span class="number">30</span>],len[<span class="number">1</span>&lt;&lt;<span class="number">21</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; t[<span class="number">30</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">        sum[i][a<span class="number">-1</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            sum[i][j]+=sum[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,bitcnt;i&lt;(<span class="number">1</span>&lt;&lt;m);i++)&#123;</span><br><span class="line">        bitcnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                bitcnt++;</span><br><span class="line">                len[i]+=sum[n][j];</span><br><span class="line">            &#125;</span><br><span class="line">        t[bitcnt].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p:t[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=p;j;j^=<span class="built_in">lowbit</span>(j))&#123;</span><br><span class="line">                <span class="type">int</span> k=<span class="built_in">lowbit</span>(j);</span><br><span class="line">                dp[p]=<span class="built_in">Min</span>(dp[p],dp[p^k]+len[p]-len[p^k]-(sum[len[p]][__lg(k)]-sum[len[p^k]][__lg(k)]));</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="可持久化并查集"><a href="https://www.luogu.com.cn/problem/P3402"
title="可持久化并查集">可持久化并查集</a></h3>
<p>用可持久化数组实现。使用按秩合并但不使用路径压缩。注意修改 <span
class="math inline">\(fa\)</span> 与修改 <span
class="math inline">\(dep\)</span> 都要新建版本。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T &amp;a,T &amp;b)</span></span>&#123;</span><br><span class="line">    T c=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span>&#123;</span><br><span class="line">    <span class="type">int</span> ls,rs,fa,dep;</span><br><span class="line">&#125;tree[N*<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> nodetot,root[M],n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    u=++nodetot;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u].fa=l;</span><br><span class="line">        tree[u].dep=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree[u].ls,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(tree[u].rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_fa</span><span class="params">(<span class="type">int</span> old,<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    u=++nodetot;</span><br><span class="line">    tree[u]=tree[old];</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u].fa=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify_fa</span>(tree[old].ls,tree[u].ls,l,mid,x,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">modify_fa</span>(tree[old].rs,tree[u].rs,mid<span class="number">+1</span>,r,x,k);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_dep</span><span class="params">(<span class="type">int</span> old,<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    u=++nodetot;</span><br><span class="line">    tree[u]=tree[old];</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u].dep++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify_dep</span>(tree[old].ls,tree[u].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">modify_dep</span>(tree[old].rs,tree[u].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_fa</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> tree[u].fa;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_fa</span>(tree[u].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_fa</span>(tree[u].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_dep</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> tree[u].dep;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_dep</span>(tree[u].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_dep</span>(tree[u].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> ver,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx=<span class="built_in">query_fa</span>(root[ver],<span class="number">1</span>,n,x);</span><br><span class="line">    <span class="keyword">if</span>(fx==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(ver,fx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> ver,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(ver<span class="number">-1</span>,x);</span><br><span class="line">    y=<span class="built_in">find</span>(ver<span class="number">-1</span>,y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">        root[ver]=root[ver<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> depx=<span class="built_in">query_dep</span>(root[ver<span class="number">-1</span>],<span class="number">1</span>,n,x),depy=<span class="built_in">query_dep</span>(root[ver<span class="number">-1</span>],<span class="number">1</span>,n,y);</span><br><span class="line">    <span class="keyword">if</span>(depx&gt;depy)</span><br><span class="line">        <span class="built_in">Swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify_fa</span>(root[ver<span class="number">-1</span>],root[ver],<span class="number">1</span>,n,x,y);</span><br><span class="line">    <span class="keyword">if</span>(depx==depy)</span><br><span class="line">        <span class="built_in">modify_dep</span>(root[ver],root[ver],<span class="number">1</span>,n,y);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> opt,a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="built_in">build</span>(root[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(a,b);</span><br><span class="line">            <span class="built_in">merge</span>(i,a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(a);</span><br><span class="line">            root[i]=root[a];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">read</span>(a,b);</span><br><span class="line">            root[i]=root[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(i,a)==<span class="built_in">find</span>(i,b))</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="pa-2024-modernizacja-bajtocji"><a
href="https://www.luogu.com.cn/problem/P10350"
title="[PA 2024] Modernizacja Bajtocji">[PA 2024] Modernizacja
Bajtocji</a></h3>
<p>挺喜欢这道题，但出在模拟赛里我就不喜欢了。
显然需要维护连通块，连通块内出现环了就说明都有电脑了，连通块是树形的就无法确定。然而这里有一个删除操作。并查集不好进行删除，我们发现被删的点留在连通块内无影响，则考虑对每个人维护
<span class="math inline">\(id\)</span>，删除即为更新 <span
class="math inline">\(id\)</span>。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T &amp;a,T &amp;b)</span></span>&#123;</span><br><span class="line">    T c=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1.3e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> fa[N],siz[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,id[N],have[N],cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        fa[i]=i,siz[i]=<span class="number">1</span>,id[i]=i;</span><br><span class="line">    cnt=n;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;?&#x27;</span>)&#123;</span><br><span class="line">            cin&gt;&gt;a;</span><br><span class="line">            a=id[a];</span><br><span class="line">            <span class="type">int</span> p=<span class="built_in">find</span>(a);</span><br><span class="line">            <span class="keyword">if</span>(siz[p]==<span class="number">1</span>)</span><br><span class="line">                cout&lt;&lt;have[p];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(have[p])</span><br><span class="line">                cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            a=id[a],b=id[b];</span><br><span class="line">            <span class="type">int</span> p=<span class="built_in">find</span>(a),q=<span class="built_in">find</span>(b);</span><br><span class="line">            <span class="keyword">if</span>(p==q)</span><br><span class="line">                have[p]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fa[q]=p;</span><br><span class="line">                siz[p]+=siz[q];</span><br><span class="line">                have[p]|=have[q];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cin&gt;&gt;a;</span><br><span class="line">            <span class="type">int</span> a1=a;</span><br><span class="line">            a=id[a];</span><br><span class="line">            <span class="type">int</span> p=<span class="built_in">find</span>(a);</span><br><span class="line">            siz[p]--;</span><br><span class="line">            id[a1]=++cnt;</span><br><span class="line">            fa[cnt]=cnt;</span><br><span class="line">            siz[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="模板最长公共子序列"><a
href="https://www.luogu.com.cn/problem/P1439"
title="【模板】最长公共子序列">【模板】最长公共子序列</a></h3>
<p>好早以前欠的一道题，现在补上。 朴素 DP <span
class="math inline">\(O(n^2)\)</span>，但这题可以转化为求最长上升子序列。将序列
<span class="math inline">\(P_1\)</span> 视为是“有序的”，按照 <span
class="math inline">\(P_1\)</span> 的排序规则在 <span
class="math inline">\(P_2\)</span>
中求最长上升子序列，显然这就是答案。实现方面的话开个桶就行。
最长上升子序列 <span class="math inline">\(O(n\log n)\)</span> 求法： 设
<span class="math inline">\(dp_i\)</span> 表示到第 <span
class="math inline">\(i\)</span> 个数时的答案，<span
class="math inline">\(t_i\)</span> 表示 <span
class="math inline">\(dp_i\)</span> 对应的序列最大值，显然有 <span
class="math inline">\(dp_i=\max_{j&lt;i \land t_j&lt;b_i}
dp_j\)</span>，我们可以用树状数组维护前缀 <span
class="math inline">\(\max\)</span>，实现 <span
class="math inline">\(O(n\log n)\)</span> 的时间复杂度。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b?b:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],b[N],dp[N],ans;</span><br><span class="line"><span class="type">int</span> tree[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line">        tree[x]=<span class="built_in">Max</span>(tree[x],k);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x^=<span class="built_in">lowbit</span>(x))</span><br><span class="line">        res=<span class="built_in">Max</span>(tree[x],res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,t;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(t),a[t]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(b[i]);</span><br><span class="line">        dp[i]=<span class="built_in">query</span>(a[b[i]])<span class="number">+1</span>;</span><br><span class="line">        <span class="built_in">modify</span>(a[b[i]],dp[i]);</span><br><span class="line">        ans=<span class="built_in">Max</span>(ans,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="cqoi2017-小q的棋盘"><a
href="https://www.luogu.com.cn/problem/P3698"
title="[CQOI2017] 小Q的棋盘">[CQOI2017] 小Q的棋盘</a></h3>
<p>也是模拟赛的史，可以树形 DP，但我选择贪。
优先走最长链，如果还有剩余步数就需要每两步访问一个新节点。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?y:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">114</span>;</span><br><span class="line"><span class="type">int</span> v,n,maxdep;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> dep)</span></span>&#123;</span><br><span class="line">    maxdep=<span class="built_in">Max</span>(maxdep,dep);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u,dep<span class="number">+1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(v,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a,b;i&lt;v;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a,b);</span><br><span class="line">        a++,b++;</span><br><span class="line">        e[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        e[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=maxdep<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n<span class="number">+1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Min</span>(v,maxdep+(n-maxdep<span class="number">+1</span>)/<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="sza-cloakroom"><a href="https://www.luogu.com.cn/problem/P3537"
title="SZA-Cloakroom">SZA-Cloakroom</a></h3>
<p>很巧妙的一道 DP。显然可以将物品和询问离线下来分别按时间排序。设 <span
class="math inline">\(dp_k\)</span> 表示总价值为 <span
class="math inline">\(k\)</span> 的物品能拿走的最后的时间。转移 <span
class="math display">\[dp_k=\max(dp_k,\min(dp_k-c_j,b_j))\]</span>
表示新加入物品 <span class="math inline">\(j\)</span>，我们能否凑出
<span class="math inline">\(k\)</span>
决定于最早被取走的那个物品的时间，所以取 <span
class="math inline">\(\min\)</span>，而我们显然希望这个值越晚越好，所以取
<span class="math inline">\(\max\)</span>，则只要 <span
class="math inline">\(dp_k&gt;m_i+s_i\)</span> 就说明合法。 初始状态所有
<span class="math inline">\(dp\)</span> 均为 <span
class="math inline">\(-\inf\)</span>，表示均不合法。<span
class="math inline">\(dp_0\)</span> 为 <span
class="math inline">\(\inf\)</span> 表示不选任何物品总是可行的。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>,M=<span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> c,a,b;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;x.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">    <span class="type">int</span> m,k,s,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m&lt;x.m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[M];</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&lt;y?y:x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&lt;y?x:y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,p,dp[<span class="number">100010</span>],ans[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;t[i].c&gt;&gt;t[i].a&gt;&gt;t[i].b;</span><br><span class="line">    <span class="built_in">sort</span>(t<span class="number">+1</span>,t<span class="number">+1</span>+n);</span><br><span class="line">    cin&gt;&gt;p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">        cin&gt;&gt;q[i].m&gt;&gt;q[i].k&gt;&gt;q[i].s,q[i].id=i;</span><br><span class="line">    <span class="built_in">sort</span>(q<span class="number">+1</span>,q<span class="number">+1</span>+p);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=p;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(;t[j].a&lt;=q[i].m&amp;&amp;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">100000</span>;k&gt;=t[j].c;k--)</span><br><span class="line">                dp[k]=<span class="built_in">Max</span>(dp[k],<span class="built_in">Min</span>(dp[k-t[j].c],t[j].b));</span><br><span class="line">        ans[q[i].id]=dp[q[i].k]&gt;(q[i].m+q[i].s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">        <span class="built_in">printf</span>(ans[i]?<span class="string">&quot;TAK\n&quot;</span>:<span class="string">&quot;NIE\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="abc_288f"><a
href="https://atcoder.jp/contests/abc288/tasks/abc288_f"
title="abc_288f">abc_288f</a></h3>
<p>设 <span class="math inline">\(dp_i\)</span> 表示前 <span
class="math inline">\(i\)</span> 位的答案，有朴素的转移 <span
class="math display">\[dp_i=\sum_{j=1}^{i-1} dp_j\times
\overline{X_{j+1}X_{j+2}\cdots X_i}\]</span> 化简： <span
class="math display">\[dp_i=10\times dp_{i-1}+X_i+X_i\times
\sum_{j=1}^{i-1}dp_j\]</span> 可以维护前缀和实现 <span
class="math inline">\(O(n)\)</span>。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,x;</span><br><span class="line">ll sum,dp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %1d&quot;</span>,&amp;n,&amp;x);</span><br><span class="line">    dp=sum=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>,&amp;x);</span><br><span class="line">        dp=(dp*<span class="number">10</span>%mod+sum*x%mod+x)%mod;</span><br><span class="line">        sum=(sum+dp)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,dp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="小-a-和-uim-之大逃离"><a
href="https://www.luogu.com.cn/problem/P1373"
title="小 a 和 uim 之大逃离">小 a 和 uim 之大逃离</a></h3>
<p>我们事实上只关注二者的差，所以无需分别记录状态。<span
class="math inline">\(dp_{i,j,t,0/1}\)</span> 表示在 <span
class="math inline">\((i,j)\)</span>，二者之差为 <span
class="math inline">\(t\)</span>，当前应为小 a/uim
走。转移很朴素，看代码吧。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">810</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,a[N][N],dp[N][N][<span class="number">20</span>][<span class="number">2</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    k++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">            dp[i][j][a[i][j]%k][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;t&lt;=k;t++)&#123;</span><br><span class="line">                dp[i][j][t][<span class="number">0</span>]=(dp[i][j][t][<span class="number">0</span>]+dp[i<span class="number">-1</span>][j][(t-a[i][j]+k)%k][<span class="number">1</span>])%mod;</span><br><span class="line">                dp[i][j][t][<span class="number">0</span>]=(dp[i][j][t][<span class="number">0</span>]+dp[i][j<span class="number">-1</span>][(t-a[i][j]+k)%k][<span class="number">1</span>])%mod;</span><br><span class="line">                dp[i][j][t][<span class="number">1</span>]=(dp[i][j][t][<span class="number">1</span>]+dp[i<span class="number">-1</span>][j][(t+a[i][j])%k][<span class="number">0</span>])%mod;</span><br><span class="line">                dp[i][j][t][<span class="number">1</span>]=(dp[i][j][t][<span class="number">1</span>]+dp[i][j<span class="number">-1</span>][(t+a[i][j])%k][<span class="number">0</span>])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            ans=(ans+dp[i][j][<span class="number">0</span>][<span class="number">1</span>])%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="sdoi2010-地精部落"><a
href="https://www.luogu.com.cn/problem/P2467"
title="[SDOI2010] 地精部落">[SDOI2010] 地精部落</a></h3>
<p><span class="math inline">\(dp_{j,0/1}\)</span> 表示前 <span
class="math inline">\(i\)</span> 个数中最后一个是第 <span
class="math inline">\(j\)</span> 大的数的升/降序方案数。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4210</span>;</span><br><span class="line"><span class="type">int</span> n,p,dp[N][<span class="number">2</span>],sum[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p;</span><br><span class="line">    sum[<span class="number">1</span>][<span class="number">0</span>]=sum[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            dp[j][<span class="number">0</span>]=sum[j<span class="number">-1</span>][<span class="number">1</span>]%p;</span><br><span class="line">            dp[j][<span class="number">1</span>]=(sum[i<span class="number">-1</span>][<span class="number">0</span>]-sum[j<span class="number">-1</span>][<span class="number">0</span>]+p)%p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            sum[j][<span class="number">0</span>]=(dp[j][<span class="number">0</span>]+sum[j<span class="number">-1</span>][<span class="number">0</span>])%p;</span><br><span class="line">            sum[j][<span class="number">1</span>]=(dp[j][<span class="number">1</span>]+sum[j<span class="number">-1</span>][<span class="number">1</span>])%p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(sum[n][<span class="number">0</span>]+sum[n][<span class="number">1</span>])%p&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="scoi2009-游戏"><a href="https://www.luogu.com.cn/problem/P4161"
title="[SCOI2009] 游戏">[SCOI2009] 游戏</a></h3>
<p>神仙题，转化太难想了。观察题目给的实例，发现转化关系可分为 <span
class="math inline">\(3\)</span>
组，不难看出每组的周期应为该组内元素数量，总排数即为各组的元素数的 <span
class="math inline">\(\operatorname{lcm}\)</span> 再加 <span
class="math inline">\(1\)</span>。接下来想如何不重地枚举所有对应关系。考虑使用质因数分解。使用类似完全背包的写法，这样就保证了所有方案的枚举。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,prime[N],e[N],tot;</span><br><span class="line">ll dp[N],res;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e[i])</span><br><span class="line">            prime[e[i]=++tot]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=e[i]&amp;&amp;prime[j]*i&lt;=n;j++)</span><br><span class="line">            e[prime[j]*i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;=prime[i];j--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=prime[i];k&lt;=j;k*=prime[i])</span><br><span class="line">                dp[j]+=dp[j-k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        res+=dp[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res<span class="number">+1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="lnoi2019-真正的-oier-从不女装"><a
href="https://www.luogu.com.cn/problem/P5500"
title="[LnOI2019] 真正的 OIer 从不女装">[LnOI2019] 真正的 OIer
从不女装</a></h3>
<p>我们发现，女装只有零次和无数次。所以将 <span
class="math inline">\(k&gt;0\)</span> 的情况视为 <span
class="math inline">\(k=1\)</span>。线段树维护区间最长连续段、包含最左/右端最长连续段。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::max;</span><br><span class="line"><span class="keyword">using</span> std::min;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span>&#123;</span><br><span class="line">    <span class="type">int</span> maxn,maxl,maxr,tag,vall,valr,len;</span><br><span class="line">    <span class="built_in">Seg</span>(<span class="type">int</span> maxn=<span class="number">0</span>,<span class="type">int</span> maxl=<span class="number">0</span>,<span class="type">int</span> maxr=<span class="number">0</span>,<span class="type">int</span> tag=<span class="number">0</span>,<span class="type">int</span> vall=<span class="number">0</span>,<span class="type">int</span> valr=<span class="number">0</span>,<span class="type">int</span> len=<span class="number">0</span>):</span><br><span class="line">    <span class="built_in">maxn</span>(maxn),<span class="built_in">maxl</span>(maxl),<span class="built_in">maxr</span>(maxr),<span class="built_in">tag</span>(tag),<span class="built_in">vall</span>(vall),<span class="built_in">valr</span>(valr),<span class="built_in">len</span>(len)&#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Seg <span class="keyword">operator</span>+(<span class="type">const</span> Seg &amp;a,<span class="type">const</span> Seg &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a.len) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(!b.len) <span class="keyword">return</span> a;</span><br><span class="line">        Seg res;</span><br><span class="line">        res.maxn=<span class="built_in">max</span>(a.maxn,b.maxn);</span><br><span class="line">        res.maxl=a.maxl,res.maxr=b.maxr;</span><br><span class="line">        res.vall=a.vall,res.valr=b.valr;</span><br><span class="line">        res.len=a.len+b.len;</span><br><span class="line">        <span class="keyword">if</span>(a.valr==b.vall)&#123;</span><br><span class="line">            res.maxn=<span class="built_in">max</span>(res.maxn,a.maxr+b.maxl);</span><br><span class="line">            <span class="keyword">if</span>(a.maxl==a.len) res.maxl+=b.maxl;</span><br><span class="line">            <span class="keyword">if</span>(b.maxr==b.len) res.maxr+=a.maxr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="built_in">read</span>(val);</span><br><span class="line">        tree[u]=<span class="built_in">Seg</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,val,val,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    tree[u]=tree[ls]+tree[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[u].tag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> lenl=tree[ls].len,lenr=tree[rs].len,val=tree[u].tag;</span><br><span class="line">    tree[ls]=<span class="built_in">Seg</span>(lenl,lenl,lenl,val,val,val,lenl);</span><br><span class="line">    tree[rs]=<span class="built_in">Seg</span>(lenr,lenr,lenr,val,val,val,lenr);</span><br><span class="line">    tree[u].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        <span class="type">int</span> len=tree[u].len;</span><br><span class="line">        tree[u]=<span class="built_in">Seg</span>(len,len,len,k,k,k,len);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(ls,l,mid,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">    tree[u]=tree[ls]+tree[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Seg <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r) <span class="keyword">return</span> tree[u];</span><br><span class="line">    Seg res;</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) res=res+<span class="built_in">query</span>(ls,l,mid,x,y);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) res=res+<span class="built_in">query</span>(rs,mid<span class="number">+1</span>,r,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x,y,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(ch!=<span class="string">&#x27;R&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;Q&#x27;</span>) ch=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="built_in">read</span>(x,y,k);</span><br><span class="line">        <span class="keyword">if</span>(ch^<span class="string">&#x27;Q&#x27;</span>) <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y,k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y).maxn);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Seg temp=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line">            <span class="type">int</span> res=temp.maxn;</span><br><span class="line">            <span class="keyword">if</span>(temp.vall==temp.valr) res=<span class="built_in">max</span>(res,temp.maxl+temp.maxr);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">min</span>(res,temp.len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="noip-2004-提高组-合并果子-加强版"><a
href="https://www.luogu.com.cn/problem/P6033"
title="[NOIP 2004 提高组] 合并果子 加强版">[NOIP 2004 提高组] 合并果子
加强版</a></h3>
<p>传统做法中堆的 <span class="math inline">\(O(n\log n)\)</span>
复杂度太高了，我们使用两个队列，先桶排，然后按顺序插入队列 <span
class="math inline">\(q_1\)</span> 中，之后每合并一次就将结果插入队列
<span class="math inline">\(q_2\)</span> 中，容易发现，<span
class="math inline">\(q_1\)</span> 和 <span
class="math inline">\(q_2\)</span>
都具有单调性，所以每次只需从两个队列的队头取出 <span
class="math inline">\(2\)</span> 个最小的数即可。时间复杂度 <span
class="math inline">\(O(n)\)</span>。注意读入的常数。 使用这种思路，做
<a href="https://www.luogu.com.cn/problem/P2827"
title="[NOIP 2016 提高组] 蚯蚓">[NOIP 2016 提高组] 蚯蚓</a>。</p>
<details>
<summary>
code
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __linux__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> getchar getchar_unlocked</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a,b[M];</span><br><span class="line">queue&lt;ll&gt; q1,q2;</span><br><span class="line">ll sum;</span><br><span class="line"><span class="function">ll <span class="title">get_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q<span class="number">1.</span><span class="built_in">empty</span>())&#123;</span><br><span class="line">        ll x=q<span class="number">2.f</span>ront();</span><br><span class="line">        q<span class="number">2.</span><span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q<span class="number">2.</span><span class="built_in">empty</span>())&#123;</span><br><span class="line">        ll x=q<span class="number">1.f</span>ront();</span><br><span class="line">        q<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q<span class="number">1.f</span>ront()&lt;q<span class="number">2.f</span>ront())&#123;</span><br><span class="line">        ll x=q<span class="number">1.f</span>ront();</span><br><span class="line">        q<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    ll x=q<span class="number">2.f</span>ront();</span><br><span class="line">    q<span class="number">2.</span><span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(a),b[a]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1e5</span>;i++)</span><br><span class="line">        <span class="keyword">while</span>(b[i]--)</span><br><span class="line">            q<span class="number">1.</span><span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        ll x=<span class="built_in">get_min</span>(),y=<span class="built_in">get_min</span>();</span><br><span class="line">        q<span class="number">2.</span><span class="built_in">push</span>(x+y);</span><br><span class="line">        sum+=x+y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
<h3 id="多人背包"><a href="https://www.luogu.com.cn/problem/P1858"
title="多人背包">多人背包</a></h3>
<p>也是很久以前的题，之前好几次想写都觉得太抽象写不了，今天静下心来想一想其实并不难。
<span class="math inline">\(dp_{j,k}\)</span> 表示容量为 <span
class="math inline">\(j\)</span> 时的第 <span
class="math inline">\(k\)</span>
优解。我们直接双指针枚举选或不选当前物品，枚举出当前的前 <span
class="math inline">\(k\)</span>
优，将它们存入队列中然后直接转移。时间复杂度 <span
class="math inline">\(O(nvk)\)</span>，空间复杂度 <span
class="math inline">\(O(vk)\)</span>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> k,v,n,a[<span class="number">210</span>],b[<span class="number">210</span>],dp[<span class="number">5010</span>][<span class="number">60</span>],temp[<span class="number">60</span>];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;v&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=v;j&gt;=a[i];j--)&#123;</span><br><span class="line">            <span class="type">int</span> p1=<span class="number">1</span>,p2=<span class="number">1</span>,cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(cnt&lt;=k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j][p1]&gt;dp[j-a[i]][p2]+b[i])</span><br><span class="line">                    temp[++cnt]=dp[j][p1++];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    temp[++cnt]=dp[j-a[i]][p2++]+b[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">1</span>;t&lt;=k;t++)</span><br><span class="line">                dp[j][t]=temp[t];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">        ans+=dp[v][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>树链剖分</title>
    <url>/2025/07/04/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
    <content><![CDATA[<p>我们发现：在树上维护一些信息不方便我们套用一些数据结构，但树链剖分可以将树分割为若干条链。树链剖分的方式有很多种，在算法竞赛中，应用最广泛的是重链剖分。
一般使用线段树维护。 定义：
重子节点为当前节点的所有儿子中子树最大的子节点，从这个节点到重子节点的边叫做重边，重边相连构成重链。与之对应地，有轻子节点，轻边。
<img
src="https://github.com/headless-piston/blog_images/blob/main/heavy-light%20decomposition.png?raw=true"
alt="image" /></p>
<p>树链剖分的实现使用了 2 遍 dfs，分别记录了不同信息。 ### dfs1
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">	dep[u]=dep[f]<span class="number">+1</span>;<span class="comment">//深度 </span></span><br><span class="line">	siz[u]=<span class="number">1</span>;<span class="comment">//子树大小 </span></span><br><span class="line">	fa[u]=f;<span class="comment">//父节点 </span></span><br><span class="line">	<span class="type">int</span> maxson=<span class="number">-1</span>;<span class="comment">//子节点中最大的siz，也就是重儿子所对的siz </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v!=f)&#123;</span><br><span class="line">			<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			<span class="keyword">if</span>(siz[v]&gt;maxson)&#123;</span><br><span class="line">				son[u]=v;<span class="comment">//重儿子 </span></span><br><span class="line">				maxson=siz[v];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 这里，维护了每个节点的深度，父节点和子树大小最大的子节点。
### dfs2 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">	dfn[u]=++cnt;<span class="comment">//dfn序，也就是线段树上的编号 </span></span><br><span class="line">	top[u]=topf;<span class="comment">//当前树链的最顶端节点 </span></span><br><span class="line">	w1[cnt]=w[u];<span class="comment">//新的权值 </span></span><br><span class="line">	<span class="keyword">if</span>(!son[u])</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">dfs2</span>(son[u],topf);<span class="comment">//重儿子的处理 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v!=fa[u]&amp;&amp;v!=son[u])<span class="comment">//轻儿子的处理 </span></span><br><span class="line">			<span class="built_in">dfs2</span>(v,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 这里，维护了每个节点的
dfn，每个节点所在重链的链顶和使用 dfn 编号的点权。 使用 dfn 的原因是 dfn
可以保证同一子树内的点在一个连续的区间内，方便使用数据结构进行维护。</p>
<h3 id="查询操作">查询操作</h3>
<p>树链剖分完毕后，我们就可以借助数据结构求任意点 <span
class="math inline">\(x\)</span> 的子树的相关信息。
例如，查询子树所有节点权值之和。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//维护区间和的线段树</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[x]+siz[x]<span class="number">-1</span>));</span><br></pre></td></tr></table></figure> 可以证明，<span
class="math inline">\(x\)</span> 的子树所对的区间是 <span
class="math inline">\(x\)</span> 的 dfn 到 <span
class="math inline">\(x\)</span> 的 dfn 加 <span
class="math inline">\(x\)</span> 的子树大小减 <span
class="math inline">\(1\)</span>。</p>
<p>树链剖分还有一个强大的功能：求 LCA。
不断向上跳重链，当跳到同一条重链上时，深度较小的结点即为 LCA。
向上跳重链时需要先跳所在重链顶端深度较大的那个。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[top[u]]&gt;dep[top[v]])</span><br><span class="line">			u=fa[top[u]];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			v=fa[top[v]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[u]&gt;dep[v]?v:u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
类似地，我们就可以对任意点 <span class="math inline">\(x\)</span> 到
<span class="math inline">\(y\)</span> 路径上的点权进行查询和修改。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">tree_sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="comment">//x到y路径上的和 </span></span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">			std::<span class="built_in">swap</span>(x,y);</span><br><span class="line">		ans=(ans+<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[x]],dfn[x]))%p;</span><br><span class="line">		x=fa[top[x]];<span class="comment">//跳到链顶的父节点 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">		std::<span class="built_in">swap</span>(x,y);</span><br><span class="line">	ans=(ans+<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[y]))%p;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tree_add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;<span class="comment">//x到y最短路径上所有节点值加k </span></span><br><span class="line">	<span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">			std::<span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[x]],dfn[x],k);</span><br><span class="line">		x=fa[top[x]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">		std::<span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[y],k);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> *注：对 <span class="math inline">\(p\)</span>
取模是题目要求。</p>
<p>如果边权下放点权维护边信息，不想累加 LCA 处的贡献，可以这么写：
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res+=<span class="built_in">query</span>(dfn[top[x]],dfn[x]);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y) res+=<span class="built_in">query</span>(dfn[x]<span class="number">+1</span>,dfn[y]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>树链剖分的复杂度为 <span class="math inline">\(O(\log
n)\)</span>。而且一般情况下跑不满且常数极小。</p>
<p><a href="https://www.luogu.com.cn/problem/P3384"
title="模板">模板</a></p>
<p><a href="https://oi-wiki.org/graph/hld/"
title="参考资料">参考资料</a></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>概率与期望</title>
    <url>/2025/07/04/%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9B/</url>
    <content><![CDATA[<p>引入：一个普通骰子，求投出点数的期望。 <span
class="math display">\[E=\sum_i p_i w_i\]</span> 其中，<span
class="math inline">\(p_i\)</span> 表示事件 <span
class="math inline">\(i\)</span> 发生的概率，<span
class="math inline">\(w_i\)</span> 表示事件 <span
class="math inline">\(i\)</span> 发生的收益，<span
class="math inline">\(E\)</span> 为收益期望。 在这个题中，<span
class="math inline">\(E=\dfrac{1}{6}\times1+\dfrac{1}{6}\times2+\cdots+\dfrac{1}{6}\times6=3.5\)</span>。
### 期望的线性性 现有 <span class="math inline">\(3\)</span>
个骰子，求投一次这 <span class="math inline">\(3\)</span>
个骰子的点数之和的期望。对于本题，只要分别求出这 <span
class="math inline">\(3\)</span>
个骰子的期望并加起来就可以了。这就是期望的线性性。 <span
class="math display">\[E(x+y)=E(x)+E(y)\]</span> 若 <span
class="math inline">\(x\)</span> 和 <span
class="math inline">\(y\)</span> 相互独立，则 <span
class="math display">\[E(x)E(y)=E(xy)\]</span> 对于常数 <span
class="math inline">\(k\)</span> ，有 <span
class="math display">\[E(kx)=kE(x)\]</span> ### 解题方式
解决期望问题一般使用 DP 或高斯消元。 ### 例题 1 现有 <span
class="math inline">\(1\)</span> 个按钮，每按一次就会等概率返回 Yes 或
No，期望按多少次会返回 Yes？ 答案为 <span
class="math inline">\(2\)</span>。 考虑第一次返回 Yes 的概率为 <span
class="math inline">\(\dfrac{1}{2}\)</span>，第二次返回 Yes 的概率为
<span class="math inline">\(\dfrac{1}{4}\)</span>，第三次为 <span
class="math inline">\(\dfrac{1}{8}\)</span>…… 则 <span
class="math inline">\(E=\dfrac{1}{2}\times 1+\dfrac{1}{4}\times
2+\dfrac{1}{8}\times 3+\cdots=2\)</span>。 ### 例题 2 有 <span
class="math inline">\(n\)</span>
种不同的邮票，想收集所有种类的邮票，每次只能买一张，且买到任何一种邮票是等概率的，为
<span class="math inline">\(\dfrac{1}{n}\)</span>。每次购买花费 <span
class="math inline">\(1\)</span>
元钱。现手中没有邮票，求买到所有种类邮票所花费钱数的期望。 考虑 DP。设
<span class="math inline">\(f_x\)</span> 表示已集齐 <span
class="math inline">\(x\)</span> 张时的期望次数。对于第 <span
class="math inline">\(i\)</span> 次购买，有 <span
class="math inline">\(\dfrac{i}{n}\)</span> 的概率买重，<span
class="math inline">\(\dfrac{n-i}{n}\)</span> 的概率不重。 <span
class="math display">\[f_i=1+f_i\times \dfrac{i}{n}+f_{i+1}\times
\dfrac{n-i}{n}\]</span> 化简，得 <span
class="math display">\[f_{i+1}=\dfrac{n}{n-i}-f_i\]</span> ### 例题 3 有
<span class="math inline">\(n\)</span> 个奖品，<span
class="math inline">\(m\)</span>
个人排队选礼物。对于每个人，他打开的盒子可能有礼物，也可能已经被之前的人取走。如果有礼物，取走礼物并放回盒子。求所有人期望取走多少个礼物。
考虑 DP。设 <span class="math inline">\(f_i\)</span> 表示前 <span
class="math inline">\(i\)</span> 个人取走礼物个数的期望，则有 <span
class="math display">\[f_1=1,f_i=f_{i-1}+\dfrac{n-f_{i-1}}{n}\]</span>
或者考虑 <span class="math inline">\(1\)</span> 个礼物被拿走的概率，用
<span class="math inline">\(n\)</span>
乘上它即为答案。一个礼物被一个人拿走的概率为 <span
class="math inline">\(\dfrac{n-1}{n}\)</span>，进行 <span
class="math inline">\(m\)</span> 轮，为 <span
class="math inline">\((\dfrac{n-1}{n})^m\)</span>，则答案为 <span
class="math inline">\(n\times [1-{(\dfrac{n-1}{n})}^m]\)</span>。 ### <a
href="https://www.luogu.com.cn/problem/P1654" title="例题 4">例题 4</a>
假设第 <span class="math inline">\(i\)</span> 位之前有 <span
class="math inline">\(q\)</span> 个连续 <span
class="math inline">\(1\)</span>，则这个位置的贡献为 <span
class="math inline">\((q+1)^3-q^3=3q^2+3q+1\)</span>。 所以我们需要维护
<span class="math inline">\(q\)</span> 和 <span
class="math inline">\(q^2\)</span> 的期望。 <span
class="math display">\[E_i(q)=p_i(E_{i-1}(q)+1)\]</span> <span
class="math display">\[E_i(q^2)=p_i(E_{i-1}(q^2)+2E_{i-1}(q)+1)\]</span>
总式子 <span
class="math display">\[f_i=f_{i-1}+p_i(3E_{i-1}(q^2)+3E_{i-1}(q)+1)\]</span>
已经很详细了就不放代码了。 ### <a
href="https://www.luogu.com.cn/problem/P1850" title="例题 5">例题 5</a>
解决任意两个教室之间的体力消耗最小值，容易想到最短路算法，因本题需要多次查询不同两点间的最短路且
<span class="math inline">\(v\)</span> 较小，考虑使用 Floyd。 之后就是
DP，对每种情况进行分类讨论，设 <span
class="math inline">\(f_{i,j,0/1}\)</span> 表示对于前 <span
class="math inline">\(i\)</span> 门课，选择了 <span
class="math inline">\(j\)</span> 门，最后选择的那门课否/是更换。<span
class="math inline">\(dis_{u,v}\)</span> 表示 <span
class="math inline">\(u\)</span> 和 <span
class="math inline">\(v\)</span> 两点之间的最短路。 那么进行分类讨论
对于 <span
class="math inline">\(f_{i,j,0}\)</span>，若其之前的换了，则有 <span
class="math inline">\(f_{i-1,j,1}+k_{i-1}\times
dis_{d_{i-1},c_i}\)</span>（换成功的期望）<span
class="math inline">\(+(1-k_{i-1})\times
dis_{c_{i-1},c_i}\)</span>（换失败的期望），若之前的没换，则有 <span
class="math inline">\(f_{i-1,j,0}+dis_{c_{i-1},c_i}\)</span>（二者都不换）。
对于 <span class="math inline">\(f_{i,j,1}\)</span>，情况复杂些 -
之前的不换 - 当前换成功 <span class="math inline">\(k_i\times
dis_{c_{i-1},d_i}\)</span> - 当前换失败 <span
class="math inline">\((1-k_i)\times dis_{c_{i-1},c_i}\)</span> -
之前的换 - 之前与当前均成功 <span class="math inline">\(k_{i-1}\times
k_i\times dis_{d_{i-1},d_i}\)</span> - 之前与当前均失败 <span
class="math inline">\((1-k_{i-1})\times (1-k_i)\times
dis_{c_{i-1},c_i}\)</span> - 之前成功当前失败 <span
class="math inline">\(k_{i-1}\times (1-k_i)\times
dis_{d_{i-1},c_i}\)</span> - 之前失败当前成功 <span
class="math inline">\((1-k_{i-1})\times k_i\times
dis_{c_{i-1},d_i}\)</span> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2010</span>,M=<span class="number">90010</span>;</span><br><span class="line"><span class="type">int</span> n,m,v,e;</span><br><span class="line"><span class="type">int</span> c[N],d[N],edge[<span class="number">310</span>][<span class="number">310</span>];</span><br><span class="line"><span class="type">double</span> k[N],dp[<span class="number">2010</span>][<span class="number">2010</span>][<span class="number">2</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(edge,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(edge));</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;v,&amp;e);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">			dp[i][j][<span class="number">0</span>]=dp[i][j][<span class="number">1</span>]=<span class="number">1145141919810</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,c+i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,d+i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,k+i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=e;i++)&#123;</span><br><span class="line">		<span class="type">int</span> a,b,w;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;w);</span><br><span class="line">		edge[a][b]=<span class="built_in">min</span>(edge[a][b],w);</span><br><span class="line">		edge[b][a]=<span class="built_in">min</span>(edge[b][a],w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=v;i++)</span><br><span class="line">		edge[i][i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> k1=<span class="number">1</span>;k1&lt;=v;k1++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=v;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=v;j++)</span><br><span class="line">				edge[i][j]=<span class="built_in">min</span>(edge[i][j],edge[i][k1]+edge[k1][j]);</span><br><span class="line">	dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">			dp[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j][<span class="number">1</span>]+k[i<span class="number">-1</span>]*edge[d[i<span class="number">-1</span>]][c[i]]+</span><br><span class="line">								(<span class="number">1</span>-k[i<span class="number">-1</span>])*edge[c[i<span class="number">-1</span>]][c[i]],</span><br><span class="line">							dp[i<span class="number">-1</span>][j][<span class="number">0</span>]+edge[c[i<span class="number">-1</span>]][c[i]]);</span><br><span class="line">			<span class="keyword">if</span>(j)&#123;</span><br><span class="line">				dp[i][j][<span class="number">1</span>]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">1</span>]+k[i<span class="number">-1</span>]*k[i]*edge[d[i<span class="number">-1</span>]][d[i]]+</span><br><span class="line">									k[i<span class="number">-1</span>]*(<span class="number">1</span>-k[i])*edge[d[i<span class="number">-1</span>]][c[i]]+</span><br><span class="line">									(<span class="number">1</span>-k[i<span class="number">-1</span>])*k[i]*edge[c[i<span class="number">-1</span>]][d[i]]+</span><br><span class="line">									(<span class="number">1</span>-k[i<span class="number">-1</span>])*(<span class="number">1</span>-k[i])*edge[c[i<span class="number">-1</span>]][c[i]],</span><br><span class="line">								dp[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>]+k[i]*edge[c[i<span class="number">-1</span>]][d[i]]+</span><br><span class="line">									(<span class="number">1</span>-k[i])*edge[c[i<span class="number">-1</span>]][c[i]]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	ans=<span class="number">1145141919810</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,<span class="built_in">min</span>(dp[n][i][<span class="number">0</span>],dp[n][i][<span class="number">1</span>]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### <a
href="https://www.luogu.com.cn/problem/P1297" title="例题 6">例题 6</a>
考虑第 <span class="math inline">\(i\)</span> 道题和第 <span
class="math inline">\(i+1\)</span> 道题。 若 <span
class="math inline">\(a_i=a_{i+1}\)</span>，则本题期望显然为 <span
class="math inline">\(\dfrac{1}{a_i}=\dfrac{1}{a_{i+1}}\)</span>。 若
<span class="math inline">\(a_i&gt;a_{i+1}\)</span>，则 <span
class="math inline">\(a_i\)</span> 的答案在 <span
class="math inline">\(a_{i+1}\)</span> 范围内的概率为 <span
class="math inline">\(\dfrac{a_{i+1}}{a_i}\)</span>，期望为 <span
class="math inline">\(\dfrac{a_{i+1}}{a_i}\times
\dfrac{1}{a_{i+1}}=\dfrac{1}{a_i}\)</span>。 若 <span
class="math inline">\(a_i&lt;a_{i+1}\)</span>，正确答案在 <span
class="math inline">\(a_{i}\)</span> 范围内的概率为 <span
class="math inline">\(\dfrac{a_i}{a_{i+1}}\)</span>，期望为 <span
class="math inline">\(\dfrac{a_i}{a_{i+1}}\times
\dfrac{1}{a_i}=\dfrac{1}{a_{i+1}}\)</span>。 综上，第 <span
class="math inline">\(i\)</span> 道题的期望为 <span
class="math inline">\(\dfrac{1}{\max(a_i,a_{i+1})}\)</span>。求出每题期望累加即可。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>]=a[n];<span class="comment">//第一项的上一个是第n项</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	ans+=<span class="number">1.0</span>/<span class="built_in">max</span>(a[i<span class="number">-1</span>],a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf&quot;</span>,ans);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>珂朵莉树·颜色段均摊</title>
    <url>/2025/07/04/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91%C2%B7%E9%A2%9C%E8%89%B2%E6%AE%B5%E5%9D%87%E6%91%8A/</url>
    <content><![CDATA[<p>这玩意名字也是真多，珂朵莉树，ODT（Old Driver
Tree），颜色段均摊都是它。其实我觉得硬说这是一种数据结构（尤其是“树”）是不恰当的，这更多应该是一种技巧。
与线段树等传统数据结构的区别在于：它可以更方便地维护每个被覆盖区间的值。如模板题中的操作
4：求 <span class="math inline">\(\sum_{i=l}^ra_i^x\bmod y\)</span>。
我很喜欢这个东西，它比线段树好写且在随机数据下表现十分优异。 ### 实现
一般用 <code>std::set</code> 实现。似乎用链表可以省下一个 <span
class="math inline">\(\log\)</span>？不过能用到 ODT
的题应该不差这点时间。 #### 节点 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> l,<span class="type">int</span> r=<span class="number">0</span>,<span class="type">int</span> val=<span class="number">0</span>):<span class="built_in">l</span>(l),<span class="built_in">r</span>(r),<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;x.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;node&gt; odt;</span><br></pre></td></tr></table></figure> <span
class="math inline">\(l\)</span> 和 <span
class="math inline">\(r\)</span> 表示这一段的区间，<span
class="math inline">\(val\)</span> 表示这一段的权值，使用
<code>mutable</code> 修饰是为了使得结构体或函数在被 <code>const</code>
修饰后仍能修改 <span class="math inline">\(val\)</span>
的值，这样，我们就可以直接修改在 <code>set</code> 内部的元素的 <span
class="math inline">\(val\)</span>。 #### split 用于将一个区间为 <span
class="math inline">\([l,r]\)</span> 的区间分裂为 <span
class="math inline">\([l,pos)\)</span> 和 <span
class="math inline">\([pos,r]\)</span>，并返回指向后者的迭代器的函数。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it=odt.<span class="built_in">lower_bound</span>(<span class="built_in">node</span>(pos));</span><br><span class="line">    <span class="keyword">if</span>(it!=odt.<span class="built_in">end</span>()&amp;&amp;it-&gt;l==pos)</span><br><span class="line">        <span class="keyword">return</span> it;<span class="comment">//pos已是左端点，无需分割</span></span><br><span class="line">    it--;<span class="comment">//从上一个分割</span></span><br><span class="line">    <span class="type">int</span> l=it-&gt;l,r=it-&gt;r,val=it-&gt;val;</span><br><span class="line">    odt.<span class="built_in">erase</span>(it);<span class="comment">//删除原区间</span></span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(l,pos<span class="number">-1</span>,val));<span class="comment">//左区间</span></span><br><span class="line">    <span class="keyword">return</span> odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(pos,r,val)).first;<span class="comment">//右区间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <code>std::set::insert()</code> 返回一个
<code>std::pair&lt;iterator,bool&gt;</code>，表示插入元素的迭代器及插入是否成功。
现代编译器应当都可以将 <code>auto</code> 识别为
<code>std::set&lt;node&gt;::iterator</code>。 #### assign
用于区间赋值。同时也是时间复杂度的保证，以模板题为例，大约 <span
class="math inline">\(\dfrac{1}{4}\)</span> 的操作调用了
<code>assign</code>，而这个操作可以大幅减小 <code>set</code> 的大小。
<strong>特别注意：在截取 <span class="math inline">\([l,r]\)</span>
时一定要先调用 <code>split(r+1)</code> 再调用
<code>split(l)</code>，否则可能导致 RE。</strong> 具体原因可以看<a
href="https://oi-wiki.org/misc/odt/#assign-%E6%93%8D%E4%BD%9C"
title="这里">这里</a>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r<span class="number">+1</span>),itl=<span class="built_in">split</span>(l);<span class="comment">//截取[l,r]</span></span><br><span class="line">    odt.<span class="built_in">erase</span>(itl,itr);<span class="comment">//删除[l,r]</span></span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(l,r,val));<span class="comment">//插入新值</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### <a
href="https://codeforces.com/problemset/problem/896/C"
title="模板题">模板题</a> 对于 1 操作，3 操作和 4
操作，直接分离出对应区间后暴力求解。2 操作直接用 <code>assign</code>。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="keyword">mutable</span> ll val;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> l,<span class="type">int</span> r=<span class="number">0</span>,ll val=<span class="number">0</span>):<span class="built_in">l</span>(l),<span class="built_in">r</span>(r),<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;x.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    a%=mod;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">            res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;node&gt; odt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it=odt.<span class="built_in">lower_bound</span>(<span class="built_in">node</span>(pos));</span><br><span class="line">    <span class="keyword">if</span>(it!=odt.<span class="built_in">end</span>()&amp;&amp;it-&gt;l==pos)</span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    it--;</span><br><span class="line">    <span class="type">int</span> l=it-&gt;l,r=it-&gt;r;</span><br><span class="line">    ll val=it-&gt;val;</span><br><span class="line">    odt.<span class="built_in">erase</span>(it);</span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(l,pos<span class="number">-1</span>,val));</span><br><span class="line">    <span class="keyword">return</span> odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(pos,r,val)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=(<span class="built_in">split</span>(r<span class="number">+1</span>)),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    odt.<span class="built_in">erase</span>(itl,itr);</span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(l,r,val));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r<span class="number">+1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    <span class="keyword">for</span>(;itl!=itr;itl++)</span><br><span class="line">        itl-&gt;val+=val;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">kth</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r<span class="number">+1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    vector&lt;pair&lt;ll,<span class="type">int</span>&gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(;itl!=itr;itl++)</span><br><span class="line">        b.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(itl-&gt;val,itl-&gt;r-itl-&gt;l<span class="number">+1</span>));</span><br><span class="line">    <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:b)&#123;</span><br><span class="line">        k-=t.second;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> t.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r<span class="number">+1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    <span class="keyword">for</span>(;itl!=itr;itl++)</span><br><span class="line">        res=(res+(<span class="built_in">qpow</span>(itl-&gt;val,x,mod)*(itl-&gt;r-itl-&gt;l<span class="number">+1</span>))%mod)%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,seed,vmax,a[N],op,x,y,l,r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rnd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=seed;</span><br><span class="line">    seed=(seed*<span class="number">7ll</span><span class="number">+13</span>)%<span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;seed&gt;&gt;vmax;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i]=(<span class="built_in">rnd</span>()%vmax)<span class="number">+1</span>;</span><br><span class="line">        odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(i,i,a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        op=(<span class="built_in">rnd</span>()%<span class="number">4</span>)<span class="number">+1</span>;</span><br><span class="line">        l=(<span class="built_in">rnd</span>()%n)<span class="number">+1</span>;</span><br><span class="line">        r=(<span class="built_in">rnd</span>()%n)<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">            <span class="built_in">swap</span>(l,r);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">            x=(<span class="built_in">rnd</span>()%(r-l<span class="number">+1</span>))<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x=(<span class="built_in">rnd</span>()%vmax)<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>)</span><br><span class="line">            y=(<span class="built_in">rnd</span>()%vmax)<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">add</span>(l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">assign</span>(l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">            cout&lt;&lt;<span class="built_in">kth</span>(l,r,x)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="built_in">sum</span>(l,r,x,y)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <del>十年 OI 一场空，不开 long long 见祖宗。</del> ###
复杂度分析
我们可以从模板题中发现，这玩意除区间赋值外都需要暴力，所以是一种暴力数据结构。对于模板题，均摊时间复杂度
<span class="math inline">\(O(m\log
n)\)</span>。其时间复杂度保证完全依赖于
<code>assign</code>，所以仅适用于数据随机生成且带区间赋值操作的题。比如区间染色问题。
### 参考资料 https://oi-wiki.org/misc/odt/</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数入门</title>
    <url>/2025/07/04/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="矩阵">矩阵</h3>
<h4 id="运算法则">运算法则</h4>
<h5 id="加法">加法</h5>
<p>两个矩阵 <span class="math inline">\(A\)</span> 和 <span
class="math inline">\(B\)</span> 相加，要求它们的维度相同。结果矩阵
<span class="math inline">\(C=A+B\)</span> 的每个元素是 <span
class="math inline">\(A\)</span> 和 <span
class="math inline">\(B\)</span> 对应元素的和。<span
class="math inline">\(C_{i,j}=A_{i,j}+B_{i,j}\)</span> ##### 数乘 矩阵
<span class="math inline">\(A\)</span> 与标量 <span
class="math inline">\(k\)</span> 相乘，结果矩阵 <span
class="math inline">\(B=kA\)</span> 的每个元素是 <span
class="math inline">\(A\)</span> 的对应元素乘以 <span
class="math inline">\(k\)</span>。<span
class="math inline">\(B_{i,j}=k\cdot A_{i,j}\)</span> ##### 乘法 矩阵
<span class="math inline">\(A\)</span> 与矩阵 <span
class="math inline">\(B\)</span> 相乘，要求 <span
class="math inline">\(A\)</span> 的列数等于 <span
class="math inline">\(B\)</span> 的行数。结果矩阵 <span
class="math inline">\(C=AB\)</span> 的每个元素是 <span
class="math inline">\(A\)</span> 的行向量与 <span
class="math inline">\(B\)</span> 的列向量的点积。<span
class="math inline">\(C_{i,j}=\sum_{k=1}^nA_{i,k}\cdot B_{k,j}\)</span>
<strong>注意：矩阵乘法不满足交换律</strong> #### 矩阵快速幂
其实和普通快速幂几乎一样。 我们要使用单位矩阵 <span
class="math display">\[I=\begin{bmatrix}
1&amp;0&amp;\cdots&amp;0\\
0&amp;1&amp;\cdots&amp;0\\
\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\
0&amp;0&amp;\cdots&amp;1
\end{bmatrix}\]</span>
作为初始矩阵。因为它乘任何矩阵还得跟它乘的那个矩阵，类似于 <span
class="math inline">\(1\)</span> 在普通快速幂中的作用。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line">	<span class="built_in">matrix</span>()&#123;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">	&#125;</span><br><span class="line">	matrix <span class="keyword">operator</span>*(<span class="type">const</span> matrix &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">		matrix res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">					res.a[i][j]=(res.a[i][j]+a[i][k]*b.a[k][j]%mod)%mod;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;ans,base,a;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		base.a[i][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix a,<span class="type">long</span> <span class="type">long</span> b)</span></span>&#123;</span><br><span class="line">	matrix res=base;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">			res=res*a;</span><br><span class="line">		a=a*a;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a.a[i][j]);</span><br><span class="line">	ans=<span class="built_in">qpow</span>(a,k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans.a[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
#### 矩阵加速线性递推 例如斐波那契数列，<span
class="math inline">\(F_1=F_2=1\)</span>，<span
class="math inline">\(F_i=F_{i-1}+F_{i-2}\)</span>，矩阵递推形式为 <span
class="math display">\[\begin{bmatrix}F_{n-1}&amp;F_{n-2}\end{bmatrix}
\begin{bmatrix}1&amp;1\\
1&amp;0\end{bmatrix}=
\begin{bmatrix}F_n&amp;F_{n-1}\end{bmatrix}\]</span> 则 <span
class="math inline">\(F_n\)</span> 就是 <span
class="math inline">\(\begin{bmatrix}1&amp;1\end{bmatrix}\begin{bmatrix}1&amp;1\\1&amp;0\end{bmatrix}^{n-2}\)</span>
的第一行第一列的元素。用矩阵快速幂即可。</p>
<h3 id="高斯消元">高斯消元</h3>
<p>现有线性方程组 <span
class="math display">\[\begin{cases}a_{1,1}x_1+a_{1,2}x_2+\cdots+a_{1,n}x_n=b_1\\
a_{2,1}x_1+a_{2,2}x_2+\cdots+a_{2,n}x_n=b_2\\
\cdots\\
a_{n,1}x_1+a_{n,2}x_2+\cdots+a_{n,n}x_n=b_n
\end{cases}\]</span> 求解该方程组。 为了方便起见，我们用矩阵表示方程组：
<span
class="math display">\[\left[\begin{matrix}a_{1,1}&amp;a_{1,2}&amp;a_{1,3}&amp;\cdots&amp;a_{1,n}\\
a_{2,1}&amp;a_{2,2}&amp;a_{2,3}&amp;\cdots&amp;a_{2,n}\\
a_{3,1}&amp;a_{3,2}&amp;a_{3,3}&amp;\cdots&amp;a_{3,n}\\
\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\
a_{n,1}&amp;a_{n,2}&amp;a_{n,3}&amp;\cdots&amp;a_{n,n}
\end{matrix}\middle|
\begin{matrix}
b_{1}\\
b_{2}\\
b_{3}\\
\vdots\\
b_{n}
\end{matrix}\right]\]</span> 首先消去除 <span
class="math inline">\(1\)</span> 式以外所有式子中的 <span
class="math inline">\(x_1\)</span>，然后消去除 <span
class="math inline">\(1\)</span> 式和 <span
class="math inline">\(2\)</span> 式外所有式子中的 <span
class="math inline">\(x_2\)</span>……最后式子变为一个三角形的结构 <span
class="math display">\[\left[\begin{matrix}a_{1,1}&#39;&amp;a_{1,2}&#39;&amp;a_{1,3}&#39;&amp;\cdots&amp;a_{1,n}&#39;\\
0&amp;a_{2,2}&#39;&amp;a_{2,3}&#39;&amp;\cdots&amp;a_{2,n}&#39;\\
0&amp;0&amp;a_{3,3}&#39;&amp;\cdots&amp;a_{3,n}&#39;\\
\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\
0&amp;0&amp;0&amp;\cdots&amp;a_{n,n}&#39;
\end{matrix}\middle|
\begin{matrix}
b_{1}&#39;\\
b_{2}&#39;\\
b_{3}&#39;\\
\vdots\\
b_{n}&#39;
\end{matrix}\right]\]</span> 之后再一点点代回求解，时间复杂度 <span
class="math inline">\(O(n^3)\)</span>。 对于无解的判断：某一行前 <span
class="math inline">\(n\)</span> 个数均为 <span
class="math inline">\(0\)</span>，最后的结果却不为 <span
class="math inline">\(0\)</span>。 对于无数解的判断：某一行 <span
class="math inline">\(n+1\)</span> 个数均为 <span
class="math inline">\(0\)</span>。 <a
href="https://www.luogu.com.cn/problem/P3389" title="模板">模板</a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="type">int</span> r=i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[r][i])&lt;<span class="built_in">fabs</span>(matrix[j][i]))</span><br><span class="line">			r=j;<span class="comment">//寻找主元 </span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[r][i])&lt;eps)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;No Solution&quot;</span>);<span class="comment">//若主元为0，方程组无解或无穷多解 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i!=r)</span><br><span class="line">		<span class="built_in">swap</span>(matrix[i],matrix[r]);</span><br><span class="line">	<span class="type">double</span> div=matrix[i][i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n<span class="number">+1</span>;j++)</span><br><span class="line">		matrix[i][j]/=div;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">		div=matrix[j][i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=n<span class="number">+1</span>;k++)</span><br><span class="line">			matrix[j][k]-=matrix[i][k]*div;</span><br><span class="line">	&#125;<span class="comment">//消元</span></span><br><span class="line">&#125;</span><br><span class="line">ans[n]=matrix[n][n<span class="number">+1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i;i--)&#123;</span><br><span class="line">	ans[i]=matrix[i][n<span class="number">+1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">		ans[i]-=matrix[i][j]*ans[j];</span><br><span class="line">&#125;<span class="comment">//回代</span></span><br></pre></td></tr></table></figure> <a href="https://www.luogu.com.cn/problem/P2455"
title="加强版">加强版</a> <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="type">int</span> pivot=rank1<span class="number">+1</span>;<span class="comment">//rank1为矩阵的秩 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=rank1<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[pivot][i])&lt;<span class="built_in">fabs</span>(matrix[j][i]))</span><br><span class="line">			pivot=j;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[pivot][i])&lt;eps)</span><br><span class="line">		<span class="keyword">continue</span>;<span class="comment">//全为零</span></span><br><span class="line">	<span class="keyword">if</span>(pivot!=rank1<span class="number">+1</span>)</span><br><span class="line">		<span class="built_in">swap</span>(matrix[pivot],matrix[rank1<span class="number">+1</span>]);</span><br><span class="line">	<span class="type">double</span> div=matrix[rank1<span class="number">+1</span>][i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n<span class="number">+1</span>;j++)</span><br><span class="line">		matrix[rank1<span class="number">+1</span>][j]/=div;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(j==rank1<span class="number">+1</span>||<span class="built_in">fabs</span>(matrix[j][i])&lt;eps)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		div=matrix[j][i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=n<span class="number">+1</span>;k++)</span><br><span class="line">			matrix[j][k]-=matrix[rank1<span class="number">+1</span>][k]*div;</span><br><span class="line">	&#125;<span class="comment">//消元</span></span><br><span class="line">	rank1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=rank1<span class="number">+1</span>;i&lt;=n;i++)</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[i][n<span class="number">+1</span>])&gt;eps)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//无解</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">if</span>(rank1&lt;n)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//无数解</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--)&#123;</span><br><span class="line">	ans[i]=matrix[i][n<span class="number">+1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">		ans[i]-=matrix[i][j]*ans[j];</span><br><span class="line">&#125;<span class="comment">//回代</span></span><br></pre></td></tr></table></figure> ### 高斯-约旦消元 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,line=<span class="number">1</span>,cur;i&lt;=n;i++)&#123;</span><br><span class="line">    cur=line;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=line<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[j][i])&gt;<span class="built_in">fabs</span>(a[cur][i]))</span><br><span class="line">            cur=j;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[cur][i])&lt;eps) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">double</span> temp=a[cur][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n<span class="number">+1</span>;j++)</span><br><span class="line">        <span class="built_in">swap</span>(a[cur][j],a[line][j]),a[line][j]/=temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        <span class="keyword">if</span>(j!=line)&#123;</span><br><span class="line">            temp=a[j][i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n<span class="number">+1</span>;k++)</span><br><span class="line">                a[j][k]-=a[line][k]*temp;</span><br><span class="line">        &#125;</span><br><span class="line">    ++line;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
### 线性基 引入：有 <span class="math inline">\(n\)</span>
个数，选出其中任意一些数，求其异或和，一共有多少种可能的异或值。 ####
性质 1. 原序列里面的任意一个数都可以表示为线性基的一个子集的异或和。 1.
线性基任意一个子集的异或和都不能等于 <span
class="math inline">\(0\)</span>。 1.
线性基里面的数的个数唯一，并且在保持性质 1 的前提下，数的个数是最少的。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LBase</span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> d[<span class="number">61</span>];</span><br><span class="line">	<span class="built_in">LBase</span>()&#123;</span><br><span class="line">		<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x&amp;<span class="number">1ll</span>&lt;&lt;i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(d[i])</span><br><span class="line">					x^=d[i];</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					d[i]=x;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query_max</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> x=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			<span class="keyword">if</span>(d[i]&amp;&amp;(x^d[i])&gt;x)</span><br><span class="line">				x^=d[i];</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">const</span> LBase &amp;a)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			<span class="keyword">if</span>(a.d[i])</span><br><span class="line">				<span class="built_in">insert</span>(a.d[i]);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>组合</title>
    <url>/2025/07/04/%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<h3 id="排列组合的定义">排列组合的定义</h3>
<h4 id="排列">排列</h4>
<p>从 <span class="math inline">\(n\)</span> 个不同元素中，任取 <span
class="math inline">\(m\)</span>
个不同的元素按照一定的顺序排成一列，所有可能的情况种数叫做排列数，记作
<span class="math inline">\(A_n^m\)</span>。 <span
class="math display">\[A_n^m=\frac{n!}{(n-m)!}\]</span> #### 组合 从
<span class="math inline">\(n\)</span> 个不同元素中，任取 <span
class="math inline">\(m\)</span>
个元素并成一组，所有可能的情况种数叫做组合数，记作 <span
class="math inline">\(C_n^m\)</span>，也记作 <span
class="math inline">\(\dbinom{n}{m}\)</span> <span
class="math display">\[C_n^m=\binom{n}{m}=\frac{A_n^m}{m!}=\frac{n!}{m!(n-m)!}\]</span>
对于二者的区别最直观的理解就前者考虑顺序，而后者不考虑。 #### 加法原理
做一件事，完成它可以有 <span class="math inline">\(n\)</span>
类方法，在第一类方法中有 <span class="math inline">\(m_1\)</span>
种不同方法，在第二类方法中有 <span class="math inline">\(m_2\)</span>
种不同方法，……，在第 <span class="math inline">\(n\)</span> 类方法中有
<span class="math inline">\(m_n\)</span> 种不同方法，那么完成这件事共有
<span class="math inline">\(\sum_{i=1}^n m_i\)</span> 种不同的方法。
#### 乘法原理 做一件事，完成它需要分成 <span
class="math inline">\(n\)</span> 个步骤，做第一步有 <span
class="math inline">\(m_1\)</span> 种不同的方法，做第二步有 <span
class="math inline">\(m_2\)</span> 种不同的方法，……，做第 <span
class="math inline">\(n\)</span> 步有 <span
class="math inline">\(m_n\)</span> 种不同的方法。那么完成这件事共有
<span class="math inline">\(\prod_{i=1}^n m_i\)</span> 种不同的方法。
### 二项式定理 <span
class="math display">\[(a+b)^n=\sum_{i=0}^n\binom{n}{i}a^ib^{n-i}\]</span>
变形： <span
class="math display">\[(a-b)^n=\sum_{i=0}^n(-1)^{n-i}\binom{n}{i}a^ib^{n-i}\]</span>
<span
class="math display">\[\frac{(a+b)^n+(a-b)^n}{2}=\sum_{i为偶数}^n\binom{n}{i}a^{n-i}b^i\]</span>
性质： -
杨辉三角与二项式系数有对应关系，所以根据杨辉三角的性质，我们可以得到递推关系：<span
class="math inline">\(\dbinom{n}{k}=\dbinom{n-1}{k}+\dbinom{n-1}{k-1}\)</span>。
- 在 <span class="math inline">\(n\)</span> 个里面选 <span
class="math inline">\(k\)</span> 个，就相当于不选 <span
class="math inline">\(n-k\)</span> 个，这与选 <span
class="math inline">\(n-k\)</span> 个相等，<span
class="math inline">\(\dbinom{n}{k}=\dbinom{n}{n-k}\)</span>。 - 令
<span class="math inline">\(a=b=1\)</span>，<span
class="math inline">\(2^n=\sum_{i=0}^n\dbinom{n}{i}\)</span>。 - <span
class="math inline">\(\sum_{i为奇数}\dbinom{n}{i}=\sum_{i为偶数}\dbinom{n}{i}=2^{n-1}\)</span>
### 快速计算组合数的方法 - 预处理逆元，定义法计算 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		fact[i]=fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">	inv_fact[n]=<span class="built_in">qpow</span>(fact[n],mod<span class="number">-2</span>,mod);<span class="comment">//费马小定理，当然也可以用其他方式</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">		inv_fact[i]=inv_fact[i<span class="number">+1</span>]*(i<span class="number">+1</span>)%mod;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">comb</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fact[n]*inv_fact[k]%mod*inv_fact[n-k]%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> -
将杨辉三角打表 - 模数较小的时候使用 Lucas 定理和 exLucas 定理 Lucas 定理
<span class="math inline">\(\dbinom{n}{k}=\dbinom{n\bmod p}{k\bmod
p}\times
\dbinom{\lfloor\frac{n}{p}\rfloor}{\lfloor\frac{k}{p}\rfloor}\)</span>，可以持续展开。<strong>注意，<span
class="math inline">\(p\)</span> 必须是质数</strong>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">	a%=mod;</span><br><span class="line">	<span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">			res=res*a%mod;</span><br><span class="line">		a=a*a%mod;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(m&gt;n)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(m&gt;n-m)</span><br><span class="line">		m=n-m;</span><br><span class="line">	<span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		a=(a*(n-i))%p;</span><br><span class="line">		b=(b*(i<span class="number">+1</span>))%p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> a*<span class="built_in">qpow</span>(b,p<span class="number">-2</span>,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lucas</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">lucas</span>(n/p,m/p,p)*<span class="built_in">C</span>(n%p,m%p,p)%p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ###
范德蒙德卷积 <span
class="math display">\[\sum_{i=0}^k\binom{n}{i}\binom{m}{k-i}=\binom{n+m}{k}\]</span>
组合意义：在一个大小为 <span class="math inline">\(n+m\)</span>
的集合中取出 <span class="math inline">\(k\)</span>
个数，可以等于把大小为 <span class="math inline">\(n+m\)</span>
的集合拆成两个集合，大小分别为 <span class="math inline">\(n\)</span> 与
<span class="math inline">\(m\)</span>，然后从 <span
class="math inline">\(n\)</span> 中取出 <span
class="math inline">\(i\)</span> 个数，从 <span
class="math inline">\(m\)</span> 中取出 <span
class="math inline">\(k-i\)</span> 个数的方案数。由于我们有了对于 <span
class="math inline">\(i\)</span>
的枚举，于是只需要考虑一种拆法，因为不同的拆法之间是等价的。 变式： -
<span
class="math inline">\(\sum_{i=1}^n\dbinom{n}{i}\dbinom{n}{n-1}=\dbinom{2n}{n-1}\)</span>
- <span
class="math inline">\(\sum_{i=0}^n{\dbinom{n}{i}}^2=\dbinom{2n}{n}\)</span>
- <span
class="math inline">\(\sum_{i=0}^m\dbinom{n}{i}\dbinom{m}{i}=\dbinom{n+m}{m}\)</span>
### 隔板法 模型一：将 <span class="math inline">\(n\)</span>
个相同苹果放入 <span class="math inline">\(m\)</span>
个不同的箱子里的方案数（可以限制是否为空）。 考虑箱子里至少放 <span
class="math inline">\(1\)</span> 个苹果的情况，将这 <span
class="math inline">\(n\)</span> 个苹果排成一列，形成 <span
class="math inline">\(n-1\)</span> 个空隙，在这 <span
class="math inline">\(n-1\)</span> 个空隙中插入 <span
class="math inline">\(m-1\)</span> 个板子，就形成了一种解。所以解为
<span class="math inline">\(\dbinom{n-1}{m-1}\)</span>。
箱子可以为空时解为 <span
class="math inline">\(\dbinom{n-1+m}{m-1}\)</span>，假设每个箱子里多出了一个虚拟苹果，我们就又回到了刚才的问题。
模型二：求方程 <span class="math inline">\(x_1+x_2+\cdots+x_m=n\)</span>
的正整数解或自然数解的方案数。 变式：上式中 <span
class="math inline">\(=\)</span> 变为 <span
class="math inline">\(\le\)</span> 或 <span
class="math inline">\(&lt;\)</span>，我们可以虚拟一个 <span
class="math inline">\(x_0\)</span> 令其加上后面的 <span
class="math inline">\(x\)</span> 等于 <span
class="math inline">\(n\)</span>。 ### 一些模型 #### 可重组合 有 <span
class="math inline">\(m\)</span> 种球，每种球足够多，<span
class="math inline">\(n\)</span>
个相同的盒子，一种球可以用多次，把盒子塞满，有多少种方案？<span
class="math display">\[\binom{m+n-1}{m}\]</span> #### 不相邻组合 有
<span class="math inline">\(m\)</span> 个球，<span
class="math inline">\(n\)</span>
个盒子，选出的球不能相邻，有多少种组合方式？<span
class="math display">\[\binom{n-m+1}{m}\]</span> #### 格路模型
从坐标原点走到 <span
class="math inline">\((n,m)\)</span>，每次只能向右或向上移动，方案数是<span
class="math display">\[\binom{n+m}{n}=\binom{n+m}{m}\]</span> ###
容斥原理 引入：有 <span class="math inline">\(n\)</span> 个人，都参加过
WC、CTSC 和 APIO。问拿过至少一个比赛金牌的有多少人。 首先我们定义 <span
class="math inline">\(3\)</span> 个集合 <span
class="math inline">\(A\)</span>，<span
class="math inline">\(B\)</span>，<span
class="math inline">\(C\)</span>，分别表示在这三个比赛中拿过金牌的人，显然我们可以画出
Venn 图 <img
src="https://github.com/headless-piston/blog_images/blob/main/inclusion-exclusion.png?raw=true"
alt="image" /> 首先，我们把 <span
class="math inline">\(A\)</span>，<span
class="math inline">\(B\)</span>，<span class="math inline">\(C\)</span>
的元素数相加，显然多算了集合之间的交集，然后我们减去 <span
class="math inline">\(A\cap B\)</span>，<span
class="math inline">\(B\cap C\)</span>，<span
class="math inline">\(A\cap C\)</span> 的元素数，我们发现多减了 <span
class="math inline">\(A\cap B\cap C\)</span>，再把它加回去，
总的式子就是<span class="math display">\[|A\cup B\cup
C|=|A|+|B|+|C|-|A\cap B|-|B\cap C|-|A\cap C|+|A\cap B\cap C|\]</span>
将这个规律推广，也类似这样一加一减交替，这就是容斥原理。 ### 斯特林数
#### 第二类斯特林数 表示将 <span class="math inline">\(n\)</span>
个两两不同的元素，划分为 <span class="math inline">\(k\)</span>
个互不区分的非空子集的方案数。记作 <span
class="math inline">\(S(n,k)\)</span>， 递推式 <span
class="math display">\[S(n,k)=S(n−1,k−1)+k⋅S(n−1,k)\]</span> 边界条件：
- <span
class="math inline">\(S(n,n)=1\)</span>（每个元素单独成一个子集）。 -
<span
class="math inline">\(S(n,1)=1\)</span>（所有元素放在一个子集中）。 -
<span class="math inline">\(S(n,k)=0\)</span> 当 <span
class="math inline">\(k&gt;n\)</span> 或 <span
class="math inline">\(k=0\)</span> 且 <span
class="math inline">\(n&gt;0\)</span>。 #### 第一类斯特林数 示将 <span
class="math inline">\(n\)</span> 个两两不同的元素，划分为 <span
class="math inline">\(k\)</span> 个互不区分的非空轮换的方案数。记作
<span class="math inline">\(s(n,k)\)</span>，递推式 <span
class="math display">\[s(n,k)=s(n−1,k−1)+(n−1)⋅s(n−1,k)\]</span>
边界条件； - <span
class="math inline">\(s(n,n)=1\)</span>（每个元素单独成一个轮换）。 -
<span
class="math inline">\(s(n,1)=(n-1)!\)</span>（所有元素放在一个轮换中）。
- <span class="math inline">\(s(n,0)=0\)</span> 当 <span
class="math inline">\(n&gt;0\)</span>。 ### 卡特兰数 -
一个栈（无穷大）的进栈序列为 <span class="math inline">\(1,2,3, \cdots
,n\)</span> 有多少个不同的出栈序列？ - 有一个大小为 <span
class="math inline">\(n\times n\)</span> 的方格图左下角为 <span
class="math inline">\((0, 0)\)</span> 右上角为 <span
class="math inline">\((n,
n)\)</span>，从左下角开始每次都只能向右或者向上走一单位，不走到对角线
<span class="math inline">\(y=x\)</span>
上方（但可以触碰）的情况下到达右上角有多少可能的路径？ - 由 <span
class="math inline">\(n\)</span> 对括号组成的合法序列的数量。</p>
<p>这些问题的答案都是卡特兰数列 <span
class="math inline">\(H_n\)</span>。 公式： <span
class="math display">\[H_n=\frac{\binom{2n}{n}}{n+1}\]</span> <span
class="math display">\[H_n=\binom{2n}{n}-\binom{2n}{n-1}\]</span> 边界：
<span
class="math display">\[H_0=H_1=1,H_2=2,H_3=5,H_4=14,\cdots\]</span></p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流</title>
    <url>/2025/07/04/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
    <content><![CDATA[<h3 id="定义">定义</h3>
<p>网络是有向图的一种，不同于其他有向图，一个网络有两个特殊的点<strong>源点（一般记作
<span
class="math inline">\(s\)</span>）</strong>和<strong>汇点（一般记作
<span
class="math inline">\(t\)</span>）</strong>，顾名思义，源点只有出边而汇点只有入边。同时，每条边有边权
<span
class="math inline">\(c\)</span>，表示<strong>容量</strong>，同时还映射一个值
<span
class="math inline">\(flow\)</span>，叫做<strong>流量</strong>。一种容易的理解方式是将边想象成不同大小的管道。值得注意的是，流量可以为负，这一般表示反向流动以及在一些算法中对先前流量分配的“撤销”。
残量网络：将容量已满的边删去，剩下的边构成的图就是残量网络。
增广路：从源点到汇点的一条路径，其中每条边都有剩余容量。 ### 最大流问题
对于一个网络，找到最大的流量。 ### 最小割问题
我们将网络上的一些边进行分割，使之分为两部分，一部分包含 <span
class="math inline">\(s\)</span>，另一部分包含 <span
class="math inline">\(t\)</span>，所有切割的边的容量和叫做网络的最小割。
例：现有网络</p>
<figure>
<img
src="https://github.com/headless-piston/blog_images/blob/main/network-flows_1.png?raw=true"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>其最小割为</p>
<figure>
<img
src="https://github.com/headless-piston/blog_images/blob/main/network-flows_2.png?raw=true"
alt="image" />
<figcaption aria-hidden="true">image</figcaption>
</figure>
<p>即 <span class="math inline">\(3=2+1\)</span>。 ### 最大流最小割定理
对于一个网络，最大流总等于最小割。这个定理看似显然，实则并不好证。<a
href="https://oi-wiki.org/graph/flow/max-flow/#%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2%E5%AE%9A%E7%90%86"
title="证明">证明</a>。</p>
<hr />
<p>接下来以<a href="https://www.luogu.com.cn/problem/P3376"
title="最大流模板题">最大流模板题</a>为例讲解一些算法。 ### Edmonds-Karp
算法 流程： - 从 <span class="math inline">\(s\)</span> 出发进行 BFS
尝试走到 <span class="math inline">\(t\)</span>，即寻找增广路。 -
找到增广路后计算增广路上剩余容量的最小值 <span
class="math inline">\(f\)</span>，给增广路上每条边加上 <span
class="math inline">\(f\)</span> 容量，并将它们的反向边退掉 <span
class="math inline">\(f\)</span> 容量。 -
在新图上重复以上操作直到增广路不存在。</p>
<p>时间复杂度 <span class="math inline">\(O(nm^2)\)</span>。
关于反向边，有个小技巧，就是直接将正反两边的编号设为 <span
class="math inline">\(2n\)</span> 和 <span
class="math inline">\(2n+1\)</span>，这样可以通过异或 <span
class="math inline">\(1\)</span> 的操作快速完成正反边的转换。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">210</span>,M=<span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> head[N],tot=<span class="number">1</span>;<span class="comment">//因为要异或1所以初始化为1</span></span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="type">int</span> pre[N];<span class="comment">//路径的前驱节点</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> flow[N];<span class="comment">//各边剩余容量最小值</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> c;<span class="comment">//剩余容量</span></span><br><span class="line">&#125;e[M*<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> flag[N][N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">long</span> <span class="type">long</span> c)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].c=c;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	head[u]=tot;<span class="comment">//正向边</span></span><br><span class="line">	e[++tot].to=u;</span><br><span class="line">	e[tot].c=<span class="number">0</span>;</span><br><span class="line">	e[tot].nxt=head[v];</span><br><span class="line">	head[v]=tot;<span class="comment">//反向边</span></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="built_in">sizeof</span>(pre));</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(s);</span><br><span class="line">	pre[s]=s;</span><br><span class="line">	flow[s]=inf;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(e[i].c==<span class="number">0</span>||pre[v])</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			flow[v]=<span class="built_in">min</span>(flow[u],e[i].c);</span><br><span class="line">			pre[v]=i;</span><br><span class="line">			q.<span class="built_in">push</span>(v);</span><br><span class="line">			<span class="keyword">if</span>(v==t)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> u,v;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> w;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">		<span class="keyword">if</span>(!flag[u][v])&#123;<span class="comment">//去重边</span></span><br><span class="line">			<span class="built_in">add_edge</span>(u,v,w);</span><br><span class="line">			flag[u][v]=tot;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			e[flag[u][v]^<span class="number">1</span>].c+=w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u=t;u!=s;u=e[pre[u]^<span class="number">1</span>].to)&#123;</span><br><span class="line">			e[pre[u]].c-=flow[t];</span><br><span class="line">			e[pre[u]^<span class="number">1</span>].c+=flow[t];</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=flow[t];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### Dinic 算法 个人认为这个更难理解一些。 流程： -
在残量网络中进行 BFS 构建分层图。 - 使用 DFS，每次找到 <span
class="math inline">\(t\)</span> 后直接回溯更新边权。</p>
<p>使用分层图的原因是因为分层图是 DAG，进行 DFS
时不会走回头路或环路，保证了算法的正确性和高效性。 时间复杂度 <span
class="math inline">\(O(n^2m)\)</span>，优于 Edmonds-Karp 算法。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">210</span>,M=<span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,t,tot=<span class="number">1</span>,head[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> c;</span><br><span class="line">&#125;e[M*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">long</span> <span class="type">long</span> c)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].c=c;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	head[u]=tot;</span><br><span class="line">	e[++tot].to=u;</span><br><span class="line">	e[tot].c=<span class="number">0</span>;</span><br><span class="line">	e[tot].nxt=head[v];</span><br><span class="line">	head[v]=tot;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> level[N];<span class="comment">//层级</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(level,<span class="number">-1</span>,<span class="built_in">sizeof</span>(level));</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(s);</span><br><span class="line">	level[s]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(e[i].c==<span class="number">0</span>||level[v]!=<span class="number">-1</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			level[v]=level[u]<span class="number">+1</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> level[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">long</span> <span class="type">long</span> flow)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u==t)</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(e[i].c==<span class="number">0</span>||level[v]!=level[u]<span class="number">+1</span>)<span class="comment">//按层dfs</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> temp=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(flow-res,e[i].c));</span><br><span class="line">		e[i].c-=temp;</span><br><span class="line">		e[i^<span class="number">1</span>].c+=temp;</span><br><span class="line">		res+=temp;</span><br><span class="line">		<span class="keyword">if</span>(res==flow)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(res==<span class="number">0</span>)</span><br><span class="line">		level[u]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> u,v,w;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">		<span class="built_in">add_edge</span>(u,v,w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 优化：当前弧优化。减少 DFS
对边的重复检查。若某边剩余容量已为 <span
class="math inline">\(0\)</span>，则不再处理这条边。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="type">int</span> cur[N];<span class="comment">//当前弧优化</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">long</span> <span class="type">long</span> flow)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u==t)</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=cur[u];i;i=e[i].nxt)&#123;</span><br><span class="line">		cur[u]=i;<span class="comment">//当前弧优化</span></span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(e[i].c==<span class="number">0</span>||level[v]!=level[u]<span class="number">+1</span>)<span class="comment">//按层dfs</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> temp=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(flow-res,e[i].c));</span><br><span class="line">		e[i].c-=temp;</span><br><span class="line">		e[i^<span class="number">1</span>].c+=temp;</span><br><span class="line">		res+=temp;</span><br><span class="line">		<span class="keyword">if</span>(res==flow)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(res==<span class="number">0</span>)</span><br><span class="line">		level[u]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">	<span class="built_in">memcpy</span>(cur,head,<span class="built_in">sizeof</span>(head));<span class="comment">//重置当前弧</span></span><br><span class="line">	ans+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure> ###
最小费用最大流
费用流定义：对于一个网络的每条边，我们再加一个边权称为一个单位流量的费用，记作
<span class="math inline">\(w(u,v)\)</span>，则这条边的费用为 <span
class="math inline">\(f(u,v)\times
w(u,v)\)</span>。与上文中提到的反向边回退流量相同，费用也可以这样操作。
与普通最大流问题不同，最小费用最大流的求解过程不用 BFS
而用最短路算法寻找增广路，这样就保证了最小费用。 这里给出 Edmonds-Karp +
SPFA 的做法。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e3</span><span class="number">+10</span>,M=<span class="number">5e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt,c,w;</span><br><span class="line">&#125;e[M*<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> tot=<span class="number">1</span>,head[N],n,m,s,t;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	e[tot].c=c;</span><br><span class="line">	e[tot].w=w;</span><br><span class="line">	head[u]=tot;</span><br><span class="line">	e[++tot].to=u;</span><br><span class="line">	e[tot].nxt=head[v];</span><br><span class="line">	e[tot].c=<span class="number">0</span>;</span><br><span class="line">	e[tot].w=-w;</span><br><span class="line">	head[v]=tot;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> min_flow[N],dis[N],pre[N],flow,cost;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">	<span class="built_in">memset</span>(min_flow,<span class="number">0</span>,<span class="built_in">sizeof</span>(min_flow));</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">	q.<span class="built_in">push</span>(s);</span><br><span class="line">	vis[s]=<span class="number">1</span>;</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	min_flow[s]=<span class="number">2e9</span>;</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		vis[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to,c=e[i].c,w=e[i].w;</span><br><span class="line">			<span class="keyword">if</span>(c&amp;&amp;dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">				dis[v]=dis[u]+w;</span><br><span class="line">				pre[v]=i;</span><br><span class="line">				min_flow[v]=<span class="built_in">min</span>(min_flow[u],c);</span><br><span class="line">				<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">					vis[v]=<span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> min_flow[t]&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> u,v,c,w;</span><br><span class="line">		cin&gt;&gt;u&gt;&gt;v&gt;&gt;c&gt;&gt;w;</span><br><span class="line">		<span class="built_in">add_edge</span>(u,v,c,w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">spfa</span>())&#123;</span><br><span class="line">		<span class="type">int</span> minf=min_flow[t];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=t;i!=s;i=e[pre[i]^<span class="number">1</span>].to)&#123;</span><br><span class="line">			e[pre[i]].c-=minf;</span><br><span class="line">			e[pre[i]^<span class="number">1</span>].c+=minf;</span><br><span class="line">		&#125;</span><br><span class="line">		flow+=minf;</span><br><span class="line">		cost+=minf*dis[t];</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;flow&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;cost;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 网络流建模 <a
href="https://www.luogu.com.cn/problem/P3356" title="例题">例题</a></p>
<p>考虑拆点。将点 <span class="math inline">\((x,y)\)</span> 拆为 <span
class="math inline">\((x,y)_1\)</span> 和 <span
class="math inline">\((x,y)_2\)</span>。 对于 <span
class="math inline">\(0\)</span>（平坦无障碍），建 <span
class="math inline">\((x,y)_1\to(x,y)_2\)</span>，容量 <span
class="math inline">\(inf\)</span>，费用 <span
class="math inline">\(0\)</span>，表示可以无限通过但无收益。同时，建
<span class="math inline">\((x,y)_2\to(x+1,y)_1\)</span> 和 <span
class="math inline">\((x,y)_2\to(x,y+1)_1\)</span>，容量与费用同上，表示向南和向东走。
对于 <span class="math inline">\(1\)</span>（障碍），不建立节点。 对于
<span class="math inline">\(2\)</span>（石块），先建 <span
class="math inline">\(0\)</span>（平坦无障碍）的 <span
class="math inline">\(3\)</span> 条边，然后再建一条 <span
class="math inline">\((x,y)_1\to(x,y)_2\)</span>，容量 <span
class="math inline">\(1\)</span>，费用 <span
class="math inline">\(1\)</span>，表示只能走 <span
class="math inline">\(1\)</span> 次且贡献为 <span
class="math inline">\(1\)</span>。 然后跑最大费用最大流就可以了。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 2e9</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">35</span>*<span class="number">35</span>*<span class="number">2</span><span class="number">+10</span>,M=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> p,q,nodecnt,node[N][N],tot=<span class="number">1</span>,head[N],n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt,c,w;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	e[tot].c=c;</span><br><span class="line">	e[tot].w=w;</span><br><span class="line">	head[u]=tot;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	<span class="built_in">add_edge1</span>(u,v,c,w);</span><br><span class="line">	<span class="built_in">add_edge1</span>(v,u,<span class="number">0</span>,-w);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> pre[N],dis[N],s,t,flow[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">memset</span>(flow,<span class="number">0</span>,<span class="built_in">sizeof</span>(flow));</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	vis[s]=<span class="number">1</span>;</span><br><span class="line">	flow[s]=inf;</span><br><span class="line">	que.<span class="built_in">push</span>(s);</span><br><span class="line">	<span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=que.<span class="built_in">front</span>();</span><br><span class="line">		que.<span class="built_in">pop</span>();</span><br><span class="line">		vis[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to,c=e[i].c,w=e[i].w;</span><br><span class="line">			<span class="keyword">if</span>(c&amp;&amp;dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">				dis[v]=dis[u]+w;</span><br><span class="line">				pre[v]=i;</span><br><span class="line">				flow[v]=<span class="built_in">min</span>(flow[u],c);</span><br><span class="line">				<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">					vis[v]=<span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow[t]&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;p&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</span><br><span class="line">			node[i][j]=++nodecnt;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,c;i&lt;=q;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=p;j++)&#123;</span><br><span class="line">			cin&gt;&gt;c;</span><br><span class="line">			<span class="keyword">if</span>(c==<span class="number">1</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">add_edge</span>(node[i][j],node[i][j]+nodecnt,inf,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(c==<span class="number">2</span>)</span><br><span class="line">				<span class="built_in">add_edge</span>(node[i][j],node[i][j]+nodecnt,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">if</span>(i&lt;q)</span><br><span class="line">				<span class="built_in">add_edge</span>(node[i][j]+nodecnt,node[i<span class="number">+1</span>][j],inf,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(j&lt;p)</span><br><span class="line">				<span class="built_in">add_edge</span>(node[i][j]+nodecnt,node[i][j<span class="number">+1</span>],inf,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	s=<span class="number">0</span>,t=nodecnt*<span class="number">2</span><span class="number">+1</span>;</span><br><span class="line">	<span class="built_in">add_edge</span>(s,node[<span class="number">1</span>][<span class="number">1</span>],n,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">add_edge</span>(node[q][p]+nodecnt,t,n,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">spfa</span>())&#123;</span><br><span class="line">		<span class="type">int</span> minf=flow[t];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=t,cnt=<span class="number">0</span>;i!=s;i=e[pre[i]^<span class="number">1</span>].to,cnt++)&#123;</span><br><span class="line">			e[pre[i]].c-=minf;</span><br><span class="line">			e[pre[i]^<span class="number">1</span>].c+=minf;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=head[node[i][j]];k;k=e[k].nxt)&#123;</span><br><span class="line">				<span class="type">int</span> v=e[k].to;</span><br><span class="line">				<span class="keyword">if</span>(v==node[i][j]+nodecnt)</span><br><span class="line">					cnt[i][j]+=e[k^<span class="number">1</span>].c;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="type">int</span> x=<span class="number">1</span>,y=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(x!=q||y!=p)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cnt[x<span class="number">+1</span>][y])&#123;</span><br><span class="line">				cout&lt;&lt;i&lt;&lt;<span class="string">&quot; 0\n&quot;</span>;</span><br><span class="line">				cnt[x<span class="number">+1</span>][y]--;</span><br><span class="line">				x++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				cout&lt;&lt;i&lt;&lt;<span class="string">&quot; 1\n&quot;</span>;</span><br><span class="line">				cnt[x][y<span class="number">+1</span>]--;</span><br><span class="line">				y++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 其他 参考资料：</p>
<p><a href="https://oi-wiki.org/graph/flow/max-flow/" title="OI Wiki">OI
Wiki</a></p>
<p><a href="https://www.luogu.com.cn/article/ei4nw9cm"
title="题解 P3376 【【模板】网络最大流】">题解 P3376
【【模板】网络最大流】</a></p>
<p><a href="https://www.luogu.com.cn/article/k6hmo167"
title="【题解】P3356 火星探险问题">【题解】P3356 火星探险问题</a></p>
]]></content>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>自我介绍</title>
    <url>/2025/07/04/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>HE 高二 OIer。没实力还爱狗叫。贺题解高手。文化课菜逼。
<strong>我真不是二次元！</strong></p>
<hr />
<p>Welcome to my blog!<br />
欢迎大家阅读文章，如文章有错误之处请联系我进行修正。</p>
]]></content>
  </entry>
  <entry>
    <title>莫队</title>
    <url>/2025/07/04/%E8%8E%AB%E9%98%9F/</url>
    <content><![CDATA[<h3 id="引入">引入</h3>
<p>莫队的实现依赖于离线，将查询操作记录下来并按一定规则排序，然后使用双指针暴力求解答案，是一种<strong>优雅的暴力</strong>。
关于离线思想，可以做<a href="https://www.luogu.com.cn/problem/P1972"
title="这一道题">这一道题</a>体验一下。<del>（但是这题卡莫队）</del> ###
例题 所以看这题的<a href="https://www.luogu.com.cn/problem/SP3267"
title="弱化版">弱化版</a>。
莫队的关键在于优化了暴力枚举的顺序，联系分块思想，将长度为 <span
class="math inline">\(n\)</span> 的原序列分成长为 <span
class="math inline">\(\sqrt{n}\)</span>
的块，以<strong>区间左端点所在的块的编号</strong>为第一关键字，<strong>区间右端点</strong>为第二关键字升序排序。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,id;</span><br><span class="line">&#125;query[M];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Query x,Query y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> belong[x.l]==belong[y.l]?x.r&lt;y.r:belong[x.l]&lt;belong[y.l];</span><br><span class="line">&#125;<span class="comment">//一定注意左端点要belong[]而右端点不用</span></span><br></pre></td></tr></table></figure> 对答案的获取，我们每次从区间 <span
class="math inline">\([l,r]\)</span> 移动到 <span
class="math inline">\([l-1,r]\)</span>，<span
class="math inline">\([l+1,r]\)</span>，<span
class="math inline">\([l,r-1]\)</span> 和 <span
class="math inline">\([l,r+1]\)</span>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b[a[x]])</span><br><span class="line">        now++;</span><br><span class="line">    b[a[x]]++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    b[a[x]]--;</span><br><span class="line">    <span class="keyword">if</span>(!b[a[x]])</span><br><span class="line">        now--;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">l=<span class="number">1</span>,r=<span class="number">0</span>,now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">    <span class="keyword">while</span>(r&lt;query[i].r)</span><br><span class="line">        <span class="built_in">add</span>(++r);</span><br><span class="line">    <span class="keyword">while</span>(r&gt;query[i].r)</span><br><span class="line">        <span class="built_in">del</span>(r--);</span><br><span class="line">    <span class="keyword">while</span>(l&lt;query[i].l)</span><br><span class="line">        <span class="built_in">del</span>(l++);</span><br><span class="line">    <span class="keyword">while</span>(l&gt;query[i].l)</span><br><span class="line">        <span class="built_in">add</span>(--l);</span><br><span class="line">    ans[query[i].id]=now;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
易错点：一定注意自增自减符的位置，对于 add 操作应写在前面，而 delete
操作应写在后面。<br />
<strong>注意：一定要先写右指针的移动，不然对于一些特殊的题目容易死掉。比如<a
href="https://www.luogu.com.cn/problem/P12598">这道题</a>。</strong><br />
时间复杂度 <span class="math inline">\(O(n\sqrt
n)\)</span>。每次查询左指针在块内最多移动 <span
class="math inline">\(O(\sqrt n)\)</span>，总体 <span
class="math inline">\(O(q\cdot\sqrt n)\)</span>，每个块内右指针最多移动
<span class="math inline">\(O(n)\)</span>，总体 <span
class="math inline">\(O(n\cdot\sqrt n)\)</span>，总时间复杂度 <span
class="math inline">\(O(q\cdot\sqrt{n}+n\cdot\sqrt{n})\)</span>，<span
class="math inline">\(q\)</span> 与 <span
class="math inline">\(n\)</span> 同阶，故总时间复杂度 <span
class="math inline">\(O(n\sqrt n)\)</span>。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">30010</span>,M=<span class="number">200010</span>,MAXN=<span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],ans[M],b[MAXN],q,belong[N],block,l,r,now;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,id;</span><br><span class="line">&#125;query[M];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Query x,Query y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> belong[x.l]==belong[y.l]?x.r&lt;y.r:belong[x.l]&lt;belong[y.l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b[a[x]])</span><br><span class="line">        now++;</span><br><span class="line">    b[a[x]]++;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    b[a[x]]--;</span><br><span class="line">    <span class="keyword">if</span>(!b[a[x]])</span><br><span class="line">        now--;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">    block=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        belong[i]=(i<span class="number">-1</span>)/block<span class="number">+1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;query[i].l,&amp;query[i].r);</span><br><span class="line">        query[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(query<span class="number">+1</span>,query<span class="number">+1</span>+q,cmp);</span><br><span class="line">    l=<span class="number">1</span>,r=<span class="number">0</span>,now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;query[i].r)</span><br><span class="line">            <span class="built_in">add</span>(++r);</span><br><span class="line">        <span class="keyword">while</span>(r&gt;query[i].r)</span><br><span class="line">            <span class="built_in">del</span>(r--);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;query[i].l)</span><br><span class="line">            <span class="built_in">del</span>(l++);</span><br><span class="line">        <span class="keyword">while</span>(l&gt;query[i].l)</span><br><span class="line">            <span class="built_in">add</span>(--l);</span><br><span class="line">        ans[query[i].id]=now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 优化
奇偶排序优化。<br />
与普通莫队排序区别是：对于左端点在一个块内的时候，若在奇块内，则右端点升序排序，反之则降序排序。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Query x,Query y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(belong[x.l]!=belong[y.l])</span><br><span class="line">        <span class="keyword">return</span> belong[x.l]&lt;belong[y.l];</span><br><span class="line">    <span class="keyword">return</span> (belong[x.l]&amp;<span class="number">1</span>)?(x.r&lt;y.r):(x.r&gt;y.r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 理论大约能减少 <span class="math inline">\(30\%\)</span>
的指针移动次数。
我们考虑奇块因为右端点升序，到达块末尾时右指针应当较为靠后，而偶数块是降序，起始右指针也较为靠后，偶块转奇块同理，体现了一种“自然衔接”。<br />
可以看看模板题：<a
href="https://www.luogu.com.cn/problem/P1494">[国家集训队] 小 Z
的袜子</a><br />
设区间 <span class="math inline">\([l,r]\)</span> 中某颜色袜子数为 <span
class="math inline">\(x_i\)</span>，则选出两只这种袜子的概率为 <span
class="math display">\[\frac{x_i}{r-l+1}\cdot \frac{x_i-1}{r-l}\]</span>
则对于所有 <span class="math inline">\(i\)</span>，总的概率为 <span
class="math display">\[\frac{\sum x_i^2+\sum x_i}{(r-l+1)(r-l)}\]</span>
<span class="math inline">\(\sum x_i\)</span> 和 <span
class="math inline">\(\sum x_i^2\)</span> 都可以用脚维护。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">50010</span>;</span><br><span class="line"><span class="type">int</span> n,m,c[N],belong[N],block,sum,cnt[N];</span><br><span class="line">ll sum2;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(belong[l]^belong[x.l])</span><br><span class="line">            <span class="keyword">return</span> belong[l]&lt;belong[x.l];</span><br><span class="line">        <span class="keyword">return</span> belong[l]&amp;<span class="number">1</span>?r&lt;x.r:r&gt;x.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ans</span>&#123;</span><br><span class="line">    ll a,b;</span><br><span class="line">    <span class="built_in">Ans</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Ans</span>(ll a,ll b):<span class="built_in">a</span>(a),<span class="built_in">b</span>(b)&#123;&#125;</span><br><span class="line">&#125;ans[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    sum2-=(ll)cnt[x]*cnt[x];</span><br><span class="line">    ++cnt[x],++sum;</span><br><span class="line">    sum2+=(ll)cnt[x]*cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    sum2-=(ll)cnt[x]*cnt[x];</span><br><span class="line">    --cnt[x],--sum;</span><br><span class="line">    sum2+=(ll)cnt[x]*cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    block=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) belong[i]=(i<span class="number">-1</span>)/block<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(c[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(q[i].l,q[i].r);</span><br><span class="line">        q[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q<span class="number">+1</span>,q<span class="number">+1</span>+m);</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(q[i].l==q[i].r)&#123;</span><br><span class="line">            ans[q[i].id]=<span class="built_in">Ans</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(c[++r]);</span><br><span class="line">        <span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">del</span>(c[r--]);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">del</span>(c[l++]);</span><br><span class="line">        <span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(c[--l]);</span><br><span class="line">        ll a=sum2-sum,b=(r-l<span class="number">+1ll</span>)*(r-l),c=__gcd(a,b);</span><br><span class="line">        ans[q[i].id]=<span class="built_in">Ans</span>(a/c,b/c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld/%lld\n&quot;</span>,ans[i].a,ans[i].b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
### 带修莫队
考虑把修改操作和查询操作同时记录下来，把每个查询操作额外记录距离当次查询最近的一次修改的位置，同时跑莫队时记录当前已经进行了几次修改，这样回答查询时可以顺次进行修改或“时光倒流”回退修改。
排序方式：
以<strong>左端点所在块的编号</strong>为第一关键字，<strong>右端点所在块的编号</strong>为第二关键字，<strong>当前操作的时间戳</strong>为第三关键字排序。注意：这里的第二关键字是<strong>右端点所在块的编号</strong>。<br />
经<a
href="https://oi-wiki.org/misc/modifiable-mo-algo/">证明</a>，块长取
<span class="math inline">\(n^{\frac{2}{3}}\)</span>
较优。总体时间复杂度 <span
class="math inline">\(O(n^{\frac{5}{3}})\)</span>。<br />
<a href="https://www.luogu.com.cn/problem/P1903">模板题</a>。
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">133353</span>,M=<span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">char</span> op;</span><br><span class="line"><span class="type">int</span> n,m,tot,block,belong[N],qcnt,mcnt,b[M],sum,a[N],ans[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,t,id;</span><br><span class="line">    <span class="built_in">query</span>(<span class="type">int</span> l=<span class="number">0</span>,<span class="type">int</span> r=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> id=<span class="number">0</span>):<span class="built_in">l</span>(l),<span class="built_in">r</span>(r),<span class="built_in">t</span>(t),<span class="built_in">id</span>(id)&#123;&#125;</span><br><span class="line">    <span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(belong[l]^belong[x.l]) <span class="keyword">return</span> belong[l]&lt;belong[x.l];</span><br><span class="line">        <span class="keyword">if</span>(belong[r]^belong[x.r]) <span class="keyword">return</span> belong[r]&lt;belong[x.r];</span><br><span class="line">        <span class="keyword">return</span> t&lt;x.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">modify</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,k;</span><br><span class="line">    <span class="built_in">modify</span>(<span class="type">int</span> x=<span class="number">0</span>,<span class="type">int</span> k=<span class="number">0</span>):<span class="built_in">x</span>(x),<span class="built_in">k</span>(k)&#123;&#125;</span><br><span class="line">&#125;mo[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x)</span></span>&#123;<span class="keyword">if</span>(<span class="number">0</span>==b[x]++) ++sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x)</span></span>&#123;<span class="keyword">if</span>(<span class="number">0</span>==--b[x]) --sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q[x].l&lt;=mo[t].x&amp;&amp;q[x].r&gt;=mo[t].x)&#123;</span><br><span class="line">        <span class="built_in">del</span>(a[mo[t].x]);</span><br><span class="line">        <span class="built_in">add</span>(mo[t].k);</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">swap</span>(a[mo[t].x],mo[t].k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    block=<span class="built_in">pow</span>(n,<span class="number">2.0</span>/<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) belong[i]=(i<span class="number">-1</span>)/block<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">if</span>(op^<span class="string">&#x27;R&#x27;</span>) ++qcnt,q[qcnt]=<span class="built_in">query</span>(x,y,mcnt,qcnt);</span><br><span class="line">        <span class="keyword">else</span> mo[++mcnt]=<span class="built_in">modify</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    std::<span class="built_in">sort</span>(q<span class="number">+1</span>,q<span class="number">+1</span>+qcnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,l=<span class="number">1</span>,r=<span class="number">0</span>,t=<span class="number">0</span>;i&lt;=qcnt;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&gt;q[i].l) <span class="built_in">add</span>(a[--l]);</span><br><span class="line">        <span class="keyword">while</span>(r&lt;q[i].r) <span class="built_in">add</span>(a[++r]);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;q[i].l) <span class="built_in">del</span>(a[l++]);</span><br><span class="line">        <span class="keyword">while</span>(r&gt;q[i].r) <span class="built_in">del</span>(a[r--]);</span><br><span class="line">        <span class="keyword">while</span>(t&lt;q[i].t) <span class="built_in">update</span>(i,++t);</span><br><span class="line">        <span class="keyword">while</span>(t&gt;q[i].t) <span class="built_in">update</span>(i,t--);</span><br><span class="line">        ans[q[i].id]=sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=qcnt;i++) cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度整数类 v1.5</title>
    <url>/2025/06/23/%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%95%B4%E6%95%B0%E7%B1%BB%20v1.5/</url>
    <content><![CDATA[<h3 id="背景">背景</h3>
<p>我们痛恨高精度。 ### 介绍
不想写高精度怎么办？提前写好模板，要用时直接复制粘贴就好啦！以下是一个高精度类，实现了除除法、取模和位运算外的所有整形运算。（先咕着这些，以后会添加的）。</p>
<details>
<summary>
bigint
</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bigint</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BIGINT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BIGINT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BASE 10000ll</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">double</span> PI2=<span class="number">6.283185307179586231995927</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">complex</span>&#123;</span><br><span class="line">    <span class="type">double</span> real,imag;</span><br><span class="line">    <span class="built_in">complex</span>(<span class="type">double</span> real=<span class="number">0</span>,<span class="type">double</span> imag=<span class="number">0</span>):<span class="built_in">real</span>(real),<span class="built_in">imag</span>(imag)&#123;&#125;</span><br><span class="line">    complex <span class="keyword">operator</span>+(<span class="type">const</span> complex &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="built_in">complex</span>(real+x.real,imag+x.imag);&#125;</span><br><span class="line">    complex <span class="keyword">operator</span>-(<span class="type">const</span> complex &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="built_in">complex</span>(real-x.real,imag-x.imag);&#125;</span><br><span class="line">    complex <span class="keyword">operator</span>*(<span class="type">const</span> complex &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="built_in">complex</span>(real*x.real-imag*x.imag,real*x.imag+x.real*imag);&#125;</span><br><span class="line">&#125;;</span><br><span class="line">complex omega[(<span class="number">1</span>&lt;&lt;<span class="number">21</span>)<span class="number">+10</span>];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> Size&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bigint</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init_omega</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;(i&gt;&gt;<span class="number">1</span>);j++)&#123;</span><br><span class="line">                <span class="type">double</span> arg=PI2*j/i;</span><br><span class="line">                omega[(i&gt;&gt;<span class="number">1</span>)+j]=<span class="built_in">complex</span>(<span class="built_in">cos</span>(arg),<span class="built_in">sin</span>(arg));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">FFT</span><span class="params">(std::vector&lt;complex&gt; &amp;a,<span class="type">int</span> n,<span class="type">bool</span> inv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j) std::<span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l=n&gt;&gt;<span class="number">1</span>;(j^=l)&lt;l;l&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=len)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;(len&gt;&gt;<span class="number">1</span>);j++)&#123;</span><br><span class="line">                    complex w=inv?<span class="built_in">complex</span>(omega[(len&gt;&gt;<span class="number">1</span>)+j].real,-omega[(len&gt;&gt;<span class="number">1</span>)+j].imag):omega[(len&gt;&gt;<span class="number">1</span>)+j];</span><br><span class="line">                    complex x=a[i+j],y=a[i+j+(len&gt;&gt;<span class="number">1</span>)]*w;</span><br><span class="line">                    a[i+j]=x+y,a[i+j+(len&gt;&gt;<span class="number">1</span>)]=x-y;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">if</span>(inv) <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i].real/=n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> num[Size];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">int</span>)*(len<span class="number">+2</span>));</span><br><span class="line">        len=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bigint</span>()&#123;</span><br><span class="line">        <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="built_in">sizeof</span>(num));</span><br><span class="line">        len=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">    <span class="title">bigint</span><span class="params">(<span class="type">const</span> T &amp;x)</span></span>&#123;*<span class="keyword">this</span>=x;&#125;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;out,<span class="type">const</span> bigint &amp;x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.num[<span class="number">0</span>]) out&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        out&lt;&lt;x.num[x.len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=x.len<span class="number">-1</span>;i;i--)</span><br><span class="line">            out&lt;&lt;std::<span class="built_in">setw</span>(<span class="number">4</span>)&lt;&lt;std::<span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>)&lt;&lt;x.num[i];</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;in,bigint &amp;x)&#123;</span><br><span class="line">        std::string s;</span><br><span class="line">        in&gt;&gt;s;x=s;</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    bigint &amp;<span class="keyword">operator</span>=(<span class="type">const</span> T &amp;a)&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        T x=a;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) num[<span class="number">0</span>]=<span class="number">1</span>,x=~x<span class="number">+1</span>;</span><br><span class="line">        len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x)&#123;</span><br><span class="line">            num[++len]=x%BASE;</span><br><span class="line">            x/=BASE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint &amp;<span class="keyword">operator</span>=(<span class="type">const</span> std::string &amp;a);</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> bigint &amp;a)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">0</span>]!=a.num[<span class="number">0</span>]) <span class="keyword">return</span> num[<span class="number">0</span>]&gt;a.num[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(len!=a.len) <span class="keyword">return</span> num[<span class="number">0</span>]?len&gt;a.len:len&lt;a.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len;i;i--)</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=a.num[i])</span><br><span class="line">                <span class="keyword">return</span> num[<span class="number">0</span>]?num[i]&gt;a.num[i]:num[i]&lt;a.num[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> bigint &amp;a)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">0</span>]!=a.num[<span class="number">0</span>]) <span class="keyword">return</span> num[<span class="number">0</span>]&lt;a.num[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(len!=a.len) <span class="keyword">return</span> num[<span class="number">0</span>]?len&lt;a.len:len&gt;a.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len;i;i--)</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=a.num[i])</span><br><span class="line">                <span class="keyword">return</span> num[<span class="number">0</span>]?num[i]&lt;a.num[i]:num[i]&gt;a.num[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> bigint &amp;a)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">0</span>]!=a.num[<span class="number">0</span>]) <span class="keyword">return</span> num[<span class="number">0</span>]&gt;a.num[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(len!=a.len) <span class="keyword">return</span> num[<span class="number">0</span>]?len&gt;a.len:len&lt;a.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len;i;i--)</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=a.num[i])</span><br><span class="line">                <span class="keyword">return</span> num[<span class="number">0</span>]?num[i]&gt;a.num[i]:num[i]&lt;a.num[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> bigint &amp;a)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">0</span>]!=a.num[<span class="number">0</span>]) <span class="keyword">return</span> num[<span class="number">0</span>]&lt;a.num[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(len!=a.len) <span class="keyword">return</span> num[<span class="number">0</span>]?len&lt;a.len:len&gt;a.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=len;i;i--)</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=a.num[i])</span><br><span class="line">                <span class="keyword">return</span> num[<span class="number">0</span>]?num[i]&lt;a.num[i]:num[i]&gt;a.num[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> bigint &amp;a)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len!=a.len) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=a.num[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> bigint &amp;a)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(len!=a.len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=a.num[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> bigint &amp;a)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num[<span class="number">0</span>]==a.num[<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> temp=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> old_len=len;</span><br><span class="line">            len=std::<span class="built_in">max</span>(len,a.len);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> sum=temp;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;=old_len) sum+=num[i];</span><br><span class="line">                <span class="keyword">if</span>(i&lt;=a.len) sum+=a.num[i];</span><br><span class="line">                num[i]=(<span class="type">int</span>)(sum%BASE);</span><br><span class="line">                temp=sum/BASE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(temp)</span><br><span class="line">                num[++len]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">bool</span> this_large=<span class="keyword">this</span>-&gt;<span class="built_in">abs</span>()&gt;=a.<span class="built_in">abs</span>();</span><br><span class="line">            <span class="type">const</span> bigint &amp;larger=this_large?*<span class="keyword">this</span>:a;</span><br><span class="line">            <span class="type">const</span> bigint &amp;smaller=this_large?a:*<span class="keyword">this</span>;</span><br><span class="line">            <span class="type">int</span> new_len=larger.len;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> temp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=new_len;i++)&#123;</span><br><span class="line">                <span class="type">long</span> <span class="type">long</span> diff=(<span class="type">long</span> <span class="type">long</span>)larger.num[i]-temp;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;=smaller.len) diff-=smaller.num[i];</span><br><span class="line">                <span class="keyword">if</span>(diff&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    diff+=BASE;</span><br><span class="line">                    temp=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> temp=<span class="number">0</span>;</span><br><span class="line">                num[i]=diff;</span><br><span class="line">            &#125;</span><br><span class="line">            len=new_len;</span><br><span class="line">            <span class="keyword">while</span>(len&gt;<span class="number">1</span>&amp;&amp;num[len]==<span class="number">0</span>) len--;</span><br><span class="line">            num[<span class="number">0</span>]=this_large?num[<span class="number">0</span>]:a.num[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(len==<span class="number">1</span>&amp;&amp;num[<span class="number">1</span>]==<span class="number">0</span>) num[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint &amp;<span class="keyword">operator</span>-=(<span class="type">const</span> bigint &amp;a)&#123;</span><br><span class="line">        bigint temp=a;</span><br><span class="line">        temp.num[<span class="number">0</span>]^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>+=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint &amp;<span class="keyword">operator</span>*=(<span class="type">const</span> bigint &amp;a)&#123;</span><br><span class="line">        <span class="keyword">if</span>((len==<span class="number">1</span>&amp;&amp;num[<span class="number">1</span>]==<span class="number">0</span>)||(a.len==<span class="number">1</span>&amp;&amp;a.num[<span class="number">1</span>]==<span class="number">0</span>))&#123;</span><br><span class="line">            <span class="built_in">init</span>();</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> old_len=len;</span><br><span class="line">        <span class="type">int</span> old_num[Size];</span><br><span class="line">        <span class="built_in">memcpy</span>(old_num,num,<span class="built_in">sizeof</span>(<span class="type">int</span>)*(len<span class="number">+10</span>));</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        num[<span class="number">0</span>]=old_num[<span class="number">0</span>]^a.num[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> len_sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len_sum&lt;old_len+a.len)</span><br><span class="line">            len_sum&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="function">std::vector&lt;complex&gt; <span class="title">fa</span><span class="params">(len_sum<span class="number">+10</span>)</span>,<span class="title">fb</span><span class="params">(len_sum<span class="number">+10</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;old_len;i++)</span><br><span class="line">            fa[i]=<span class="built_in">complex</span>((<span class="type">double</span>)old_num[i<span class="number">+1</span>],<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.len;i++)</span><br><span class="line">            fb[i]=<span class="built_in">complex</span>((<span class="type">double</span>)a.num[i<span class="number">+1</span>],<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">init_omega</span>(len_sum);</span><br><span class="line">        <span class="built_in">FFT</span>(fa,len_sum,<span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">FFT</span>(fb,len_sum,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len_sum;i++)</span><br><span class="line">            fa[i]=fa[i]*fb[i];</span><br><span class="line">        <span class="built_in">FFT</span>(fa,len_sum,<span class="literal">true</span>);</span><br><span class="line">        len=old_len+a.len;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> val=(<span class="type">long</span> <span class="type">long</span>)<span class="built_in">round</span>(fa[i].real)+temp;</span><br><span class="line">            num[i<span class="number">+1</span>]=(<span class="type">int</span>)(val%BASE);</span><br><span class="line">            temp=val/BASE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(temp) num[++len]=temp;</span><br><span class="line">        <span class="keyword">while</span>(len&gt;<span class="number">1</span>&amp;&amp;num[len]==<span class="number">0</span>) len--;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint &amp;<span class="keyword">operator</span>++()&#123;</span><br><span class="line">        *<span class="keyword">this</span>+=<span class="built_in">bigint</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint &amp;<span class="keyword">operator</span>--()&#123;</span><br><span class="line">        *<span class="keyword">this</span>-=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    bigint <span class="keyword">operator</span>++(T)&#123;</span><br><span class="line">        bigint res=*<span class="keyword">this</span>;</span><br><span class="line">        ++*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    bigint <span class="keyword">operator</span>--(T)&#123;</span><br><span class="line">        bigint res=*<span class="keyword">this</span>;</span><br><span class="line">        --*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> bigint <span class="keyword">operator</span>+(<span class="type">const</span> bigint &amp;a,<span class="type">const</span> bigint &amp;b)&#123;<span class="keyword">return</span> <span class="built_in">bigint</span>(a)+=b;&#125;</span><br><span class="line">    <span class="keyword">friend</span> bigint <span class="keyword">operator</span>-(<span class="type">const</span> bigint &amp;a,<span class="type">const</span> bigint &amp;b)&#123;<span class="keyword">return</span> <span class="built_in">bigint</span>(a)-=b;&#125;</span><br><span class="line">    <span class="keyword">friend</span> bigint <span class="keyword">operator</span>*(<span class="type">const</span> bigint &amp;a,<span class="type">const</span> bigint &amp;b)&#123;<span class="keyword">return</span> <span class="built_in">bigint</span>(a)*=b;&#125;</span><br><span class="line">    <span class="function">bigint <span class="title">abs</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        bigint res=*<span class="keyword">this</span>;</span><br><span class="line">        res.num[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">size_t</span> Size&gt;</span><br><span class="line">bigint&lt;Size&gt; &amp;bigint&lt;Size&gt;::<span class="keyword">operator</span>=(<span class="type">const</span> std::string &amp;a)&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> slen=a.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">if</span>(slen&gt;<span class="number">0</span>&amp;&amp;a[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>) num[<span class="number">0</span>]=f=<span class="number">1</span>;</span><br><span class="line">    len=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> temp=<span class="number">0</span>,w=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=slen<span class="number">-1</span>;i&gt;=f;i--)&#123;</span><br><span class="line">        temp+=(a[i]^<span class="number">48</span>)*w;</span><br><span class="line">        w=(w&lt;&lt;<span class="number">1</span>)+(w&lt;&lt;<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(w==BASE||i==f)&#123;</span><br><span class="line">            num[++len]=(<span class="type">int</span>)temp;</span><br><span class="line">            temp=<span class="number">0</span>;</span><br><span class="line">            w=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(temp||len==<span class="number">0</span>) num[++len]=temp;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> BASE</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
</details>
<h3 id="使用说明">使用说明</h3>
<h4 id="前言">前言</h4>
<p>这份高精度模板使用压位实现常数优化，实现过程中为了保证乘法运算的精度，最终选择了压
<span class="math inline">\(4\)</span> 位，可以保证 <span
class="math inline">\(10^{1000000}\)</span> 以内的精度。 #### 声明
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bigint&lt;/*length_of_number*/&gt; a;</span><br><span class="line"><span class="comment">//因为压位，所以可以只开四分之一大小，但一般建议开大些</span></span><br></pre></td></tr></table></figure> 无需任何命名空间。 #### I/O 方式 为方便使用，接入了
<code>iostream</code> 的 I/O。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bigint&lt;<span class="number">114514</span>&gt; a;</span><br><span class="line">std::cin&gt;&gt;a;</span><br><span class="line">std::cout&lt;&lt;a;</span><br></pre></td></tr></table></figure> #### 数值运算符
加法与减法使用 <span class="math inline">\(O(n)\)</span> 算法，乘法使用
<span class="math inline">\(O(n\log n)\)</span> 算法（FFT），也写了一份
NTT 实现，实测表现优于 FFT，但暂无法处理较大的数。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bigint&lt;<span class="number">114514</span>&gt; a,b;</span><br><span class="line">a+b;</span><br><span class="line">a-b;</span><br><span class="line">a*b;</span><br><span class="line">a+=b;</span><br><span class="line">a-=b;</span><br><span class="line">a*=b;</span><br><span class="line">a++;</span><br><span class="line">a--;</span><br><span class="line">++a;</span><br><span class="line">--a;</span><br></pre></td></tr></table></figure> ####
赋值运算符 支持所有<strong>整形</strong>，同时对
<code>std::string</code>
进行特化，支持将一个<strong>格式符合正常数字</strong>的
<code>std::string</code> 转为高精度整形。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bigint&lt;<span class="number">114514</span>&gt; a,b;</span><br><span class="line">std::string c;</span><br><span class="line">c=<span class="string">&quot;-1919810&quot;</span>;</span><br><span class="line">a=<span class="number">-1919810</span>,b=c;</span><br><span class="line"><span class="comment">//a和b所存的值均为-1919810</span></span><br></pre></td></tr></table></figure> #### 关系符
除三路比较运算符（C++20）外的所有常用大小关系符。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bigint&lt;<span class="number">114514</span>&gt; a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">a&lt;b;<span class="comment">//此表达式为true</span></span><br><span class="line">a!=b;<span class="comment">//此表达式为true</span></span><br><span class="line">a==b;<span class="comment">//此表达式为false</span></span><br></pre></td></tr></table></figure> ####
其他 成员函数 <code>abs()</code>，以 <code>bigint</code>
类型返回该数的绝对值。 ### 关于 FFT/NTT
与压位对于高精度乘法的性能优化比对数据 <a
href="https://github.com/headless-piston/bigint/tree/test_data"
title="data">data</a>（洛谷 P1919 #1 数据） code <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">bigint&lt;<span class="number">2145141</span>&gt; a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;a*b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 数据取
<span class="math inline">\(5\)</span> 次运行平均值。 评测环境：S2
四机房（Intel(R) Core(TM) i5-10400 CPU @ 2.90GHz 2.90 GHz）。MinGW-W64
GCC 11.4.0 64-bit Debug。 编译选项： <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-std=c++14 -O2 -Wl,--stack=268435456</span><br></pre></td></tr></table></figure> | | FFT | NTT | |
:————: | :————: | :————: | | 不压位 | 0.5712 | 0.5112 | | 压 <span
class="math inline">\(2\)</span> 位 | 0.2718 | - | | 压 <span
class="math inline">\(4\)</span> 位 | 0.1546 | - |</p>
<p>单位：<span class="math inline">\(\text{s}\)</span>。 数据来自
RedPandaIDE
程序运行窗口自带的用时显示，真实评测时用时应会比表中数据略小。 单模数
NTT 压 <span class="math inline">\(2\)</span> 位/<span
class="math inline">\(4\)</span> 位在数据范围内无法得到正确答案。 ###
Upd v1.1：增加了 NTT 命名空间，但因为一些原因暂不使用。
v1.2：改了改码风。 v1.3：使用 C++ 标准库中的 <code>std::complex</code>
代替手写的复数类。修复了初始化错误的问题。
v1.4：<code>std::complex</code> 跑的太慢啦，换回手写的复数类。
v1.5：改用预处理单位根计算，提高了精度。现在可以压 <span
class="math inline">\(4\)</span> 位啦，效率大提升！</p>
]]></content>
  </entry>
</search>
