<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FFT 快速傅里叶变换</title>
    <url>/2025/07/04/FFT%20%E5%BF%AB%E9%80%9F%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>默认你已经学过复数。没有的话右转高中数学 A 版必修二。</p>
<h4 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h4><p>形如  </p>
<script type="math/tex; mode=display">F(x)=\sum_{i=0}^n a_i x^i</script><p>的式子。其中 $n$ 为非负整数，$a<em>i$ 属于<a href="https://baike.baidu.com/item/%E6%95%B0%E5%9F%9F/1259870" title="数域">数域</a> $P$。我们只需知道所有 $a_i$，就可以确定一个多项式。这就是多项式的系数表示法。<br>为了方便运算，我们引入多项式的点值表示法。<br>对于一个 $n$ 次多项式 $F(x)$，我们可以用 $n+1$ 个互不相同的点 ${(x_0,F(x_0)),(x_1,F(x_1)),\cdots,(x</em>{n+1},F(x<em>{n+1}))}$ 来确定这个多项式。我们下文称这个集合为 $S</em>{F(x)}$。<br>系数表示法转为点值表示法的过程叫做 DFT，反之叫 IDFT。</p>
<h4 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h4><p>只说乘法。<br>现有多项式 $F(x)=\sum<em>{i=0}^n a_i x^i$ 和 $G(x)=\sum</em>{j=0}^m b_j x^j$。则有  </p>
<script type="math/tex; mode=display">F(x)\times G(x)=\sum_{i=0}^n\sum_{j=0}^ma_ib_jx^{i+j}</script><h4 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h4><p>事实上，卷积运算和多项式乘法在数学上是等价的。$H(x)=F(x) <em> G(x)$ 表示 $H(x)$ 为 $F(x)$ 和 $G(x)$ 的卷积。<br>刚才的多项式乘法求得的式子并不是标准的多项式形式。我们设 $H(x)=F(x) </em> G(x)=\sum<em>{k=0}^{n+m}c_kx^k$。则每项的系数 $c_k=\sum</em>{i+j=k}a_ib_j$，变为更容易计算的形式  </p>
<script type="math/tex; mode=display">c_k=\sum_{i=\max(0,k-m)}^{\min(n,k)}a_ib_{k-i}</script><p>若使用点值表示法，设  </p>
<script type="math/tex; mode=display">S_{F(x)}=\{(x_i,y_i)\}</script><script type="math/tex; mode=display">S_{G(x)}=\{(x_i,y'_i)\}</script><p>则有  </p>
<script type="math/tex; mode=display">S_{H(x)}=\{(x_i,y_iy'_i)\}</script><h4 id="单位根"><a href="#单位根" class="headerlink" title="单位根"></a>单位根</h4><p>根据<a href="https://baike.baidu.com/item/%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/18104?fromModule=lemma_inlink" title="代数基本定理">代数基本定理</a>，$x^n=1$ 有 $n$ 个根，这 $n$ 个根都称为单位根。记作 ${\omega_n^k\mid k=0,1,\cdots,n-1}$，其中，$\omega_n^0=1$。在复平面上，它们刚好将单位圆 $n$ 等分。一般说的单位根 $\omega_n$，指从 $(1,0)$ 开始逆时针方向上的第一个根。<br>一些下面会用到的小式子：  </p>
<ul>
<li>对于偶数次单位根，有 $\omega_n^i=-\omega_n^{i+\frac{n}{2}}$（其实就是在复平面上关于原点中心对称）。</li>
<li>$\omega_{2n}^{2k}=\omega_n^k$</li>
<li>$(\omega_n^k)^2=\omega_n^{2k}$</li>
</ul>
<h3 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a><a href="https://www.luogu.com.cn/problem/P3803" title="FFT">FFT</a></h3><p>显然，朴素算法求解 $F(x) <em> G(x)$ 的时间复杂度为 $O(nm)$，而 FFT 可以让我们在 $O(n\log n)$ 的时间复杂度内计算两个 $n$ 次多项式的乘法。基本思想是分治。<br>我们只需对 $F(x)$ 和 $G(x)$ 进行 DFT，计算 $S<em>{H(x)}=S</em>{F(x)}</em>S<em>{G(x)}$，最后再对 $S</em>{H(x)}$ IDFT 即得 $H(x)$。<br>接下来说 DFT 的过程。<br>对于 $F(x)$，将其划分为奇次与偶次两部分。  </p>
<script type="math/tex; mode=display">F(x)=\sum_{i=0}^{\frac{n}{2}}a_{2i}x^{2i}+\sum_{i=0}^{\frac{n}{2}}a_{2i+1}x^{2i+1}</script><p>将右半部分提出一个 $x$  </p>
<script type="math/tex; mode=display">F(x)=\sum_{i=0}^{\frac{n}{2}}a_{2i}x^{2i}+x\sum_{i=0}^{\frac{n}{2}}a_{2i+1}x^{2i}</script><p>将前后两部分用新的多项式表示  </p>
<script type="math/tex; mode=display">F_1(x)=\sum_{i=0}^{\frac{n}{2}}a_{2i}x^{i}</script><script type="math/tex; mode=display">F_2(x)=\sum_{i=0}^{\frac{n}{2}}a_{2i+1}x^{i}</script><script type="math/tex; mode=display">F(x)=F_1(x^2)+xF_2(x^2)</script><p>这时我们代入 $\omega_n^k$，可得  </p>
<script type="math/tex; mode=display">\begin{aligned}
F(\omega_n^k)&=F_1((\omega_n^k)^2)+\omega_n^kF_2((\omega_n^k)^2)\\
&=F_1(\omega_n^{2k})+\omega_n^kF_2(\omega_n^{2k})\\
&=F_1(\omega_\frac{n}{2}^k)+\omega_n^kF_2(\omega_\frac{n}{2}^k)
\end{aligned}</script><p>同理，代入 $\omega_n^{k+\frac{n}{2}}=-\omega_n^k$，得  </p>
<script type="math/tex; mode=display">F(\omega_n^{k+\frac{n}{2}})=F_1(\omega_\frac{n}{2}^k)-\omega_n^kF_2(\omega_\frac{n}{2}^k)</script><p>所以，我们可以根据 $F<em>1(\omega</em>\frac{n}{2}^k)$ 和 $F<em>2(\omega</em>\frac{n}{2}^k)$ 求出 $F(\omega_n^k)$ 和 $F(\omega_n^{k+\frac{n}{2}})$。这种做法只能处理长度为 $2$ 的正整次幂的多项式，所以我们要把高次系数补为 $0$。<br>接下来是 IDFT。它的操作与 DFT 极像，就是将 $\omega_n^k$ 变为 $\omega_n^{-k}$，并在最后乘 $\dfrac{1}{n}$。<br>现实计算中，递归处理效率较低，我们使用位逆序置换优化和蝶形运算优化，直接将值排列为特定的顺序，避免了递归和额外的临时数组。</p>
<h4 id="位逆序置换优化"><a href="#位逆序置换优化" class="headerlink" title="位逆序置换优化"></a>位逆序置换优化</h4><p>我们要想避免递归，就要将需要一起计算的部分放在一起。<br>我们以 $7$ 次多项式为例，有 $8$ 个 $a_i$，具体划分方式如图<br><img src="https://github.com/headless-piston/blog_images/blob/main/FFT.png?raw=true" alt="image"><br>规律：将每个下标的二进制反转，以反转后的数为新下标。例如，$3$ 的二进制是 $011$，反转后为 $110$，即 $6$，从图上来看，$a_3$ 确实到了原 $a_6$ 的位置。</p>
<h4 id="蝶形运算优化"><a href="#蝶形运算优化" class="headerlink" title="蝶形运算优化"></a>蝶形运算优化</h4><p>位逆序置换后，我们可以直接计算 $F<em>1(x)$ 和 $F_2(x)$ 而无需临时数组，因为计算要用到的数与计算完成后的数应当被存在相同的下标内，直接覆盖原数就行了。具体地，计算 $F(\omega_n^k)$ 和 $F(\omega_n^{k+\frac{n}{2}})$ 时 $F_1(\omega</em>\frac{n}{2}^k)$ 的值在下标 $k$，$F<em>2(\omega</em>\frac{n}{2}^k)$ 的值在下标 $k+\frac{n}{2}$。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1</span>&lt;&lt;<span class="number">22</span>;<span class="comment">//要开略大一些因为len可能会大于n+m</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI=<span class="number">4</span>*<span class="built_in">atan</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> n,m,a[N],b[N],len=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">comp</span>&#123;</span><br><span class="line">	<span class="type">double</span> real,imag;</span><br><span class="line">&#125;fa[N],fb[N],fc[N];</span><br><span class="line">comp <span class="keyword">operator</span>+(<span class="type">const</span> comp &amp;x,<span class="type">const</span> comp &amp;y)&#123;</span><br><span class="line">	<span class="keyword">return</span> comp&#123;x.real+y.real,x.imag+y.imag&#125;;</span><br><span class="line">&#125;</span><br><span class="line">comp <span class="keyword">operator</span>-(<span class="type">const</span> comp &amp;x,<span class="type">const</span> comp &amp;y)&#123;</span><br><span class="line">	<span class="keyword">return</span> comp&#123;x.real-y.real,x.imag-y.imag&#125;;</span><br><span class="line">&#125;</span><br><span class="line">comp <span class="keyword">operator</span>*(<span class="type">const</span> comp &amp;x,<span class="type">const</span> comp &amp;y)&#123;</span><br><span class="line">	<span class="keyword">return</span> comp&#123;x.real*y.real-x.imag*y.imag,x.real*y.imag+y.real*x.imag&#125;;</span><br><span class="line">&#125;</span><br><span class="line">comp <span class="keyword">operator</span>/(<span class="type">const</span> comp &amp;x,<span class="type">const</span> <span class="type">int</span> &amp;y)&#123;</span><br><span class="line">	<span class="keyword">return</span> comp&#123;x.real/(<span class="type">double</span>)y,x.imag/(<span class="type">double</span>)y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(comp *f,<span class="type">int</span> n,<span class="type">int</span> rev)</span></span>&#123;<span class="comment">//rev=1代表DFT，rev=-1代表IDFT</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=n&gt;&gt;<span class="number">1</span>,k;i&lt;n<span class="number">-1</span>;i++)&#123;<span class="comment">//位逆序置换，0和n-1不用换</span></span><br><span class="line">		<span class="keyword">if</span>(i&lt;j)<span class="comment">//j即i的二进制反转，判断i&lt;j是为了保证只交换1次</span></span><br><span class="line">			<span class="built_in">swap</span>(f[i],f[j]);</span><br><span class="line">		k=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(j&gt;=k)&#123;<span class="comment">//清除高位</span></span><br><span class="line">			j-=k;</span><br><span class="line">			k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		j+=k;<span class="comment">//更新低位</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="type">double</span> arg=<span class="number">2</span>*PI*rev/len;</span><br><span class="line">		comp wn=&#123;<span class="built_in">cos</span>(arg),<span class="built_in">sin</span>(arg)&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=len)&#123;</span><br><span class="line">			comp w=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len/<span class="number">2</span>;j++)&#123;</span><br><span class="line">				comp f1=f[i+j];</span><br><span class="line">				comp f2=f[i+j+len/<span class="number">2</span>];</span><br><span class="line">				f[i+j]=f1+w*f2;</span><br><span class="line">				f[i+j+len/<span class="number">2</span>]=f1-w*f2;</span><br><span class="line">				w=w*wn;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!~rev)<span class="comment">//IDFT的最后除以n操作</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">			f[i]=f[i]/n;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a+i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,b+i);</span><br><span class="line">	<span class="keyword">while</span>(len&lt;=n+m)</span><br><span class="line">		len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">		fa[i]=&#123;(<span class="type">double</span>)a[i],<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">		fb[i]=&#123;(<span class="type">double</span>)b[i],<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="built_in">FFT</span>(fa,len,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">FFT</span>(fb,len,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">		fc[i]=fa[i]*fb[i];</span><br><span class="line">	<span class="built_in">FFT</span>(fc,len,<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,(<span class="type">int</span>)<span class="built_in">round</span>(fc[i].real));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h4><p>可以预处理单位根，无需在变换过程中计算，以提高效率和精度。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/Kenma/p/18813688">https://www.cnblogs.com/Kenma/p/18813688</a></p>
<p><a href="https://oi-wiki.org/math/poly/fft/">https://oi-wiki.org/math/poly/fft/</a></p>
<p><a href="https://grok.com/" title="特别鸣谢">特别鸣谢</a>，解决了我在数学上的一些疑惑。</p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>AC 自动机</title>
    <url>/2025/06/23/AC%20%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近集训时将难一些的字符串题时发现自己似乎已经忘了，或者就根本没学懂过 AC 自动机，于是重学一遍。  </p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>AC 自动机可以实现比 KMP 和 Trie 更多的字符串匹配方面的功能。比如求模式串是否在文本串中出现过，出现了多少次等。不同于 KMP，AC 自动机支持<strong>多模式串的匹配</strong>。可以认为，AC 自动机就是在 Trie 上进行 KMP，同样要求最长公共前后缀，只不过前缀可以从<strong>任意模式串</strong>中截取而非 KMP 的单一模式串。类似于 KMP 的 $nxt$ 数组，AC 自动机中称这个指针为 $fail$。<br>我们举个例子：若干模式串组成 Trie<br><img src="https://raw.githubusercontent.com/headless-piston/blog_images/refs/heads/main/AC.png" alt="image"><br>为了防止过多 $fail$ 弄得图片过乱，我们只取一个例子：$9$ 节点处，我们发现有 $0$ 节点到 $2$ 节点和 $7$ 节点到 $9$ 节点的最长公共前后缀 <code>he</code>。所以，类似 KMP，$9$ 处的 $fail$ 应指向 $2$。</p>
<h3 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h3><p>那么，$fail$ 究竟应该如何构建呢？我们使用 BFS 来遍历 Trie，在失配时不断跳 $fail$。  </p>
<details>
<summary>build AC automaton</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[u][i])&#123;</span><br><span class="line">                <span class="type">int</span> to=fail[u];</span><br><span class="line">                <span class="keyword">while</span>(to&amp;&amp;!nxt[to][i])</span><br><span class="line">                    to=fail[to];</span><br><span class="line">                fail[nxt[u][i]]=nxt[to][i];</span><br><span class="line">                q.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>然而，这样一直跳 $fail$ 效率太低了。我们可以在一开始就预处理出不存在的边的 $fail$，将查找 $fail$ 优化至 $O(1)$。此时的 Trie 由树变为了图。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[u][i])&#123;</span><br><span class="line">                fail[nxt[u][i]]=nxt[fail[u]][i];</span><br><span class="line">                q.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> nxt[u][i]=nxt[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="多模式串匹配"><a href="#多模式串匹配" class="headerlink" title="多模式串匹配"></a>多模式串匹配</h3><p>我们以<a href="https://www.luogu.com.cn/problem/P3808" title="本题">本题</a>的匹配为例，只需每次跳 $fail$ 并计数，打标记防止记重就好了。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        u=nxt[u][c];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=u;j&amp;&amp;ed[j]!=<span class="number">-1</span>;j=fail[j])</span><br><span class="line">            res+=ed[j],ed[j]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="效率优化"><a href="#效率优化" class="headerlink" title="效率优化"></a>效率优化</h3><p>我们发现，匹配时一直在跳 $fail$，这个操作事实上是可以优化的。<br>显然，一个 AC 自动机上的 $fail$ 边应当会构成一棵内向树。因此可以进行拓扑排序优化。<br>按照拓扑序处理节点，累加出现次数。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> nxt[N][<span class="number">26</span>],tot,fail[N],n,ed[N],ans[N],indegree[N],mp[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(string s,<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[u][c]) nxt[u][c]=++tot;</span><br><span class="line">        u=nxt[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">    ++ed[u];</span><br><span class="line">    mp[id]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[u][i])&#123;</span><br><span class="line">                fail[nxt[u][i]]=nxt[fail[u]][i];</span><br><span class="line">                ++indegree[nxt[fail[u]][i]];</span><br><span class="line">                q.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> nxt[u][i]=nxt[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">topo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=tot;i++) <span class="keyword">if</span>(!indegree[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> v=fail[u];</span><br><span class="line">        ans[v]+=ans[u];</span><br><span class="line">        <span class="keyword">if</span>(!--indegree[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">query</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="type">int</span>)s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="type">int</span> c=s[i]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        u=nxt[u][c];</span><br><span class="line">        ans[u]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">string s,t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;s,<span class="built_in">insert</span>(s,i);</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="built_in">query</span>(t);</span><br><span class="line">    <span class="built_in">topo</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cout&lt;&lt;ans[mp[i]]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><h4 id="POI-2000-病毒"><a href="#POI-2000-病毒" class="headerlink" title="[POI 2000] 病毒"></a><a href="https://www.luogu.com.cn/problem/P2444" title="[POI 2000] 病毒">[POI 2000] 病毒</a></h4><p>建立 AC 自动机时判断，若某串的最长前缀是病毒，则它本身一定不合法。之后 dfs 判环就行，注意使用标记数组保证 dfs 的复杂度正确。<del>代码有点丑陋，为了卡常写了循环展开。</del>  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">3e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> nxt[N][<span class="number">2</span>],tot,n,fail[N];</span><br><span class="line"><span class="type">bool</span> ed[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[p][c^<span class="number">48</span>]) nxt[p][c^<span class="number">48</span>]=++tot;</span><br><span class="line">        p=nxt[p][c^<span class="number">48</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ed[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">if</span>(nxt[<span class="number">0</span>][<span class="number">0</span>]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(nxt[<span class="number">0</span>][<span class="number">1</span>]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(nxt[u][<span class="number">0</span>])&#123;</span><br><span class="line">            fail[nxt[u][<span class="number">0</span>]]=nxt[fail[u]][<span class="number">0</span>];</span><br><span class="line">            q.<span class="built_in">push</span>(nxt[u][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> nxt[u][<span class="number">0</span>]=nxt[fail[u]][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(ed[fail[nxt[u][<span class="number">0</span>]]]) ed[nxt[u][<span class="number">0</span>]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nxt[u][<span class="number">1</span>])&#123;</span><br><span class="line">            fail[nxt[u][<span class="number">1</span>]]=nxt[fail[u]][<span class="number">1</span>];</span><br><span class="line">            q.<span class="built_in">push</span>(nxt[u][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> nxt[u][<span class="number">1</span>]=nxt[fail[u]][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(ed[fail[nxt[u][<span class="number">1</span>]]]) ed[nxt[u][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> vis[N],used[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(vis[nxt[u][<span class="number">0</span>]]||vis[nxt[u][<span class="number">1</span>]])&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;TAK\n&quot;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> p=nxt[u][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(!used[p]&amp;&amp;!ed[p]) used[p]=<span class="number">1</span>,<span class="built_in">dfs</span>(p);</span><br><span class="line">    p=nxt[u][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(!used[p]&amp;&amp;!ed[p]) used[p]=<span class="number">1</span>,<span class="built_in">dfs</span>(p);</span><br><span class="line">    vis[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="built_in">insert</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;NIE\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h4 id="NOI2011-阿狸的打字机"><a href="#NOI2011-阿狸的打字机" class="headerlink" title="[NOI2011] 阿狸的打字机"></a><a href="https://www.luogu.com.cn/problem/P2414" title="[NOI2011] 阿狸的打字机">[NOI2011] 阿狸的打字机</a></h4><details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,tot,nxt[N][<span class="number">26</span>],fail[N],fa[N],endpos[N],nxt1[N][<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(nxt[<span class="number">0</span>][i]) q.<span class="built_in">push</span>(nxt[<span class="number">0</span>][i]);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nxt[u][i])&#123;</span><br><span class="line">                fail[nxt[u][i]]=nxt[fail[u]][i];</span><br><span class="line">                q.<span class="built_in">push</span>(nxt[u][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> nxt[u][i]=nxt[fail[u]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,id;</span><br><span class="line">    <span class="built_in">query</span>(<span class="type">int</span> x=<span class="number">0</span>,<span class="type">int</span> id=<span class="number">0</span>):<span class="built_in">x</span>(x),<span class="built_in">id</span>(id)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;query&gt; q[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="type">int</span> dfnl[N],dfnr[N],dfncnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfsfail</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    dfnl[u]=++dfncnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u]) <span class="built_in">dfsfail</span>(v);</span><br><span class="line">    dfnr[u]=dfncnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="type">int</span> tree[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=dfncnt;x+=<span class="built_in">lowbit</span>(x)) tree[x]+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x^=<span class="built_in">lowbit</span>(x)) res+=tree[x];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfstrie</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">modify</span>(dfnl[u],<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> temp:q[u])&#123;</span><br><span class="line">        <span class="type">int</span> id=temp.id,x=temp.x;</span><br><span class="line">        ans[id]=<span class="built_in">ask</span>(dfnr[x])-<span class="built_in">ask</span>(dfnl[x]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> v=nxt1[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfstrie</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">modify</span>(dfnl[u],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!nxt[p][c-<span class="string">&#x27;a&#x27;</span>]) nxt[p][c-<span class="string">&#x27;a&#x27;</span>]=++tot;</span><br><span class="line">            fa[nxt[p][c-<span class="string">&#x27;a&#x27;</span>]]=p;</span><br><span class="line">            p=nxt[p][c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;P&#x27;</span>) endpos[++n]=p;</span><br><span class="line">        <span class="keyword">else</span> p=fa[p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(nxt1,nxt,<span class="built_in">sizeof</span>(nxt));</span><br><span class="line">    cin&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        q[endpos[y]].<span class="built_in">push_back</span>(<span class="built_in">query</span>(endpos[x],i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        e[fail[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="built_in">dfsfail</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfstrie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>图片来源：  </p>
<p><a href="https://oi-wiki.org/string/ac-automaton/">https://oi-wiki.org/string/ac-automaton/</a></p>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>DP 题目合集</title>
    <url>/2025/07/04/DP%20%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h3 id="OSU"><a href="#OSU" class="headerlink" title="OSU!"></a>OSU!</h3><p>之前做过。</p>
<h3 id="春季测试-2023-圣诞树"><a href="#春季测试-2023-圣诞树" class="headerlink" title="[春季测试 2023] 圣诞树"></a><a href="https://www.luogu.com.cn/problem/P9119" title="[春季测试 2023] 圣诞树">[春季测试 2023] 圣诞树</a></h3><p>好题。因为三角形两边和大于第三边，所以路径不交叉一定比路径交叉优。那么考虑区间 DP。首先断环为链，设 $dp<em>{l,r,0/1}$ 表示当前已经走完了区间 $[l,r]$，当前在区间最左/右侧。同时记录 $pre</em>{l,r,0/1}$ 表示对应状态的 $dp$ 是从上一步的左/右侧转移过来的。输出直接递归或用栈就可以了。注意：由于坐标可以为负，所以一定注意边界条件。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e3</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">&#125;node[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">double</span> dp[N&lt;&lt;<span class="number">1</span>][N&lt;&lt;<span class="number">1</span>][<span class="number">2</span>],ans;</span><br><span class="line"><span class="type">int</span> pre[N&lt;&lt;<span class="number">1</span>][N&lt;&lt;<span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">dis</span><span class="params">(<span class="type">const</span> Node &amp;a,<span class="type">const</span> Node &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="type">double</span> x=a.x-b.x,y=a.y-b.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,node[l].id);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p)&#123;</span><br><span class="line">        <span class="built_in">print</span>(l,r<span class="number">-1</span>,pre[l][r][p]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,node[r].id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(l<span class="number">+1</span>,r,pre[l][r][p]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,node[l].id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    node[s].y=<span class="number">-0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;node[i].x&gt;&gt;node[i].y;</span><br><span class="line">        node[i].id=i;</span><br><span class="line">        node[i+n]=node[i];</span><br><span class="line">        <span class="keyword">if</span>(node[i].y&gt;node[s].y) s=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=(n&lt;&lt;<span class="number">1</span>);i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=(n&lt;&lt;<span class="number">1</span>);j++)</span><br><span class="line">            dp[i][j][<span class="number">0</span>]=dp[i][j][<span class="number">1</span>]=<span class="number">0x7fffffff</span>;</span><br><span class="line">    dp[s][s][<span class="number">0</span>]=dp[s][s][<span class="number">1</span>]=dp[s+n][s+n][<span class="number">0</span>]=dp[s+n][s+n][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=n;len++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r=l+len<span class="number">-1</span>;r&lt;=(n&lt;&lt;<span class="number">1</span>);l++,r++)&#123;</span><br><span class="line">            <span class="comment">//0 left ,1 right</span></span><br><span class="line">            <span class="type">double</span> a=dp[l<span class="number">+1</span>][r][<span class="number">0</span>]+<span class="built_in">dis</span>(node[l],node[l<span class="number">+1</span>]),b=dp[l<span class="number">+1</span>][r][<span class="number">1</span>]+<span class="built_in">dis</span>(node[l],node[r]);</span><br><span class="line">            <span class="keyword">if</span>(a&gt;b) dp[l][r][<span class="number">0</span>]=b,pre[l][r][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[l][r][<span class="number">0</span>]=a,pre[l][r][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">            a=dp[l][r<span class="number">-1</span>][<span class="number">1</span>]+<span class="built_in">dis</span>(node[r<span class="number">-1</span>],node[r]),b=dp[l][r<span class="number">-1</span>][<span class="number">0</span>]+<span class="built_in">dis</span>(node[l],node[r]);</span><br><span class="line">            <span class="keyword">if</span>(a&gt;b) dp[l][r][<span class="number">1</span>]=b,pre[l][r][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> dp[l][r][<span class="number">1</span>]=a,pre[l][r][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    ans=<span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ans=<span class="built_in">min</span>(&#123;ans,dp[i][i+n<span class="number">-1</span>][<span class="number">0</span>],dp[i][i+n<span class="number">-1</span>][<span class="number">1</span>]&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][i+n<span class="number">-1</span>][<span class="number">0</span>]==ans)&#123;</span><br><span class="line">            <span class="built_in">print</span>(i,i+n<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[i][i+n<span class="number">-1</span>][<span class="number">1</span>]==ans)&#123;</span><br><span class="line">            <span class="built_in">print</span>(i,i+n<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="JSOI2018-潜入行动"><a href="#JSOI2018-潜入行动" class="headerlink" title="[JSOI2018] 潜入行动"></a><a href="https://www.luogu.com.cn/problem/P4516" title="[JSOI2018] 潜入行动">[JSOI2018] 潜入行动</a></h3><p>树上背包。朴素的状态不足以表达信息时就考虑加状态。$dp<em>{u,i,0/1,0/1}$ 表示以 $u$ 为根的子树中，放了 $i$ 个监视器，点 $u$ 放/不放，点 $u$ 是/否被覆盖。转移时涉及滚动数组，所以我们记 $temp</em>{i,0/1,0/1}$ 表示当前的 $dp_{u,i,0/1,0/1}$。<br>转移有点麻烦：  </p>
<script type="math/tex; mode=display">dp_{u,i+j,0,0}=\sum temp_{i,0,0}\times dp_{v,j,0,1}</script><script type="math/tex; mode=display">dp_{u,i+j,1,0}=\sum temp_{i,1,0}\times dp_{v,j,0,0/1}</script><script type="math/tex; mode=display">dp_{u,i+j,0,1}=\sum temp_{i,0,0}\times dp_{v,j,1,1}+temp_{i,0,1}\times dp_{v,j,0/1,1}</script><script type="math/tex; mode=display">dp_{u,i+j,1,1}=\sum temp_{i,1,0}\times dp_{v,j,1,0/1}+temp_{i,1,1}\times dp_{v,j,0/1,0/1}</script><details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">1e9</span><span class="number">+7</span>,N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">modint</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="built_in">modint</span>(<span class="type">int</span> val=<span class="number">0</span>):<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">    modint <span class="keyword">operator</span>+(<span class="type">const</span> modint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="built_in">modint</span>((val+x.val)%mod);&#125;</span><br><span class="line">    modint &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> modint &amp;x)&#123;val+=x.val;val%=mod;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    modint <span class="keyword">operator</span>*(<span class="type">const</span> modint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="built_in">modint</span>((ll)val*x.val%mod);&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="type">int</span> n,k,siz[N];</span><br><span class="line">modint dp[N][<span class="number">110</span>][<span class="number">2</span>][<span class="number">2</span>],temp[<span class="number">110</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    dp[u][<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>]=dp[u][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=k;i++)&#123;</span><br><span class="line">            temp[i][<span class="number">0</span>][<span class="number">0</span>]=dp[u][i][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">            temp[i][<span class="number">0</span>][<span class="number">1</span>]=dp[u][i][<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">            temp[i][<span class="number">1</span>][<span class="number">0</span>]=dp[u][i][<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            temp[i][<span class="number">1</span>][<span class="number">1</span>]=dp[u][i][<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">            dp[u][i][<span class="number">0</span>][<span class="number">0</span>]=dp[u][i][<span class="number">0</span>][<span class="number">1</span>]=dp[u][i][<span class="number">1</span>][<span class="number">0</span>]=dp[u][i][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">min</span>(siz[u],k);i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="built_in">min</span>(siz[v],k-i);j++)&#123;</span><br><span class="line">                dp[u][i+j][<span class="number">0</span>][<span class="number">0</span>]+=temp[i][<span class="number">0</span>][<span class="number">0</span>]*dp[v][j][<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">                dp[u][i+j][<span class="number">1</span>][<span class="number">0</span>]+=temp[i][<span class="number">1</span>][<span class="number">0</span>]*(dp[v][j][<span class="number">0</span>][<span class="number">0</span>]+dp[v][j][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">                dp[u][i+j][<span class="number">0</span>][<span class="number">1</span>]+=temp[i][<span class="number">0</span>][<span class="number">0</span>]*dp[v][j][<span class="number">1</span>][<span class="number">1</span>]+</span><br><span class="line">                temp[i][<span class="number">0</span>][<span class="number">1</span>]*(dp[v][j][<span class="number">0</span>][<span class="number">1</span>]+dp[v][j][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">                dp[u][i+j][<span class="number">1</span>][<span class="number">1</span>]+=temp[i][<span class="number">1</span>][<span class="number">0</span>]*(dp[v][j][<span class="number">1</span>][<span class="number">0</span>]+dp[v][j][<span class="number">1</span>][<span class="number">1</span>])+</span><br><span class="line">                temp[i][<span class="number">1</span>][<span class="number">1</span>]*(dp[v][j][<span class="number">0</span>][<span class="number">0</span>]+dp[v][j][<span class="number">0</span>][<span class="number">1</span>]+dp[v][j][<span class="number">1</span>][<span class="number">0</span>]+dp[v][j][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(dp[<span class="number">1</span>][k][<span class="number">0</span>][<span class="number">1</span>]+dp[<span class="number">1</span>][k][<span class="number">1</span>][<span class="number">1</span>]).val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="AT-dp-e-Knapsack-2"><a href="#AT-dp-e-Knapsack-2" class="headerlink" title="AT_dp_e Knapsack 2"></a><a href="https://atcoder.jp/contests/dp/tasks/dp_e" title="AT_dp_e Knapsack 2">AT_dp_e Knapsack 2</a></h3><p>背包变形。将 $v$ 和 $w$ 互换一下就行。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;<span class="keyword">return</span> a&lt;b?a:b;&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,W,w,v,sum;</span><br><span class="line">ll dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,W);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(w,v);</span><br><span class="line">        sum+=v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=sum;j&gt;=v;j--)</span><br><span class="line">            dp[j]=<span class="built_in">Min</span>(dp[j],dp[j-v]+w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=sum;i;i--)</span><br><span class="line">        <span class="keyword">if</span>(dp[i]&lt;=W)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="AT-dp-j-Sushi"><a href="#AT-dp-j-Sushi" class="headerlink" title="AT_dp_j Sushi"></a><a href="https://www.luogu.com.cn/problem/AT_dp_j" title="AT_dp_j Sushi">AT_dp_j Sushi</a></h3><p>$dp<em>{i,j,k}$ 表示有 $i$ 个装 $1$ 个寿司，$j$ 个装 $2$ 个寿司和 $k$ 个装 $3$ 个寿司的盘子的期望次数。$dp</em>{i,j,k}$ 为以下四项之和：  </p>
<ul>
<li><p>$\dfrac{n-(i+j+k)}{n}\times (dp_{i,j,k}+1)$（空盘子）</p>
</li>
<li><p>$\dfrac{i}{n}\times (dp_{i-1,j,k}+1)$（放 $1$ 个）</p>
</li>
<li><p>$\dfrac{j}{n}\times (dp_{i+1,j-1,k}+1)$（放 $2$ 个）</p>
</li>
<li><p>$\dfrac{k}{n}\times (dp_{i,j+1,k-1}+1)$（放 $3$ 个）</p>
</li>
</ul>
<p>整理，得  </p>
<script type="math/tex; mode=display">dp_{i,j,k}=\frac{n}{i+j+k}+\frac{i\times dp_{i-1,j,k}}{i+j+k}+\frac{j\times dp_{i+1,j-1,k}}{i+j+k}+\frac{k\times dp_{i,j+1,k-1}}{i+j+k}</script><p>显然，应当按 $k-j-i$ 顺序枚举以消除后效性。边界：$dp_{0,0,0}=0$。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> n,cnt[<span class="number">4</span>];</span><br><span class="line"><span class="type">double</span> dp[N][N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a;i&lt;=n;i++) <span class="built_in">read</span>(a),++cnt[a];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j&amp;&amp;j==k&amp;&amp;k==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">double</span> inv=i+j+k;</span><br><span class="line">                dp[i][j][k]=n/inv;</span><br><span class="line">                <span class="keyword">if</span>(i) dp[i][j][k]+=dp[i<span class="number">-1</span>][j][k]*i/inv;</span><br><span class="line">                <span class="keyword">if</span>(j) dp[i][j][k]+=dp[i<span class="number">+1</span>][j<span class="number">-1</span>][k]*j/inv;</span><br><span class="line">                <span class="keyword">if</span>(k) dp[i][j][k]+=dp[i][j<span class="number">+1</span>][k<span class="number">-1</span>]*k/inv;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10lf&quot;</span>,dp[cnt[<span class="number">1</span>]][cnt[<span class="number">2</span>]][cnt[<span class="number">3</span>]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>【MX-X11-T1】「蓬莱人形 Round 1」仅此而已，就已经足够了</title>
    <url>/2025/07/04/%E3%80%90MX-X11-T1%E3%80%91%E3%80%8C%E8%93%AC%E8%8E%B1%E4%BA%BA%E5%BD%A2%20Round%201%E3%80%8D%E4%BB%85%E6%AD%A4%E8%80%8C%E5%B7%B2%EF%BC%8C%E5%B0%B1%E5%B7%B2%E7%BB%8F%E8%B6%B3%E5%A4%9F%E4%BA%86/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P12147">题目链接</a></p>
<h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>定义 $f(x)=x\oplus(x+2^k)$。给出 $n$，求 $f(0)+f(1)+f(2)+\cdots+f(n)$。$T$ 组询问，每组有不同的 $n$ 和 $k$。$1 \le T\le 10^5$，$0 \le n &lt; 2^{29}$，$0 \le k \le 29$。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于 $T$ 较大，考虑 $O(1)$ 或 $O(\log n)$ 求法。先打表找规律。因题目有特殊性质 $k=0$，考虑先打 $k=0$ 时 $f(0)$ 到 $f(n)$ 的值。由于涉及位运算，考虑同时观察二进制。打表得到  </p>
<script type="math/tex; mode=display">
f(0)=1=(1)_2\\
f(1)=3=(11)_2\\
f(2)=1=(1)_2\\
f(3)=7=(111)_2\\
f(4)=1=(1)_2\\
f(5)=3=(11)_2\\
f(6)=1=(1)_2\\
\cdots</script><p>观察到一种对称性：$f(0)$ 和 $f(2)$ 关于 $f(1)$ 对称，然后将这 $3$ 个数视为一个整块，则 $f(0)$ 到 $f(2)$ 的部分和 $f(4)$ 到 $f(6)$ 的部分关于 $f(3)$ 对称。同理，$f(0)$ 到 $f(6)$ 的部分还能继续对称下去。为了方便，我们把最短的块 $f(0)=1$ 记作 $K_1$，称为 $1$ 阶块，$K_n$ 的长度记为 $len_n$，$K_n$ 内所有元素之和为 $sum_n$。则 $K_2$ 应当包含 $f(0)$，$f(1)$，$f(2)$。以此类推。<br>接下来，尝试将规律推广到 $k&gt;0$ 的情况。<br>打 $k=1$ 的表，得  </p>
<script type="math/tex; mode=display">
f(0)=(10)_2\\
f(1)=(10)_2\\
f(2)=(110)_2\\
f(3)=(110)_2\\
f(4)=(10)_2\\
f(5)=(10)_2\\
f(6)=(1110)_2\\
f(7)=(1110)_2\\
\cdots</script><p>我们发现，$len_1$ 变为了 $2^1$。而 $K_1$ 中的值变为了 $(10)_2$，也就是 $2^1$。继续打出 $k=2$ 和 $k=3$ 时的表，发现如下规律：<br><strong>$len_1$ 为 $2^k$，$K_1$ 中的元素的值为 $2^k$</strong>。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>考虑分治。<br>考虑从 $K<em>x$ 推得 $K</em>{x+1}$，我们发现，$K<em>{x+1}$ 应分为 $3$ 部分，$K_x$ 作为左右两部分，$2^k$ 个 $2^{x+1}-1$ 左移 $k$ 位作为中间部分。容易发现 $len</em>{x+1}=2 \times len<em>x+2^k$。<br>反之，从 $K</em>{x+1}$ 推得 $K<em>x$，有 $len</em>{x}=\dfrac{len_{x+1}-2^k}{2}$。<br>由于 $k&gt;0$ 时的 $sum_n$ 都可从 $k=0$ 时的 $sum_n$ 通过位运算 $O(1)$ 求出，考虑预处理出 $k=0$ 时的 $sum_1$ 到 $sum_k$，之所以只处理到 $sum_k$，是因为 $len_k$ 刚好略大于 $\max(n)$，即 $2^{29}$，已经可以覆盖所有 $f(x)$。<br>其他实现细节详见代码注释。</p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p>这里的递归过程很像线段树。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">536870911</span>;</span><br><span class="line"><span class="type">int</span> t,n,k;<span class="comment">//同原题</span></span><br><span class="line"><span class="type">int</span> len;<span class="comment">//中间部分长度，同时也是最小块长</span></span><br><span class="line"><span class="type">int</span> cnt;<span class="comment">//阶数</span></span><br><span class="line"><span class="type">int</span> sum[<span class="number">40</span>];<span class="comment">//k=0时的块内和</span></span><br><span class="line"><span class="type">int</span> lensum;<span class="comment">//大于n的最小块长</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;r||y&lt;l)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//超出范围，直接退出</span></span><br><span class="line">	<span class="type">int</span> len1=(r-l<span class="number">+1</span>-len)/<span class="number">2</span>;<span class="comment">//左右子块长度</span></span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(y-x<span class="number">+1</span>&lt;=len)<span class="comment">//查询区间已小于或等于最小块长</span></span><br><span class="line">		<span class="keyword">return</span> (<span class="number">1ll</span>&lt;&lt;k)*(y-x<span class="number">+1</span>);<span class="comment">//(sum[1]&lt;&lt;k)*查询区间长</span></span><br><span class="line">	<span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)<span class="comment">//查询区间完全覆盖当前区间</span></span><br><span class="line">		<span class="keyword">return</span> (sum[u]&lt;&lt;k)*len;</span><br><span class="line">	res+=<span class="built_in">solve</span>(u<span class="number">-1</span>,l,l+len1<span class="number">-1</span>,x,y);<span class="comment">//左子块递归</span></span><br><span class="line">	<span class="type">int</span> l1=<span class="built_in">max</span>(x,l+len1),r1=<span class="built_in">min</span>(y,l+len1+len<span class="number">-1</span>);<span class="comment">//这里要让中间部分与查询部分取交集</span></span><br><span class="line">	res+=<span class="built_in">max</span>(<span class="number">0ll</span>,(r1-l1<span class="number">+1</span>))*(((<span class="number">1ll</span>&lt;&lt;u)<span class="number">-1</span>)&lt;&lt;k);</span><br><span class="line">	res+=<span class="built_in">solve</span>(u<span class="number">-1</span>,l+len1+len,r,x,y);<span class="comment">//右子块递归</span></span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_length</span><span class="params">()</span></span>&#123;</span><br><span class="line">	lensum=len;</span><br><span class="line">	<span class="keyword">while</span>(lensum&lt;=n)&#123;</span><br><span class="line">		lensum&lt;&lt;=<span class="number">1</span>;<span class="comment">//左右子块长度相等，直接乘2</span></span><br><span class="line">		lensum+=len;<span class="comment">//中间部分</span></span><br><span class="line">		cnt++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;t;</span><br><span class="line">	sum[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//k=0时，f(0)=1</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">30</span>;i++)&#123;</span><br><span class="line">		sum[i]=sum[i<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>;<span class="comment">//左右子块和相等，直接乘2</span></span><br><span class="line">		sum[i]+=(<span class="number">1ll</span>&lt;&lt;i)<span class="number">-1</span>;<span class="comment">//中间部分</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">		len=<span class="number">1ll</span>&lt;&lt;k;<span class="comment">//中间部分长度</span></span><br><span class="line">		cnt=<span class="number">1</span>;<span class="comment">//阶数</span></span><br><span class="line">		<span class="built_in">get_length</span>();<span class="comment">//获取覆盖0到n的最小块长</span></span><br><span class="line">		cout&lt;&lt;<span class="built_in">solve</span>(cnt,<span class="number">0</span>,lensum,<span class="number">0</span>,n)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>时间复杂度 $O(T\log n)$。</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>对于 $f(x)$ 的值的二进制 $k$ 位及以下均为 $0$ 很显然，因为 $2^k$ 最低影响到第 $k+1$ 位。而 $x$ 必须增长 $2^k$ 才能令第 $k+1$ 位更改一次，所以可得 $len_1=2^k$ 和中间块长等于 $len_1$。由此我们还可得，$f(x)$ 的值发生更改（在 $x$ 每次加 $1$ 时）当且仅当 $x$ 的 $k+1$ 位的值更改。如：令 $k=1$，则 $f((1)_2)$ 到 $f((10)_2)$，第 $2$ 位发生更改，$f(x)$ 的值由 $(10)_2$ 变为 $(110)_2$。接下来考虑高位。我们发现，$k+1$ 位以上，连续的一串 $1$ 会使答案形成“若干个连续 $1$”的结构。而高位连续的 $n$ 个 $1$ 的变换恰有 $2^{n-1}\times 2^k$ 的周期性（乘 $2^k$ 是因为要考虑低位）。可以联想一个二进制数的不断加 $1$ 操作，观察最低位连续 $1$ 的变化。以上两部分结合即得我们观察到的规律。  </p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这道题规律优美自然，充分运用了二进制的特性，称得上是一道位运算好题。<br>友链：大佬 <a href="https://www.luogu.com.cn/user/1411149" title="yonghu10010">yonghu10010</a> 的<a href="https://www.luogu.com.cn/article/2piluq58" title="题解">题解</a>，与本题解使用相同思路，但实现方式略有出入。  </p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>pb_ds 简介</title>
    <url>/2025/07/04/pb_ds%20%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码看着不太对。" data-whm="这个文章不能被校验。">
  <script id="hbeData" type="hbeData" data-hmacdigest="445fa50e8eaf3ff0e1e7af23d35121cee21750f6bd7a25126e01b9cc8ef07f4f">8ade9e8308e767f1a274156f57751d9a3f5b26898da3a0bd68eb817414d883a02385c2c3ea4911c98e45b151c423c781fa66442fa4bcaf3f7f9926be9d54bd355dcd140a14fe897713a9b74c7014c08700a7258d8672e450a3308ba0dd80e09f599589cbe2f0669e654c2b39ac502b9593453e60b7f78481984adcce30e8df2cb4d8649549fc5b07843351eaf8a2ccfd50cad227d04c558f267426ee85a508bad28ffe1505498b851be7429868022b2ad6deffec4c946f6e951bc6a6c9e631968d73eb46f33913eb33473dff3bb37d8130c7942699429675459c1962fe7cc61bc1210f6142496a3cfadc2086dfa4d726e7eaf359cf5a4f18b467bea144bc57d705ec8f55153f764e92d273f1dff0241c12f599794564d705ddcc7a7482e5426e95576dcc12d0648568b37d27563be7bf02319ad8d60d24bc797662f9c681bd12ae57b47c81f3b6249338623f6aba5c2b41ea8126cd08504111d763d6958bbf33af628da816e44dd6d48f1702a5c5c0882db66b8d2056148dd2fcc284047a47479f60ce368f631df2adb50fedfe50b03e22b35102b7064113562d2f795c5e35c19a6953fa09380355ee1a5d6a381b2623417955ef47215a7f2535b235a083b7fa2917fb0280d49b69dfed8a932d7cd3ad87bb2a4bce30dc7636664377e3ac0dce64a66342ffbf41d5743a37a36a971c01d020d6d72553f3e84a2be94f0601be0a4297a184556aadbd5964b8f47344b7b03740dc62ccaf3216e4bd5ca04acc9e9cae3fffe28e6ee28e280c02f926ebff9a5c0e73cf6b3779f1e401ea86ff335be7ffbb97d3436817dea740fe263c80fccf7dec23b4d8c8c7227cf000d25c2fc8925940969815b35e0ab5cee9bc8a569a9c48dea602b05c2afd963ea15b42aa797b0fcbf63addd2e43134748d960caa7a3c4c351fc15372dd8019e7606d3e79d6e6c42f7f93686f8030219fb13de019885d10cbfa3cb820fe561eae976af97c419474cd0a7cc043036d254fffa750fd593b7384a3c7faf7f6dfcdd6a4e3618d597807d03c089b305c067fde49f93180fef81cc103ad39f113f84b8331633b3c3c8f61c26e53a5da0bd08a040e29aee7c28c6edda1c524ccc29664deeab223552b3d1a906f2f08e1338746253e2930d5a22faf2153af8e0b9e91469c3c9e8f03a210f9027d9d5eca7869893f5bd51498e4ae733de7938c333f82263997d8f551c60a475813476350ae51741db4c58e80800c8befef945ea7ff5987708307c8ee2b5dec104cf4af9f656fca6a04fa9c14c19838bfe28619bd00e9d890b14ee0e5e8241f9976ab5b5c952a956f01ada9939a7edef0436ad53140b0970420b239f9faacf5372e7380af18c832c00fbe316205155af693c88d17e4d4f3c632de1f991ed904b828ec5e2c664e154a8fab57cbf278af119932a025b5dfcfd326e05854e3a7564713f8d9a78560432b06c98f131526f8f0c1a36822c1585f17c38d3c93135f8b6866ff53c48fc6de964dd9d9436b5211dbe925a02aa4aefffd9f1430e02b0d96f8160028b297331987f17b5ad21bcbd33183159c31f522818168111220ba36b2c1590bd47e0be218894b36dc772eefd9a67730379abd6ba72eb3948557c607aa1c9164523d1bab31633c953554fd0e65e905f658d4b78adf72d64ed295cafffaad1e65a09ea76d07cfc31c77ddc3442a204d74bdddebe08d2b57304a2fb28919ed6529619f225b4502fe8ea301035a5a17be3ab83d003e8910142c829a2584d639cba761763111529938fc7a87c5e7bf50a6035a69cfd8c63f0f3c920bd2af12dc872fd80d48727e051a093f7568faba668e0cb18a4220947f7325292fcbadb1734d7f41b4de202da16381693d339c01fc4b23cf15de794cde9918dcfa3a0eb4ad9d31387f751bbd506c6b701e4be15e6579cde44e0b5f338386b67e1e70167570abb844876a67264eb52af5b22d5e691a39e65b5c70e232948fde6c926caff9cd72df79ab2482e9b2aa4b53d6d0df3f8e1efc27fe8924e0b1835038eeea3635078f2183dc786b3ff912b76e1f34b06f34d89a3bbfdf372aa5d4a058cf0e88ade56b12c7613417bcb5da76caf827dacdc2c08aa79c4293914d58e5619ca6b348f211c2e2858de900b86dbd5bd16d7da21f3892b8caacb5f165d43c6658146ec3e30bfb634ddd7cdeaa6dcbf4766335fca3600fecab8e9295fa24b02c63f169e5feb97826b7fc46f0b2f32a9c5a65680f7138e3e14c03989435d024e666efdd5b51d905e426782b47f2fa98f7eb2bee7a8461d62a56e7ab1e46f7dd2626c09506cbc9f30f1355409788be6d1d6b133e4b7e99ee07af4e64223c87f32adb802b2f3328834452a45c00987729a4f558d1fb2509d147767c499741ffc89d5f89d473de765806773a59b78b895a68476dbf4580e363c63ee89aacc80145a180c7c4302422daace86bf6d511c374279e451bfae119619f190d73b5670dafa959464269dfff0f1fb4c983e6d67baf4a39761229c17997b663fd9d27f47f761470a9a6ef81a0be7d16c3ecb9f8b944e68c581a1c8afd5b5c9bbcf64f870337a2d95172c35014e49cbb9318cadb94285cbec46432162a4204e40fd4cdcb236567b059827991fb8198663ce69abe4d42f332e7ee4aed28836a6bc8bb964d2567b1817ed83ce1c5e3084b0afeadc87fe22ae1f0ba8d8353605d07150ca0cc996685325e8d508ebd1568842ecf667e84a51d6421efd903d8ac982a7baf4bdab782ae58bab4d36b5c6ad2dadbfc44118d495b0f6c21813b351c550115f56e3e9b37b245d5b7de7a6e1b34757a23fd2205a3512217a1570e2ce559c6a472cc983a9a7fec40352a5f7ed6d3729cf817dad563d5dcfb349093c06b8662fa564973add50be19ab863f5ab2fbb9dd2e55acb25ac311dbb76e2fff1057dd8df9b9af694954842e105b54148ccdf082e5dda1f8eacb69307bfb62c5e1c984e4bb16b307a10ab6ac720754c6bf9d51d6156311db770fd3726e2b0e83c0a3416e356074f5ade97c6b16bdd51ce38c8d21f2d768d9d91be2eb1e35698d2d1f5e1ee3407539c17a9c3f8efdf558e42d1bcf709dd7945c79891f64556fd9d01b5e84932420b95bbded79b09dfeba9293d5f14ab12ff8c3416db6460e7e9e040a9bad67a6e7176120bb6927cc07ac5b54a793732b710a968c250458100184ce2d20df6e7ed9c1f9c51fa7da89d900349484fc817790aa9895bf0eec8ccdbc1a603341d648faaa5329188332fc9f08c995acb312a45f9041c84d794a2149761fdeccab502d785ef68ad06ee98c2b2dae3e62ae7cf76c4cf1e56cb564952012b794671951a078b0e837ae7f2da7cd0881b716d3dfa2c006bce69d70ffe9284306b4e25e12d68a02277d25f299332f520a2b43af521d5ff924d3b4c461f74b6ef15d01e633a535295cca600f62315a1bc1410e4fda04582e3c74f1e0d14b75098fa57b3c8b661e1eb144feaa0dc03969f61326d0c20e9d1cb3a503cc24873f28d027b0fd1473c7c468178d8c3c8c3e50589ebddf113d622211c878f88abee18bb43e01bd9ea8e3954337ac2bb153a6cf0a29b14839f72ba083ca5adbb9fe1ef62bb8ed075ec12f77616c1f1d1afb296899c27cec7dc1cdaf30082ff50c6f217501ef6aa6a0c71d7b69bf442ca7de746364fc43caf106973fbd787f7d2dd3e598845559dbd0691754fbe37929f4d14b9eb2148ecb572c139236f783bb4c85cde8cc8697a316e4f3389333409b6c94888ea7dac08602506ca1ac3f99d88700b6767e8391b534d44f6dcfcb45056cb8c35a2a27ed6205fad81ff410df26719e233d28648d125603facd6e0f24b9f04f022cf6ee62739706e529927f8121d424d1f664d2f0c67488c332ba12873d6104fcfb2865c0d4deb71a130b2054803ff41e369debefc4d662023d731c929e0680a4f764f5a5411f5adcc4a3a7b330cc9990384d4ed6b2479406406da4552c41db5cd2352022d052c502f7a03965775b91cbbdcaa3cd15d8e51473d041467f0476dc933afd68af47ac6535e83f7ed44a35d9404a41c1f4c5f5d2951ce1ec30b11ad6f1fed4ced9858ea68480f5b7266baaf26ad2f44d4ed55e89006c5955c1f12c62798506ed87f068994527031892701cc985ea4b425e3a2a3991bb538cfbcb6478fe65793c065789726072f41b4078dffa89bd0a8b6172ca9250b68380a12e7fb1ca96ecbd7271a3a4587fc857f2eba9b00f87f7fb5900c4806763ac085c56cab691baf2f1d039e924544b3a80e61add4499ebf63bab303bf4555c4c74bf1690ce5c5d0eeb06f0fd6b07ffb765700f4721359c0341d0f29fa99e194bd38f8c1aa8b81b955ad0990a4535a3665579d2641390bf73885b326830834ee6074572ae68399a9da7c849b33ff8317f437faa92170c0f4aa1e7f1e826ef5d885a330f7410daaa2b500813d7b4f0d48164d1954038373d84b98511f215a79931551d3dc3c9d9ddb2ec85eaeaf735829a75b05fb6dd1b8f94d1771a3e34c04db51a31760517d34165abcbdd0321e7be1f67b84432449c93334d77e1a3154ff0ef08211c47ab9aec24d106553c022be710019d48780a37292b7a9d84a61827d1bcac51a8e1cb9271f7a5aace1000381d342800ecf8d8b3537544d432155aac7b3cf881b5642ee4aa4129946c48d865a5a0ae7b4eb4943389c9a09456cc9962425d1c39f61cda53df048ef0ffa08107d2052e375b64a34223cd29ec6d9b77e2bfda6b586c2661a67e09c6fd4c6d05b34183e011a0ed8557f671cfe5e2ee5fff6d7921a7a7e5648f38c8dd0211790a85be502b249bb9699b51e5a32d1b538c65ab9a681a68c8c464ac4e54dcf1a185209274771141368a995440a02efd5112b7208e669465676a095e234a4337c2fb155263175b379b3dab69fe30c3fa9fcf4b0a6a54737ab9f4272a895ba3051d2dad5e068f9a5bd872a5e110dc1d8469d53ff168b3b1924b67a614313574f5df68efe3821473e782e8d0433d07d5487efe0db927a65186d0534431d340b1c0848b450eae9ebf76c37376a8a586a99eb7ca822ecb72bb5f1bfb0c7ab6a30e7565209ade44cda1ccbff32e9db64eb6dd3a2d43308c087533761f9c5c633d5d75b13802b82e752fbea14944898651a0bf5cc7ea627619abb8ce589e10e0a6b13c89a256d6f2fca79a1b5b4fd0de08cf3409a93927002e35f105bd57e9838f84eb9d81d625a9779c478d179cbe4d25e8eac4f6aff84338fa0a52cfa63e4c41b47a2f8655e9c98a25dedbd28733d747ef455049b1077d0f2d6342df0456842a93da1541fd95775567ed251cdbc921874679b442f48c97ff675dcd3a9f6d0a75974462d997f786367366e14d184e3652b517ecf4923d25e57337e89fdc2ecab6e3b98b1912c39e223ff1d01059b1bce9660d1f1444304813fb503c16d0d22ba91cf60839c839c401a9047f51331edee09e1d669fe488f2c747d09fa61bf97375cf5297afc5772e068197bbb1b65122e7ad2ee5d68a46166433f46743b3f5852005fcdb9dae66f82aa2b344befaba33592961a9c4a0d41b5a67e073879e730cac4205f05bef37e4718ff090afe7c0fed870b551839300dfd7c1241fa39b6944420815826b534e182e230eafba64581ce9c598c2abdab00941c43283353fe1a64c17360dce697840fda7ed322b3eb5dba827ef14be299b89248264cf7d0385053de2b9a613292ac7d67f9fcf6a3c8e766d34ccb486b077fe2a049600a5b2db28e0fec4c50e87ad1028e849121c1b34dc0b5bd476c79197fc87239f54e44f7d196ddb715d46aa61912297b15c7a88953b4244c73716ef74cda28e7a5d3e542a881cf4db682a9a525879c122406d1bc3972c74df24c709a0a4773f4fe2bfb59135eff7a16de05bd31d6ad8f0f90dbdbd9f4e64b2d01fe6353a482719501882b16fccd15a3c23133f79bc11a641cb229cfc91a50bd07b4817cc309a4c7ffc723e2b847cabd985a4ad230a25416e17d7bf59f7f7db019ec6a75e22d5cb19d63eeda456dacb2073442342eeef842bac5d7a2e2bac56be312fc706b708915e32704503f9157d663263547362aae794bbd037b26b36890b075cc9712391a3e7a1163686ebfd3b3e24e003fb495f7b91cb5657bd3bc78f17aed2c13557863688218409c82409a9692114a62d687ee47f0744204dfbae898c8ba7cd80b994119c61178c57d1b4612a9f9df03b708daaf2b2e2c403c9ee06fdb9b27dc2433fdb1ef3b94a0b8f2c56a61db9d99815bef6fccd30180eff3881b8544ba8ed9c65f2a05d2c3caf6de0bd09bed9036c196c7fab6a5081cd8616f0baac2ef2b64e3d7c4c13132bda1f58b2b925d8c6f1fd02c85414d4090ad41cebbe93c198f0bee1673195be4fbdc6507c3892dcfa4e78dba6d0151300c8d65448e1182057e9e98378c25eac8aa359c6039ed34c9cf1c05a4990c621c1ac260727ed7bbaf3ac96c89a40ca569e2dd2cfd5e2d36464888987984efb2ee785dfb8452ba9f7468107a4cccfd745bc48683e68459950860ed289201192e0dddecb4898149a30f1d26e5f663f82a3ab538a5779e2993db5b3977dce0366184484488760072eb2b74a47cc97cab8b3b95bb4e49b2ae691f165a832c9713d391c48c018bb5754afdf2e79cdeb8a85828eeae5f87df3ab27481e0aa31dc7312fc35289a3fe24cf262da760fe60b00a5a9ce840afb0033e0f4599ecf8c0529994703efb97ce5090138e21e510acf82b4e98b89274cb66308ab7779f7947e2ef188bcb258a14adc53db859bcd2eca5381e6c10c46efdce19c3dc3cb0e734269dadec6ae14723148db424c3135198343ba5e971b54870f016e6ee296d033ddfb44cd1f59a2027cfeb85c2df39888d2d614043d9f93efddeb7e038d6ebb678dbbe73f89e70ec090f80fb520cb357c46ad3359c7996cd9f729b954ea77d61922256a97358a1d05028d5a97fbf643e7d15d2f6d1afbfac3276f16eaf1c7562a1fb57b94fe1acffcb3503fdf08a1988115b72568daa69f37b858a3beb6179c298a2ae6a397dfc5decea315169156db170a3f377087f1f8724b738181e9d9256465c2a5c893c7d9f021a3a7dfbf67afcfc4a427be897a31218e9980b7e73234872566e5ff8e375b8a750a3b243db16de1b8cd31d60d22e9cd4b104139c624981f86676a29409c434b83b10e2e1f261ba7f2c6fc05dd1284e5f19fd36fcf7b70db83c826462167c5ac3c59f623c4eaf4d9f586dac0e3b7d91df77b8ab0da09e584ab877f8b403aab2bbd3b294094b58f8709c3e362c65b0b50444b09cb0fc13010d8327110e797caff2b073cc6d1c658092453d0ecc09b52a7e920c6e888ba3e409b73bb6838dfd715a5b7601dbbb63fdea72b148e5d401eaccb5ff6d061bbd960dbc27ccb4dd9bf0814e6a447c8dc274cbfd6b39f8472a2f8cdbabbf7427a87b61941d287b910151315e1fb616b05b0c39d167bd65e4150e6a0ee8429116a674bd4ea2154f02d5a0473f0d2a590a26d6c6a08d9f67d49a00ce2dac31aa85eb4fc6fa9337492bb45ab080f9da121254e5ca492277d6931cbfef18504fc2c345ce7bf076eb50015087249ce4e774601ae3d7df9c28b9c781688b25b3928b2eff4b0579428db0bd0f728b583a18e7ede44004063a343a9c988e769da4b78d89a131c2ebfb6454e5a1ada2d070ece1dec5337cbcef7441c07125049def4c1702444f2019cf11f15acf188c0e7a875e4546ca2d4207026b6d71b99c057dc0d0eb5949bb81e80c83761703fc11e853b4b873b758cde6ee80441cab79c4947be3ada57add4551229b3b2bd9763682d065241002d5b2f1ffb3b645e6f5a6156e47655f459fa4567eb481a6441c18074fb7658920fdf7aaecf5bed679c97993801ba806af6daba3f1c238ff9556bb896acd8cd8b7bfb1676d870fe41de705dd40b74b4124e2f6a7bc2bbd426c27e221e0b310d675c002b1f7d87c8ebabd1ec0f339a29ad426b705da55843c9043924004e4cdc1bb3fc6495967a3e8ca1e92c28e13db26fa877cfe74e33a209c845db76d309b6b5b2b41304f8a3653b792e62f4a996505ce2882b07ae98821730e8ff35ba6486618dbe86e2ee593ee52d212180cd7ed8d6e1a4cc0a89ff08a13b4b5679f4d277ca0531225ab52e680464caf8df6ed80a2f1f9ee7b50e8eacefae4f6f3cf58def97dd9809d1b552e6dbf4b40358d90b6d61b0b597780898ce9dda6e4a4677ad0b1d2f477ed7faa609d325ece49f6212bcb97ad04e0e6c83cf8c02ab24b112eadb6616463adffdf2862af49c8f57e0835c0625f1df54ca4736573dace39b45a79ba99df4d29df448197e4bb0a19745494cddc7eb6ab6c0be350e001c82aa3c5465e3b060797cda204e28125aa916ec1301e934558fe79060b244d8a18d3009740bf2fd8f785119dca6743252dedf83ba82964559d01e4a91cc11aaaf96d39ec24f685540539637aec280a4891d5af809f1d09fe4e1ac0e83795870826ef9575bb9b038b07448e7e91617865467143d16aaaa0ecbb720af35e47cdd38973753c41302128070323cf5866ca31e5d9d1799e28fe2eaac8ef2a1d03559d7cb5fd255db1d713fd10024520e12bf258a6fe4906b8909ed2d55feff2b47fa6cfcad577f87fd5fa1e019c6e5226eac227bc30cb38290f6e99cddac7d0a18a23d4fd7603079b031c701330a54861f07374891ce609852b9c610d0dd7a88d50f0da890ff163f9d794a4e21cbe6240e8ac239a615401f5f03e3b173428d161b1b7eb8944001c23d1510dfa2b32f0ea75c2e507b58a601af9a1292eb38a9dd4fdaf3f3ad63ca0158bb9ae7342386ab88c043a81b5ce4f5fbdacc2c46f715abe6dc59db30631acb6a8fbec4516cbc2ad21e9fd71dfa9e2ede97ac0a369dc3bbeaccceaa5d37085b33ecdd6fa87f05311b3ed51a1e42763da9d53ac50d2dc4fce89b1f3c534a609b1b5c6050fb138a1e19239ad493d353be3a6703828c1847412f982b73bb95a34d48ca8564cd21f18d5a5cdd32631a6c54d64c249035d5935a0fd3c1bdc2f90091a2460b3c7329d28b1406c26df4c127dd76f759520fc02d2920211604eef2d00b3b96b26c945cc963569a1ef07f6ba7430df65109591de69a3bb034e4b32460420214107968abb84f153ec15883d11c82d7c7c618a65fa279225fc7d8341890f081cba8f5605f034fa8e04a67d6edce9fe74135f9e16e9cd9e1ae7f11e09a1cf058008dd1c749bd64f100bf5647a1c38fad04c4dbe93ec9439999118c4ba3534ebd233add2f7ec6dad30f92bd75f023588e2291eda14fdcfdc552e79afc22ecdc030aab0c2b6b59395ed1b3327c5231d46979bc26ed6801303a7fe6fdf250f95d4d084e479734e5b111964319a006f03fa63d6066454334d8eac24cb2858f175d022d0a237fbe29d455d6c50e8a11a89ca31ab1d8147f69bfbc8448e7f7ce09fcc30c66b954cdb3ec7737ebd459a149dc013a40755caf470f1d1942e1cdefd2ed9e96eb5813dadefc3e966f6a67c530b14be9cf0baf4f23e3ad71b8137acb69c4de87f868a313f266fa4e97d65dacc235bc7e5a723a2b75dbcb0d2566068b5b3a0daaa001cd2088d7be2bd517238bff1c0d52e8c08674975e6a886e4aea01cc70a4195248a406050d8a5ee90a4c2c570d4c52cc72ee3ecacd18b65dff54c3d60fd610062272a7359a214405a807111846c4f58c098bfc365af52ba53f171a1222fbae24c3f6b077ade63603ba05dcd566db226ab0e58fb947d404f6df87dffdc33ae7ae4a4c032e66fcedd7e2fa074bea627b3fbd6048234b4968a9bb512d90ab8f4801115f59281faaeb7a3f3471b68335524015a3a84d485bf2fdd8e59cf7ec160f7a70f2b9e0bac4b62edb711c87b1224c1d65480a006a2bb300f451e27af26e09dfc5c8e8488213b2d03c0c0bc8e862d7e35c904a7f821c6fdc7e6b49a9e4b6099f6042034fa1189144caf2f88a08040c467834c8e8a74f6f1e3b33875f36f679f173ecba1d107895e479500f95604e299cbb0243eb73b5d2e082531a92441d9ce141ef7199694a37a5ba1d2c1e37cc6cfd13a1f229bde0ed4eab541ff13567e9e49ddc992e36e64d1afdc3b2db6fb60bac72211dabb36900d2406beb2fc9a1c6f44c3a2281e9a001eeea5ae78578d9933c4e373316afa44c1f2df9ded2f1fa954d6b37ad76d3e05482bb8f5ce0801501c63398a87b7b45d9d1bbe78ab41acacf405bc0d661d3e82809ebafd4150cca69ceaa3155f86240b94a869bd6c9f48f1cd7c7f0863cd42d54146ce9bc1115a9f1576c804112d6f3197d0ded5deffc069546c3a86c51ffd1c2bc7e349a360293ef5c603959bf254f15838a503f6ca1510237ed4b26421aa90cd88720d4a1fba3e59c45e8be9cccd15ee862ce5c0dca9cd65f9224aa5b2ee689a400b447194207081d7d72137d4a3840bb472e893dc87e8f33d2dfdb8e121ffa951972a8a4f6a34685019f64c3284eb02b45ed22c4e40d1a8159b91d5d9ace1a65e8130d45a9544a7742f1a9ec37d58a73b719fce44f7373187d18e785a08dd4348f8b423e2e0568bae0102d778f7a8910087348a10f2cd7fe43441767171ad86b9688d273ded6171a62ff0fcc8d1ea9d862f85234e8e5810c05b1a9f3fd256ebb046dd9e6f39d1f9193382118d9eb643faf4db190d139c916588d7b26efd81ff8862025bf523c85703c192a36d3c17181caafeddea5ad2e6deeddc6f326f5f0c343bb6fb08bdf4852286c73757914e4f8430695fa5eb30b74913bb967370f0b19dad40080608e962078015b9fa7d7feec5a28f12813956238630760b044a7ec42b6e99373cf20e7b428d7c249f511287fc5fe7a311d447d426e65db08fe9cb7ca9ef36450e644105990de0be0d3ea39a5e0c0a5b3cad22743bbce89ada5f58b9d30418bd8611fa042ec1dc8898b24cacfeca023764f796cb6cd09c7cda78baae404357ba8a9d2b04ab5a4d672e65240ba33144460a80995c19664a29e1390a6ac2b052863f4543784461a54e632ee4f6cd895abbf68975f0adcd99130b07c847e47f26beea0f8eee7ac813d1434f03e12389372ae1c3a6ad84579334cc8419dea7a9bc83b14b4dc0ed630535c4d245215e7f8519f23459786008243d10546e8916698704602486a00bd646474659ab591839e817fcc36752758e1a6ae8d6ef3eb41fb1f715aa20abf55ced29583285ee8b8e6f1491e19fbd26714d29a43b7d3badd2df6484155e1fbe31deeb9ea0fa58a0685888a2be530142bfd88114f0b3cbf2629a66c92e51e0e54e120786a76240cbc927986ad7a3dd3522cbafe6d6c161e87f40809fdc5c066b0c7df1dac6609997eb2dd36db4fb11d5e84a179ea4fe6ce6867af8dcb9081a94f112d79f45bc69218e7b1fb1d34e05c7d5d341fc69cdc68459f12e11d00575e4e7bfa7b53f43141c71db1ad6ec8783f877eb44676d60beb7fe4ee9f9972c65b61f8e16f4d68b6d36fd21f63539c23f8467dd080b2fc04d20067cde6328b2cf4b7a1120cecda44ed508ad13d3a3c5777b59d4e6d2a0c8b52291f2928353dac9edbf47a083ff127487e690f708da4f10aefcc71494fc10c235cd04a661b2cf72ae09b74a8ae1578621d3ea9bee66c1664fae58a23c9f57046218b883e28a9a6c27cda0bdcae4930e1af40991c3a234d502fd79dbfded67a89aa1de993bfe5fd19026fe5c7e9587b353d2394709167a1fd5fcd257e432d2053ecc40003113ba1389d16991a44ca6bf715ba51531a1127c9bf68594bad30b058cb876d5a63adbbacbb29c2e5a3c18c083ded3864309d6b7e811c40e0e2aefb937eb118f15049d76b98540c3997e01ad250d8db1268a126bab63dc2d63cab22eb1667dcfc3d25a8c45dab9d9eb18a86de441a90fe65e592b3982006dfca5e64605b6be852c60d1e46c224da04d3787147647e3cfb6078cb596056d86c8f1b254f17d2697d0b75291ecf9f6ec26762a1a33f02a79019ba3c4eed2c2d037fa0f29a4a81f75cd56e22e1936b92546106857d69f4961b98bd3a160ccff28abda57927adb0b20b61cb350f7fc585b68c7a100ae2b0ebebf09ff14b9bc9cb72a8209bacbd0fdfe412a849d6ffc0252c359d790e6526a3aef656c6134b243362c1fa83635802b962e7270e22810fac4ecf5aa7532824743fce1d567c611e7ed1be9d86de8267f17e4b3d00f64d698765dd8e9bb963d4bb4f0065a867ab215ede041bcd3d61c46c105534e509a54b39b591e2b94bcff0f06eafb951cfa40d433854a702cc5c5a71edeec45d09f05ec9ee40e655e08de071bc176f5beee255b63624f58f0c684464b9662fdc3b58c2cea798455b2bb3c5705b71e720f67badd7be825729912b1c3c9b35c088c110a7a128474f1d7183f8eee0242b9a158084746be211d1f040c9b41c0aba13bb42205113f687aebbcb60f141c8a755a1bfcb150149f19a9035028ee70354a349d121397e1e3039dab38e66336a9318938283314c83358019369faf7de8584435a53aa1c80ce6ac86422360d217457df50c3ae9c7ce22ccd52c05d2dbf566586d1ac6d73c6e8624029d61a17d5df07cb0513a98958033cb3eab015fec64d7319660bed6476145f5f218454e53b1b87cebf5c9e8e19b0017ae8c6dd5dcfa8a67d51e572815095e09a1430f7847593c20e510ccc8e0a6e03448d800ad7e420a7128fdb1a352a53d53bc4ddb1756c7509f5c95cca07da29203ce49ce1a9238d2ee82bfb5a76492506806dd8ccf9a14d9d6aa19ba4ccf9a0f3eb1b39d836b0830764c639072ba2b6f23dcddb19bb8f956c91c5e580435ca1d8c79550a6d60b647d8c8e2774dd433ad5339ae604fab68b6e26c63e95d4f386e43a4b0872d9756b04e53fb9248a3f8314132ae5c3ef5771a1c2167309e12dfed620ca86421a1fc3198081a7723055e1d149391b38822bdc2d27466550e267c0020e52f82e5d8d3214ff616b54bf28f84d2407a15fe02c7eb633ccc55f0a99bb3bbd5c767361c32d4883e2a64af3ce1c354acbde00c8ab97fed91164a17204f0a40aee9ae2b7684ef96a2457c7c4d2e3d17552e3580cbe20de29263777b9e7c466b53a995a1151259a962ebe4f798278fde79867e028e9f2b8564a9083fb72ed6337150ac6bfdf04c5081a94b09c3bf34e53f01f5e79414db2ca5696ebaf0661a36641c3b6a47b305611eb89ddbd7dcf8215827208ca3fa49c74c93f49f91955fd5b73575f971a42828153e73d1ca359b1d139b593da8c37e0b4419139cb40aec536f470511595c6cb6cfd49bfb5967ee1e00d8efc393f6d1830740ab58e5c54dc630ae693a5c45e8a24d99bf7d708240a40213f21bddf30ee9acc86d9eebbec52942347fa27d3b6b9b47ddc85f4bc61998fa004eb0f9a372b63f1ae82f0d734bda519c976322381dec6c1d7ed52b847f91021f635915761d10293a54db1e011c46b25173ef32236a58ed1051c74be21d41ff3ebb41e27431fd1480b4873f1d5a54e6bbca621dd18ce6fac88a96055335d1d5284c323c12e6e356504cf1f68485ead0280297e07cac22e1122e7096cfbce23ba4e62c6bd89ac66b290bf9a5d2cb950e3ea47f961c32616a47b15331837f9db5c9dc1b943d1228dc02330ccdc0d3b12487de925fffc6e0a939f4caf5e6506ee5e5483008c74ce2a4765fcf03e01f61228a4f9a8f5fe9b4aea3c476f1cb30892ded62d370c0fa89eab913ab827bc252467fbf382b9dad984582707564a465694d379c5057a446e0164f9dfee06a569414fc0954c62b748356cdb4dfd6f33b4f40be94d3272d391f3d4ce07cc02ecfc9dbfd906c7672e2e82fae02774ed611377ebbf86b122fcaee5938c4d01a183c7e0b63600152ca038b222f5bb7c450fada9e4a0e004974b10937ee963012244000d53d8a95235007a06f020c58af595cec790023ba5e9829c4ce286b7605116fcc44712800cad7f506c108350b484a7108a3c36b325618b19e862f66d3a96516eb3e0efefb07684cb15b12f6203d19b94082c4e8899cf8236ac7ce489300a968f9fb163036dbece87dd610916d6790137a4536276c2f49a5a93ba9145d6ad04559908679fd4c8b4954ead19bb7d447fa0abd40ff3a683617bf10e45d5e33a731a8fe34167c2803e716e6403bdbbe0e6659485e678512c01dc41288ed988af8210b125e541f445ca4bcf94f936f2ea37a9369dc0afff39c1741e2fbbefbe44db11109877a30931910279a0ecd99c0df9e8de6a54a13d8a292d092c369d96fa1a1ad4ed1bba637b304df3ef96fa068a417dba785027045db9d869dbd987269ebcd516936647d142b1bfe38903ac51cd82f03576a38157337bfc94ab3d6839238499fadde4f6d73cd27cbc1c653cce82679ade2a6891eb555275e35124ebb30c30089af54e1318ba393d11d026bbd953a3eb0f532c67ce14040bde614ada7270eb8104085866adc79cc436b0f035d1dcb919be5c3e9c509b8f5210cf58a843e9d33873a7f4b5713f8059c08f41fccbc7d52c3ece0c636c6aa7bb675f6eea15c255e38a92f16c9567e53afabc855f380ee47fe2657e3db89aca640ff2b474d8d213367c2efbd09d7159b5b9c66c0944c5e0f3e13a52f33b27848f8a7fc07ecb0aa4dcfaeef57b3631e8a7803dc846c66528415de40ac27e7f30250521d6f7059379f3b4cf425938f354cb7ba5a9ee1817695f2762abaee543ec4346eff563b0dab45c4c4cd8d51cac58aade42dd5e5ab577eac592c7396202e78305184ab11b463842c3c01d7874076be850fc1b89d9f143ee15cb4826381a14b642895b06694554f6adc596f7eb0e70940683ca257632bd392fbe9d34cb1d990043bf7af960ef9d9496bebe4896e55488ecd0f9492b6296e866a6899735c4ee788ffc1b595ac2286ebfd0f2e389aa49a7dcf5c206239efbb00da927301313040cae25f882ca51681884fedc891bea6b66b40689800c9571ef531e5f6dcb8f247586637d6fe244e43a35da17ac744335ef7cef4a975b1d83735bdb10283f17b15e22b12d8d0c7a90ceb966d93e942779a4822cce336c160e97fe810766c6e04153e97c998f831c6367377479639da3eac898efb30bd202db65a214477d3d0eeeb0c78d885d65340a0eda1803bf33feaec011a84b205911f5d83cb90fcdffa2ce45f9c6fc0d37fb65cc46958dc69fd265b3885e185ad9a20669d9c5634995fed7a57be4a5d596a39a8894d68b1b86a1d57a6674e313a4dc69f3e4227c8bbd656cd38a82fc3d2afc82d904c2b27537d90b0610765bb7febb97a7916b37f1a39f1d374252c2052929e5c48bd80c738b3d507d3d4a94fe300b2104ca7ee37888b4887f16fc4b5c6496e54c83df9a6eca43621165a2bb862787139ad14d1eab5a25f4afc8793ee84cce5d41ebbf85a67c5eb881873fecbb8aafdddf1b24ce44d61b24fd6115e6dcc8b33baeb324af05c2b73c344eec19d76c02563b2cd9e878df8865435e850db889643f5906b3af5cf537393286c26f431834ec335cf5de13a85710636701111421b3d3d0ce9ce55200dcd77bfe899620e5a8475f8dafe1f49a2f6b47734c0bedbb88c1ff76a6491343ab0176521deb8e989cd2cd525ab26ee358e2b1eac45d63b89eaaf5ed753a41c5404c7529f9331a01764a532990962ce0a1b25822df277e1555bdd293f399f1d96ecbae6035e65a2d6680b37ad52a34ed38c93a945b988de404b4b7fba2f32c4a0373083e7136e4f136dce69acff30d8d79b5e2af30e50e1c6e13d94f5cab6d61174b82cd312f44a9d8926070a91a330d9f1c42ac9190243041e93433e10b921cfbf5dbe109f9a7dc0b8e517020007514f703bb47997be8ccaa1d10bf1eaa694c4f1883678b858780ba5b0f461688106cb1fe28c819debbf8bfa7ce1df68c7ed7a7a6b6c49037575636081a67b92cf49f9158958b384fa087ddda95d4cdba5e076b588ec68f54ab5f468cff63cc09a92865b97c1fa4fb79d94a9daa9b2bd60e05872d0fabfa78e865afff0c080ae831a4c7ff7e6c00fd88ad85c78ee845c92752b5026148fca8d2022c58cb55781fb55fb1e96f0f98e40e3c48f1fcda9abdd35004347b1bf5559d4cb819d38fbc5985b7a74c4c58b595e625a61dcd14c7c9260d7c281d34a14ddfd9fcc98c378e366fe5d4d165045fa5efbbc89a5081949b1a7c19d5bcc49868a17690c6ea6027cce9f3700b09b62269774264a1bb93541636252254f19b58c02d14fd3e0161c078f07632d916fa1d9686b4b27e394ee022e102ea238806f47288d109f276513081b6e4540b65edd019ea14d6aa49432a0d503d2de9796b5ecfebd2dc7a93ad333e42ae80a3469fd741d0712a3c75ed9c01019cd6e502f38958befa32428218a3054f3f35b1992082e0657cdcb7cf47a7ba5b497b184b2f03b12538aa7abc1cd3a9b23d3370b8b9d499890b4b0bad3ebd58397185a1af473068da2fd46d073cd5b84ec068c847f8eaa6df0f598cf0de99406f874a3c104e4f386956c1ba267a52a540bb9dc0bef8e4e1b95966d2d3f54f1d0bc20b3fde5bae25804e8e0352105b543ef692cae0c568660e370903d5d85e573ab4ca9dc6459680b81ba98973b2c857cf7e22ec457e272b55ea3415bef8680104cffdd67704e9300631b4c02dec56807b1f3b8cc894fe1dc6e321a9df6d8fe46d3b7198aeed6925921c096c7b9608834380f6398e03b1fb171bed5928517cb5a5885b6b11361649716611d9311625e7b19ac6c8ea4b40e1e62e533bd9b1879da0537f521ba5cacefb769cd45c14d2858ad0c5e6a154935d19cfb059dafd658d7dc22754e80da84052153374301ba79e3754ecd6d26b57f79f311aabfa9ae3e2df78ee35db61475e9ac9eb238a1803018e7327019f06a6f45fb158a1286e95b02752afd749ce4f7d0be8ba48be4ba5b592e334a70ba96e40d56f2f7f171b604fd948a124c2da56c630639dad5539bd2a575453ece9cf7059e76ce0cc4d478fe287ec338d0cea01bae83b9a614f0b2e5caf0a802e1fdbb7d6930c9f559bf0ab7a3db838357e0867d319b81ca30ece297466bebf5092c1cd1dc17e0762f79e85dba8baf423555f1b029d4c42d9aabe524c510254aea1799c9370084ac4c4510d667b7932897b934ca638b48a744c36041d2a3a7e7d5db9b66ded4d8b3169686644b928db5e8786e880485312473975ec0ac54f6b23c1018035e1b552f33e6f4dd93f199595c365a33c30f9c6fa0c8d191cd75bee0aaa8ecca01467433797a00dcab558cedf7e65807aff3d78862368e8b80eeb6e8bab4bf0177b4c8ee74e325ab4f04cdc21dcfb45f7e9c5248a078b5aea69def70f28b3ad1214028f3bfd601db8fc55f4224f9ea0ab22d815cb5809590afc0ffecea12d8c92b6a10ef7fb5e704cc51d7375e970bde9525d4352a0cb86923aa2ff75903ede317fe8df146aaa3775be4739cda58711e30e22a7d70c9d86d3ffe77e7e11b7ce811a0f56ef369f6180374c075d627d79411fae75cffcef3e9d4acc406445e5c81400e3599d9989f0c1698fe1f646d786d6c76131c3603415322593d465fe2f56e4c5333f5836430bde1b7834fc0325019b38190d6e3eb46c56f55da0c74f5871a8da3bc6f5891b34d4bd028191f0537803b4f9f1c7ab5db1aa295133eea4a83a4324bda9fca01c24a6a9b56928bdfa01bccb9f15b1db07a8d741452b588b89095738c153359efd47754fd2f15086db5480d49f15bc7e6a2c6d1b63161a20e2a36e96d04757b6d1f18696dbc3ea93df2f8ae03028c0da65af27996159eb78b08354d4b3f07d599b268eff718113f8f25dd0e1deb03d9d430bdecc26ad4e5cda4a83de4bc36af4570ca071a355849c2d6eb2e744d1a8b9979d24562e5ae78cf51c65550c64a2ad67eb708975bae901a949a374bdd60db0297041b4e782823e4c5e1a28131c9884a423bbbd19159688720348ca0e3513ec4ed21e74aa97cc8b63f6e72874915f2e37bb500c62ad6489df05c4ad24d93a65e4ed04fd15dd6f12e556bcd13197705c240370c8d0ca25c83be37d4a52636bc050c62a1f730cef2a27bb6f0c3100914cf4e25199c6e5c1d779eb61f2985d0b3df545cef089ae6f59f6d527c99901943f1204b875802795633793afc3f967a6488fb865e53386e8cc06e71b18c64b298436641efcb558bc1f6a84f7c27258051598d50ee26023fd906095d94eae08de970028ec5827467f0692d0df2c4f21e37be41baf986a9dd0a88fdc4049da3ad2ac1681180c4753fac9d281c5dd4c46fe8d13663e975a0c0ee58178275682ca1f5ce450142a4f4337da956d05de93601b1fe3c145a4b8fc532fb8ab9a5d55495ce7e65e424c6080962082ae001cf8e613f821bbd1db4f19b2a6da3964ac3bb419f2a203b7277744d7f063cfc60053369f8ed38de0075a6183c1071825881a77ea716f594d13f91cd176ab125c4226ab6a1f58abab49baa36d3fac2cbb3081fd4afcf0bb22cf3234616564cb90ed16a31f08510cfcf987f5897a97b0f6dc00e044e79cf610e8df62d047a71b542f213607352808e8a1d83ee0f2ddfd63a16796002e58fd0aa2e794b9581d63511cba03e0423af9fbbc377bfad2f4511819e223486b21368ef962d8c04ce15f3f33dbf99121861bfa0249ecaef01f1d666c95dc219898c705216fd6406a3b78c7aaf6e891d493ad414f7baa17e750775408bd27ade2623cc1e25a91f01ef094d148f7f34432fd2479ababcf6b2bf87a745516ccc05a977a54887b95ee4b0f0a5df93613149ba2be0ac4e32df2b98bc5a02900e9f3e144cc3678b00790bfcf498fdfb68cafd16632453b3ae60b39eeab092da3c12fdf608e1034a928ddea4c0b2d51b1fbe1109690ffd64aea47b8383865be7ba013c7de288910f471bd4cb3e100b07dedb885be62c75d401311bf29c12bb18b026c82498e31d933020f342d28f68bdd985bd478a3eb457123d236b7ac31863a1ff3abac69fd78667265f063b361299b9bc90666fb6b3f571a06760ec87fe745899798aae78da8126568f0dc7e7a3bc1e4b137c06d0c775ae2b0a8eb2996928b3c2a9c3ae0b73ecf858c01bf78bdebb0c6dba989cd351a5ee82a3f509c4cc486803e2daef516973c39abe4c5c4ab47e1a43ed10b9db266e729512da02aed958be80b916ffb3301bfe3f0a07a7077e2a96c6eb16fcdbe45f5925cea50c5a123c3b2341259533e82c6dba4f7e1482591a8f1fe519ab4d3b9158cea51c36e8a60f44286f3321d3764303e5fd82dc7a47f0a81855ca6e0a1d3ce5d783b20db4000a76a38fc6baf6ce0e0e67fac9bf9b323ff426fd23e3f798fc9cbc68b44d11a3907566e5b19b03d592afd7aae65c8b4114f6aecc41475cbe373811dbe84ab0bcfb9990b501b069c1448293602313ae83d1c4f937c1089eeec62d968ec1e02e2f23a87fe0f1b1b505bb729c4f07657f903a8fcd1db17279386cce5264e55cb17d0080f621275cdae3add1598e456fb50eb0fe6ba9082920f9190f99817608942b946a4b384985e3a9ef7c89f8b4425f081c99261c6d731d5240cfcf93173431cf3589b8bcee67b84230cceffb22f4e087a0eb36a80686d7a2576ea8ff0dc8c2ce62b9938838652115690c8e0852661b0dcde42530de0b4c2e35309b8dadc70c3da66c3f81b64f2928c4b720d124e98047166111281b31a3066fe9970363034e593a8120cc3408f72b20e6bd6a15df802386841ec16b5ec15a4cd4ee7f1f6298e69f36d1c10da636ea233498a5489da12b10c275723c5cfdac0f23dbbbe5aa12c14cbde384d310e284b546000536cb98e5428fbd19c6c0f2ac4bbebc6cd507db3757a63e52595f5765a99f5eb19f7c846f5b8e79bd78ee187bbf10ffafb3f99f69beeaf145a97c58f9eb7a2cb946024f027a5013c2d374c7eff372cad79f01a84c36a3deb41482f3b55ecec27ca4d8f8ecddf64f6bb847fa5e354f27afdb0aaad1d5ce781ee1b14b9d7d1edadb465383c94f11b1a6024fb6f666bdf98c3b7402aff412eedd806cde69e1e99d1488ffce49be878fedfe5a4e1332ebcb14d5bc3c5cb7af40b659b8d4c2fdc576b53aeee932a26568eee37b2aa0dd1aa9416f2069ec6bdb40b6377dd4f899a3a813bb96a11f99b0fadbca370b78ea718cb06af8e6c28c71440304f1a222c4fb15130f719c2180fee559472a0acc5c82dbc3994b11f25f441967d534e8409eebdab635728c85578c7d78952a8625f8e98d11e8a6557c01d6a6d568cdd2822decaeba9ef8b6447149f79abc5a9c9f0f23c3cdea52473f5fc1e9a5647329b1e6eb82e39a0ff40bb52ed5ed912e9d7cbe97713ccc32d311afbd07620cac1d924ba75c3d1d5ec58f8ff901f9fba3df78eea9655f409b70456852d5ea979d64f98e3eba403df1045315fb24a7ec4fa13b63f8b711f91e3a2b6942c1f5d528557255aae60ccb12c9c7bb74a381784b68837b58d387c9695d51261b0df6d9fb28267ddb7064d840aaf6262955c5cd414c85947d36cf01edac8e2815a9f82057b0d8c3036d9a585964c017ca239fd7017cd6f4b345c77b7ed63b4492b5978482f0288c15f92862b07da559440e2139a0c5a27f43b0a35002e100f4bd3b6ba13a70ec6dcb1516edd34f193506661d9246b3c9cdd70bee3ab08a98b24dde84af5af4fb864f4f3aeea571c94e39d39874519ffcd9b9f1030e59b1db5435624cbb03fed45b8e7cb0ae98f1789a70921a3e6f74aeb2113c42da3abf93781bb0d2d189f94735174de9b46662fc1da4af99ee42dfd1f526b72170da78a0bf0dc5a64db79e7ecf3ded7fd36889897c9f47dc4cf391f2ff85085f0356814c7fbf41fbe75c37fbbef98dc83ab57f2ac06117151bab58d93ad3dbfd57e4410d28a4d0b407efb05c3d6a749d9beccee8eda81c872b70c74980bf9e42cd560c7d492375463291bb130ef12cfab386eae1d45af7332e78c67292d5ca3a4b9b6ae63eb36813c15b8fde5709a7a2302729c0052a2331afd7e66c8dbf269b3e62fb49c965d7272ee178411e87eaf3b1ef8e95cf88bace4c65f338f64c7e04da82a78ce137ef362a9e6b66d0671bca2aa7ec8d13ef74786b4ff83956d37553ce6e27ddf24beacf8d67ad52004829ceec053804d27813cb0f059b852213933ec030e3f6f84482a368d19075e45a1f5bfded1478784715a1613208a86108638b8c3095c2c5e0987b2a05f37903eaf900e88bcad3a23782086a1cf054a33eef66c06afc9d63f86bbc8c5e33c7710429489e7360a9c7b2d1837e028fe38dd825f3592477b38dfba098798ea02c8a75a2fc12f22c68fffba1fc62f1f1bf347df1725a527e74907065af8e29c0c21e2aa514d54a7e1ae8ee4646b0421822b2115b8eead23a6589067054085c0eea486a31222bca6901b4c2203665ea47993ae829eddefd13d74df4d6bec8b9228692cbc0b8c003bcf9613933f73a4ea57ecf0ece5382c00cb85e3db706cfd8c8c3e65f8b4bc5f0b1df19d55c3325ee7cdb4c8fc8795eb1dc21c83e4d38777b137ac6b40b315a2ff2a6b6da0481845427b532398ec58f72985750ca71414f96f979f1a6b8f09a9e90b47e55f80a7c8736911d5c7eadf8c1fccdc30a32dbf33ebb29c84aa0448549fec75c00f09e5eab4e3e059b49764541e2d51ecd28747fb8ad9a91ea9bd8ba4cf32dfcf0b578c591691554485583d9911b33085f5bcdb6b01b374a34ea1383a46d04e7b5e69c89c65dc92b303afa5e0f01060a06f834c2f396dcb06d82f466c899ecc5ebf13641eeaef057d088f110a92df316e323c98153da93b8c95dd02930644bea7a0e3977b47c22dc6288f62dbf77e925184047cbf8c2baf749bcb12f73c3f9632b68464cd16774974cbfcca0a5c271f8f6d35fad63e9154840c2ba91deb2033564720d8355e5c17d52b014ff9a0b1066d27a16c431b278c2e9dbb1b62f9e2ca98f3250b341afd9643ab21c42f486d32b4d58994235233abf8470238b407f1a94d5d1e172e79bd1818f3b73dc01ea9a8a21afce4d577f42e4717a3736a5f8766e2a4f580cf9b54dbbef1ed7e88b2140c175ac02f3b529999e4ba0cf6613819d699678e20ae5a6eb9a9616d55cdd5f3ab8e791f316bde429fb808b9e9366c29bc112efffbdd65d7f48fb608c215b47b8460cf9177e23874866a576d96af765bc53184eb9f54574527aae1a3d918d77911b6dd37245bb902e2da26e0f21b8ef36769e7b9628ab963c9d0bb8bf274c36ef98683fd363330d71362134f6294b18e53382de81136f3c578dbbcad9abb9fc476e4dfcdafad7f339ae06fcd0adcf437270a9ced0019b57c3a7c1c217cde628bb48d3301e76442029f901478742be682c8d4c49479084fe1f97e560d12845120e216888306247c159ef48ff13c397bcd8af1b9aac0146b6e4ed4e8daff2b06b252c6f6c0dcb8547c059363b7d619d8369bcc39eca269eda3b24b1e4787815103e3f9447707705eba59b4ed11f10582139a7251bc61d2451b331f1f33bf491ab814336ec9e47f426d09d72b58b5ebd6c76edbcb8c1e7c2ab3906818eff6634ad784d1a06aea38705585808691ae25e6dbc1685715c7dbb581c34b55acf92b1ec5dd36f49452dc94df7310d5df937e9c5b01fe9e1520aa0409733799ccf352c713693a12037d4aa5ec0ba3c0db711dd81ec612eec0f6d1d9b2b9e76430a644e3f8480115e950221241cea35dfa605fc1b8b6f9676698b0687341238f6a1f0aba40a8655ff010894e7eaefb87841a01474c6f2753e636177fe7e83376452f446f2586deeebecf5d3b244bb86c55514657929bcee97dc5a4ddee7750bfb4ca75d4f7cbab1d071f33487e6d96d0f1ba4de1bb7f9155b61d2d29d2534c1b02b85361974e7caf0153d9ace7bac2a16147541219f756634513a932cdb22a580a11931448175de483f3407e4dce44c9fd12580632a1e1431aa4d41c97776b5d45e6db0901f5816d7581be89084d56dde1612a978f48d42c1c2fdeba3066311cd56bec72f9828885a47bc7ae913dc6e0441282e6de65c5b1277a7751bdf7e4de8f067623a8295c24fa4250efedfde01d0a95e780f2fe1bdd693feaaedc7c927c4095ca707e03add7829d3f6665c8118490f4adfa4dd7e1d86b2ea01247e54c515f81f16ba3b98a2d776ae4c04de52bd47d807aabb5fceee85d7d60a51b0a80e1c0afea80fe43c82d17d2e97411615492ddf00c1324c1f4495c7263bc891bd6600e12044bfa1b13653884b20a4a85217199daa616f7547c58f098c2c75cc9b6ec4086c1509bb6055267ce3b7ddc98a741a52bf2c3115ce9779fd31552026dd3390426f03f3f66461b3a6fec9a6b22c6ac4c7e31aec4f6f323baa43c81ee3fb7095079d5eae306c0a84402610bc3a2a27af88eb82ec3d9920e18aae4e067791a17ff88c895228e80b3285bd2324abfb24871e75f63e56b0d3928221a9fd841b4e1d62b76e94b299a657c2aa221cb87f7880a5096efb59eb56287ce75cf0fb16b11bf0ca61a7196b84961458c539f5bb486874c53c95f8909785249ac94140ae9b586a1af09c0def393f4f279188bd335c5924dd8ce1f6d77532915a3592aa5ea172a5f041e449f8ddaf51026985bdf6190a346acb6b70debbe3171950a6ac0af300e26908af7c4a89aafe5d1e3b850d028ed8d3230fcf09f0f90b733ca058b0906ba617ac5aee21c4519af15d868df920c70b2ae4a185ae086ac0821778c4dbdffafb50169a78ce596bb41847b0387337b2f81998ba46ebc14858ee50b378582ef7d805a1e260b5c339f394059f85f1911bbb58912b79c558dd4d5211a43c3f199cbf0c2bae8803603fead532eaa3bf093d33fcdd8cdf0c57800dd5926f6e386ea2bc679945a9ccdb9c5fa36b87632d2575e45fbd1d492e10117258acb68743dec78ce0fb1b015629767736c06e36fe3cfb77ebfd45ce695d2043e96f0d6aff76e08397b55c96acd8aefed13219e2a79163fa5411858908e5484d911c9846a6d7c61dcb957e3b6122b7e08d797029b4e8f24147141d6f8af3524832ce184bffeb46783e88275598fea45f82838d3d73f8729e27534f383dac2e149b87efdf32f2404f15ef67139d1ac4ab7ae49106b9c539757f26c54bd231512d7137bf96700f4d31b7cf28a080074ba08c0c53a5b7c7faf2beed375ec28eb0e42be161bc671666d82c1a1f3a0f03a4d1c19890f850e660f63963f9f6b5b65d8551bb624301b8c84855ffaf6aae4f5641db7a41fda1361a6ca450dbc98c8da1b2878945a3f164eefede7cb0d0273f44869d111dbca89271570acda6488d4bc0587550b04807bddfd135d95e8f0b3b8b80db406c43beb6b76931303b96efa0a8285d01181dcdeeebbbca3722c426953981e1de7bc37f9e28aaf152e83e19821d34a8e8184e53677df9151c00086a68adc0ac7811e3e554acb993513faeb2cce795a64d64e43ad978809a8a8907a168b300fb463d30f0ae5a034c681ecc2ca77f683a37c82280699bf3e1265de14a5246f86eac39cbc74b17789930e23d7163e9ff1e4c8f2356bd7025981ecc42bb33a73cf124227593a5eea817b2ecbd77ed506187bf6d33be4d348c47a0a08fcc95c1f685156d0a257b235f7c5163d8a31a08fa5314023db528cb4b083d0f1cbb87d89746bc71f4f096b2b8744e14271dc0bb4994ae15eb022bc9fc9ebe70f95fff7bfbcd62ab490edc3994ec41e41324b8efe253b786127e05fe4ef78ecd0ada8b917d342f757e20af42c87fa656e0385114150ee13c3155d454f9923938df097f125d32cad8894e1619f61b2996f1d4d69093df0d5be490f7e8065855576cffaa0ce27743cf55910a6a10bca028446299bb67596557f5323874d5cd23a67b7ccbf4a91e5ecddc510b9f1d62c0d93b430f395f65231f9fd167c5472e0fcb38e4a24bf20635f2bfb5cd074f6f5da84d4e7db3bd4d2f1aaeaddacd41bdbb64f9bb7977af0d8e47da93a9cc3cae51dbfd0507b7cddfea6ae364bd5691eba10937dd9bdd69e7041771a6a4dcb58d23ac18a2279ef8cb614109e3475daf5fa0c6a36c4b15e777b8fbaa0403da38cf48bf4473f05fef776492b52c9ac20cd67a38f19fd47b3194d761088e585cf287c4faa586d4d441b69e65a5b4395fdc0f7f7a52a28b5d88ff93528c0d70289a686f412ddb1ba2452b1350027a08388d20a55c46bf96dc607ad57fa0b05a9f16e1a80a6ca0cb1d6c747ee951d4fc1da2268556946535918415d0def980bdef47c592b60fc2abb8da1a71074ab8c1058538757d9240be3c953b368151623fbe11cefa400e32dac4a32cdf0bbd7f3b242019d3ac52bba648ed916f5f82f58a015682e5703d59d322e164dfd8d070c1bdd324c71081ecd2f632e9dadf4232e6e60cbb0b73eebc32a02af4993a400f5c20c3cf75f953b8fe6cde359c16ce68b60ccfeadced9288144a05d02ec4a937529d0e72377a8b29fa9a15636a338f1c3e0485d4256561e4335fbf63d281e386a8ea65a79f0c1ca964d413d6017299ad36b6133bd73de3f42155486238339669707a6b435e4f5d5d15754f1ede48d377398becf729e5c4a51ad757dd6bff0864b8d4cf6f89d00822a6d5160aa5f095ae7a7e4b79f3399c99af69bc4c99e53e21126ba6404ed679a43375b4b264b77ae9fc9c60252233edc864628abec88c00ccf687ccab4341d1c16247c5c7380c0054bebe1692a49682acb5b863f6dc772fa252f7123569f57c450aea7b650a2ffa358d76e861bac883282bf3c541794e0535e48d264b1ac00b48ec7151733966df1fadab8396d6c566b8ced71e0a2274eecce4d34e697c2ba90dd7b12a2648637a4884a1b7bc14cb8dd63aecb1e35297cc3953f0b8fd8b652d8577470c216f4d087301ec2f9a8ca5f35be6fee01592d141f4513aec563968a8abc67fa02642588e649c09270a2bf0aa9fffd3070d099f9ae0e0afe36b7393bab89f9f6c9b799908bd58655dbbf6c2702a342c68710d90b93dedc3a30622923357ef389b5414e1f3aee125c28a252b78e92ca247eb154999a09bc651bf33e2a3477cd15de9834ea3b05d9734ad6b1fcd78889355ba4e9b8e62b2fe33085ff3d3248d0da0d53e24c228fe45ccb6cd544dbca24c4c5350cb1e277623c5c82a7d5fa5dcb79147c935c1655517b582f7307aeb309e80207c4459e25eb935d761a55d2234bfa54aade020b86d30d5f13ce5776a1929a9bd7a204ba102bcc19fcb726d2bda888c06224d791044df42adf0303300ed233b3e20a52e891036877d11b2c74825c2cf907850fde2dc98f0148e2e50ac1027265e452b775aeb6dc65a59409426634695899dc2245a6a6593aadb89a53fa57e3928ad93d4db7e341baa9e72bdc2dc163b42a0bcd79091cb0e94b9fb14021a90bb1456189e2ecc862b06ffb6fa4ee936a4b23beb84319a8a23dd4cb42f56c700bbd79239a071ce38ae122b377fd6b5e80ae2a1f1f65155c978a817e391d3096032676ee83e69684219125d90e6b00d6ef0dc82175cb3b039cd35db9f44e209adc37844ace95cd32953eb4147f51416aea4464e4f6a76f5e741cf4f5e3500ea70e4639d26eb4b8e114157d737475f38db612bc23f58c10ebb8d059bb0b1b400133e47f052676a73cfcdcdd813e5020295d57308c500c3fe6fa466107f2c18c5b868678a8861c042ffef2f120471d79c8b31fcdc7bcbb9176e657e22bb2e1e48955620c6917729384790311e3e03cdeefb99212bba19a483ebfa6bdfc4df14b7c16f62bacba28b4a04c907fbc2bcf90c3e5fb83f8f14377955639781e3ca73f9622f0a0ea8192f0a4444ca4dd122b5b1e2577718bb35edfc1da5df9e024b1a237c6cb556f4d80f14bd6167146a3e72b62917cd4434cd6ee2d7f72f416867f0b494a866eaa72731ea1b94d1297bc7face0b1c4a238ae548d442b6ec37e19f44eae24536c66f82138e56d08dd507769790602d320a7edee16a56b2db8c5c6128b5fdd2b9756927ac3c47dbbce02783edc908daf6fdc3dda198e9fe6ab9bfde4532b61fedac1bfab249c5a0ffde4a6c49f2dd358a5e1cb685b0e5f1972fff316866d4a88f625d2c859a47681a0f868976edf1859ff8117894ee9ffc9d27a1599f9c1dc6b0cd2a7b58daa3d3f76cc5c87b56531d63fef95c4b658af6a5fac11cbe28157a187a36f4386460f91f310e2638b66f3a818311084110b0b7c5b98e12cdff84b1ac5acfc2d2b63aa06e84d848d3f12e5f24c0bad66da9448342beaf57e38a60e13783678f2e23e361d2c7e91a910ff2de32fa8915e8666a324c6abb91707e886f7ab96740b21df3e2748ad527f9a6660a3f580ebf1841dfe57063aff7be81568700e500947cee59a2c059eaa25ce138eb1b6fecc37f8b0d812cc7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">这里需要密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Kalthyix 团队周报</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树·平衡树</title>
    <url>/2025/07/04/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%C2%B7%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
    <content><![CDATA[<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul>
<li>显然二叉搜索树是一棵二叉树。</li>
<li>空树是二叉搜索树。</li>
<li>二叉搜索树的左右子树也是二叉搜索树。</li>
<li>二叉搜索树的左子树上任意一个节点的权值均小于根节点的权值，右子树上任意一个节点的权值均大于根节点的权值。</li>
</ul>
<p>二叉搜索树上的基本操作时间复杂度大多为 $O(h)$，$h$ 为二叉搜索树的高度。若二叉搜索树有 $n$ 个节点，则最优时间复杂度为 $O(\log n)$（完全二叉树），最坏时间复杂度为 $O(n)$（退化成链）。<br>显然，二叉搜索树很容易被卡，我们需要上优化。</p>
<h2 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h2><p>二叉搜索树复杂度之所以不稳定，在于其操作大多与树的高度有关。平衡树通过维护<strong>平衡性</strong>维持树的高度，降低时间复杂度。</p>
<h3 id="平衡性"><a href="#平衡性" class="headerlink" title="平衡性"></a>平衡性</h3><p>对于一棵二叉搜索树，每一个节点左子树和右子树高度相差至多为 $1$。</p>
<h3 id="平衡的调整"><a href="#平衡的调整" class="headerlink" title="平衡的调整"></a>平衡的调整</h3><p>我们使用 <strong>左旋（zag）</strong> 和 <strong>右旋（zig）</strong> 操作维护平衡性。注意，维护平衡性时不能改变中序遍历序列。<br>先说右旋操作，我们有一棵二叉搜索树<br><img src="https://github.com/headless-piston/blog_images/blob/main/rotate_1.png?raw=true" alt="image"><br>我们将 $B$ 向右上旋转，成为新的根节点，$A$ 向右下旋转成为 $B$ 的右子树的根节点，$B$ 的右子树变为 $A$ 的左子树。<br><img src="https://github.com/headless-piston/blog_images/blob/main/rotate_2.png?raw=true" alt="image"><br><img src="https://github.com/headless-piston/blog_images/blob/main/rotate_3.png?raw=true" alt="image"><br>左旋与右旋互为镜像。将第三张图中的树左旋可得到第一张图中的树。</p>
<h3 id="Splay-树"><a href="#Splay-树" class="headerlink" title="Splay 树"></a>Splay 树</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>一种二叉平衡树，通过 Splay（伸展）操作，在 $O(\log n)$ 时间内实现插入、查询和删除操作。注意，$O(\log n)$ 为 Splay 的<strong>均摊</strong>时间复杂度。Splay 树将旋转操作用到了极致，但常数在平衡树中属于较大的。</p>
<h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> son[N][<span class="number">2</span>];<span class="comment">//son[i][0/1]表示节点i的左/右儿子编号</span></span><br><span class="line"><span class="type">int</span> fa[N];<span class="comment">//父节点</span></span><br><span class="line"><span class="type">int</span> tot;<span class="comment">//已使用节点个数</span></span><br><span class="line"><span class="type">int</span> val[N];<span class="comment">//val[i]为节点i的权值</span></span><br><span class="line"><span class="type">int</span> cnt[N];<span class="comment">//cnt[i]为节点i所对权值出现的次数</span></span><br><span class="line"><span class="type">int</span> siz[N];<span class="comment">//子树的大小</span></span><br></pre></td></tr></table></figure>
<h4 id="辅助操作"><a href="#辅助操作" class="headerlink" title="辅助操作"></a>辅助操作</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dir</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//判断节点x是父节点的左儿子还是右儿子</span></span><br><span class="line">	<span class="keyword">return</span> x==son[fa[x]][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//更新节点x的信息</span></span><br><span class="line">	siz[x]=cnt[x]+siz[son[x][<span class="number">0</span>]]+siz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h4><p>设需要上移节点 $x$，进行右旋操作。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">/*右旋</span></span><br><span class="line"><span class="comment">			z           z</span></span><br><span class="line"><span class="comment">           /           /</span></span><br><span class="line"><span class="comment">          y	          x</span></span><br><span class="line"><span class="comment">         / \    -&gt;   / \</span></span><br><span class="line"><span class="comment">		x  yr       xl  y</span></span><br><span class="line"><span class="comment">       / \             / \</span></span><br><span class="line"><span class="comment">      xl xr           xr yr</span></span><br><span class="line"><span class="comment">  左旋</span></span><br><span class="line"><span class="comment">			z           z</span></span><br><span class="line"><span class="comment">			 \           \</span></span><br><span class="line"><span class="comment">			  y           x</span></span><br><span class="line"><span class="comment">			 / \  -&gt;     / \</span></span><br><span class="line"><span class="comment">			yl  x       y   xr</span></span><br><span class="line"><span class="comment">			   / \     / \</span></span><br><span class="line"><span class="comment">		      xl xr   yl xl</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">	<span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line">	<span class="type">bool</span> r=<span class="built_in">dir</span>(x);</span><br><span class="line">	son[y][r]=son[x][!r];<span class="comment">//x的子节点转移到y</span></span><br><span class="line">	<span class="keyword">if</span>(son[x][!r])</span><br><span class="line">		fa[son[x][!r]]=y;</span><br><span class="line">	fa[x]=z;<span class="comment">//x变为z的子节点</span></span><br><span class="line">	<span class="keyword">if</span>(z)</span><br><span class="line">		son[z][<span class="built_in">dir</span>(y)]=x;</span><br><span class="line">	son[x][!r]=y;<span class="comment">//y变为x的子节点</span></span><br><span class="line">	fa[y]=x;</span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="伸展操作"><a href="#伸展操作" class="headerlink" title="伸展操作"></a>伸展操作</h4><p>Splay 树要求访问每一个节点 $x$ 后强制其旋转到根节点。该操作就是伸展操作。通过一系列伸展步骤将 $x$ 逐步移到根节点。记 $x$ 的父节点为 $p$，伸展步骤有三种：</p>
<ul>
<li>zig/zag：当 $p$ 为根节点时，直接将 $x$ 左旋或右旋。在 $x$ 在伸展操作刚开始时深度为奇数时作为伸展操作的最后一步。</li>
<li>zig-zig/zag-zag（一字型）：当 $p$ 不是根节点且 $x$ 和 $p$ 都是左侧子节点或都是右侧子节点时进行。首先将 $p$ 旋转，然后将 $x$ 旋转。</li>
<li>zig-zag/zag-zig（之字型）：当 $p$ 不是根节点且 $x$ 和 $p$ 一个为左侧子节点一个为右侧子节点时进行。将 $x$ 先左旋再右旋或先右旋再左旋。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> x)</span></span>&#123;<span class="comment">//z为根节点</span></span><br><span class="line">	<span class="type">int</span> temp=fa[z];</span><br><span class="line">	<span class="keyword">while</span>(fa[x]!=temp)&#123;</span><br><span class="line">		<span class="type">int</span> y=fa[x];</span><br><span class="line">		<span class="keyword">if</span>(fa[y]!=temp)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dir</span>(x)==<span class="built_in">dir</span>(y))</span><br><span class="line">				<span class="built_in">rotate</span>(y);<span class="comment">//一字型</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">rotate</span>(x);<span class="comment">//之字型</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">rotate</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	z=x;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="平衡树操作"><a href="#平衡树操作" class="headerlink" title="平衡树操作"></a>平衡树操作</h4><h5 id="按照值查找"><a href="#按照值查找" class="headerlink" title="按照值查找"></a>按照值查找</h5><p>查找值 $v$，并将 $v$ 所对节点上移至根部。<br>若不存在值为 $v$ 的节点，则要将最后一个访问到的节点上移至根部。此时的根为所有大于 $v$ 的值中最小的或所有小于 $v$ 的值中最大的。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;<span class="comment">//该函数调用后的根节点即为返回值</span></span><br><span class="line">	<span class="type">int</span> x=z,y=fa[x];</span><br><span class="line">	<span class="keyword">while</span>(x&amp;&amp;val[x]!=v)&#123;</span><br><span class="line">		y=x;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x?x:y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="按照排名访问"><a href="#按照排名访问" class="headerlink" title="按照排名访问"></a>按照排名访问</h5><p>即查找树中第 $k$ 小的元素。利用记载的子树大小进行查找。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loc</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]+cnt[x]&gt;=k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			k-=siz[son[x][<span class="number">0</span>]]+cnt[x];</span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h5><p>合并两棵 Splay 树，设根节点分别为 $x$ 和 $y$，则需要 $x$ 树中的最大值小于 $y$ 中的最小值。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="comment">//x树中的最大值小于y树中的最小值，返回合并后的根节点</span></span><br><span class="line">	<span class="keyword">if</span>(!x||!y)</span><br><span class="line">		<span class="keyword">return</span> x|y;<span class="comment">//存在空树，直接返回</span></span><br><span class="line">	<span class="built_in">loc</span>(y,<span class="number">1</span>);<span class="comment">//将y树最小值移至根节点</span></span><br><span class="line">	son[y][<span class="number">0</span>]=x;<span class="comment">//此时y左节点必然为空</span></span><br><span class="line">	fa[x]=y;<span class="comment">//x成为y的左子树</span></span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="分裂"><a href="#分裂" class="headerlink" title="分裂"></a>分裂</h5><p>根据某值 $v$，将 Splay 树分裂为值小于等于 $v$ 和大于 $v$ 两部分。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v,<span class="type">int</span> &amp;a,<span class="type">int</span> &amp;b)</span></span>&#123;<span class="comment">//通过引用返回分裂后的根节点a和b</span></span><br><span class="line">	<span class="comment">//x为当前根节点，按照权值v分裂为小于等于v和大于v两部分</span></span><br><span class="line">	<span class="keyword">if</span>(!x)&#123;</span><br><span class="line">		a=b=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;<span class="comment">//树为空</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">find</span>(x,v);<span class="comment">//将权值为v的节点旋转到根节点</span></span><br><span class="line">	<span class="keyword">if</span>(val[x]&lt;=v)&#123;</span><br><span class="line">		a=x;</span><br><span class="line">		b=son[x][<span class="number">1</span>];</span><br><span class="line">		son[x][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">		fa[b]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">push_up</span>(a);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		b=x;</span><br><span class="line">		a=son[x][<span class="number">0</span>];</span><br><span class="line">		son[x][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">		fa[a]=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">push_up</span>(b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z,y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x&amp;&amp;val[x]!=v)&#123;</span><br><span class="line">		y=x;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x)</span><br><span class="line">		cnt[x]++,siz[x]++;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		x=++tot;</span><br><span class="line">		val[x]=v;</span><br><span class="line">		cnt[x]=siz[x]=<span class="number">1</span>;</span><br><span class="line">		fa[x]=y;</span><br><span class="line">		<span class="keyword">if</span>(y)&#123;</span><br><span class="line">			<span class="keyword">if</span>(v&lt;val[y])</span><br><span class="line">				son[y][<span class="number">0</span>]=x;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				son[y][<span class="number">1</span>]=x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);<span class="comment">//插入过后不要忘记转到根节点</span></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(!z||val[z]!=v)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//删除失败</span></span><br><span class="line">	cnt[z]--,siz[z]--;</span><br><span class="line">	<span class="keyword">if</span>(!cnt[z])&#123;<span class="comment">//该节点对应的值被删完了</span></span><br><span class="line">		<span class="type">int</span> x=son[z][<span class="number">0</span>],y=son[z][<span class="number">1</span>];</span><br><span class="line">		fa[x]=fa[y]=<span class="number">0</span>;</span><br><span class="line">		z=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//删除成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="查询排名"><a href="#查询排名" class="headerlink" title="查询排名"></a>查询排名</h5><p>查询值 $v$ 的排名。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_rank</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="type">int</span> res=siz[son[z][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">	<span class="keyword">if</span>(val[z]&lt;v)</span><br><span class="line">		res+=cnt[z];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="查询前驱"><a href="#查询前驱" class="headerlink" title="查询前驱"></a>查询前驱</h5><p>即查询小于 $v$ 的最大的数。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_pre</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(z&amp;&amp;val[z]&lt;v)</span><br><span class="line">		<span class="keyword">return</span> val[z];</span><br><span class="line">	<span class="type">int</span> x=son[z][<span class="number">0</span>];<span class="comment">//在左子树中查找最大值</span></span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> -inf;</span><br><span class="line">	<span class="keyword">while</span>(son[x][<span class="number">1</span>])</span><br><span class="line">		x=son[x][<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span> val[z];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="查询后继"><a href="#查询后继" class="headerlink" title="查询后继"></a>查询后继</h5><p>即查询大于 $v$ 的最小的数。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_nxt</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(z&amp;&amp;val[z]&gt;v)</span><br><span class="line">		<span class="keyword">return</span> val[z];</span><br><span class="line">	<span class="type">int</span> x=son[z][<span class="number">1</span>];<span class="comment">//在右子树中查找最小值</span></span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> inf;</span><br><span class="line">	<span class="keyword">while</span>(son[x][<span class="number">0</span>])</span><br><span class="line">		x=son[x][<span class="number">0</span>];</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span> val[z];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="序列操作"><a href="#序列操作" class="headerlink" title="序列操作"></a>序列操作</h4><h5 id="区间翻转"><a href="#区间翻转" class="headerlink" title="区间翻转"></a>区间翻转</h5><p>我们需要在树中加入值为 $-inf$ 和 $inf$ 两个哨兵节点，防止翻转区间包含第 $1$ 个节点或最后一个节点时出事。与线段树类似，我们使用懒标记记录翻转情况。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="built_in">loc</span>(root,l);<span class="comment">//将l转至根节点</span></span><br><span class="line">	<span class="built_in">loc</span>(son[root][<span class="number">1</span>],r-l<span class="number">+2</span>);<span class="comment">//将r转至根节点的右儿子，由于根已改变，所以第二个参数传的是r-l+2</span></span><br><span class="line">	<span class="type">int</span> x=son[son[root][<span class="number">1</span>]][<span class="number">0</span>];<span class="comment">//根节点右儿子的左儿子，则x为区间[l,r]的根节点</span></span><br><span class="line">	<span class="built_in">update_tag</span>(x);</span><br><span class="line">	<span class="built_in">push_down</span>(x);</span><br><span class="line">	<span class="built_in">splay</span>(root,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>辅助操作<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_tag</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(son[x][<span class="number">0</span>],son[x][<span class="number">1</span>]);</span><br><span class="line">	tag[x]^=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tag[x])&#123;</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">0</span>])</span><br><span class="line">			<span class="built_in">update_tag</span>(son[x][<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">1</span>])</span><br><span class="line">			<span class="built_in">update_tag</span>(son[x][<span class="number">1</span>]);</span><br><span class="line">		tag[x]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>同时，$\operatorname{loc}$ 函数查找时要更新懒标记<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">loc</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z;</span><br><span class="line">	<span class="built_in">push_down</span>(x);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>&gt;=k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			k-=siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">push_down</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="无注释版代码"><a href="#无注释版代码" class="headerlink" title="无注释版代码"></a>无注释版代码</h4><details>
<summary>模板题 1 主体部分</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dir</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x==son[fa[x]][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	siz[x]=cnt[x]+siz[son[x][<span class="number">0</span>]]+siz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line">	<span class="type">bool</span> r=<span class="built_in">dir</span>(x);</span><br><span class="line">	son[y][r]=son[x][!r];</span><br><span class="line">	<span class="keyword">if</span>(son[x][!r])</span><br><span class="line">		fa[son[x][!r]]=y;</span><br><span class="line">	fa[x]=z;</span><br><span class="line">	<span class="keyword">if</span>(z)</span><br><span class="line">		son[z][<span class="built_in">dir</span>(y)]=x;</span><br><span class="line">	son[x][!r]=y;</span><br><span class="line">	fa[y]=x;</span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp=fa[z];</span><br><span class="line">	<span class="keyword">while</span>(fa[x]!=temp)&#123;</span><br><span class="line">		<span class="type">int</span> y=fa[x];</span><br><span class="line">		<span class="keyword">if</span>(fa[y]!=temp)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dir</span>(x)==<span class="built_in">dir</span>(y))</span><br><span class="line">				<span class="built_in">rotate</span>(y);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">rotate</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">rotate</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	z=x;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z,y=fa[x];</span><br><span class="line">	<span class="keyword">while</span>(x&amp;&amp;val[x]!=v)&#123;</span><br><span class="line">		y=x;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x?x:y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loc</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]+cnt[x]&gt;=k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			k-=siz[son[x][<span class="number">0</span>]]+cnt[x];</span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x||!y)</span><br><span class="line">		<span class="keyword">return</span> x|y;</span><br><span class="line">	<span class="built_in">loc</span>(y,<span class="number">1</span>);</span><br><span class="line">	son[y][<span class="number">0</span>]=x;</span><br><span class="line">	fa[x]=y;</span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z,y=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(x&amp;&amp;val[x]!=v)&#123;</span><br><span class="line">		y=x;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(x)</span><br><span class="line">		cnt[x]++,siz[x]++;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		x=++tot;</span><br><span class="line">		val[x]=v;</span><br><span class="line">		cnt[x]=siz[x]=<span class="number">1</span>;</span><br><span class="line">		fa[x]=y;</span><br><span class="line">		<span class="keyword">if</span>(y)&#123;</span><br><span class="line">			<span class="keyword">if</span>(v&lt;val[y])</span><br><span class="line">				son[y][<span class="number">0</span>]=x;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				son[y][<span class="number">1</span>]=x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(!z||val[z]!=v)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	cnt[z]--,siz[z]--;</span><br><span class="line">	<span class="keyword">if</span>(!cnt[z])&#123;</span><br><span class="line">		<span class="type">int</span> x=son[z][<span class="number">0</span>],y=son[z][<span class="number">1</span>];</span><br><span class="line">		fa[x]=fa[y]=<span class="number">0</span>;</span><br><span class="line">		z=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_rank</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="type">int</span> res=siz[son[z][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">	<span class="keyword">if</span>(val[z]&lt;v)</span><br><span class="line">		res+=cnt[z];</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_pre</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(z&amp;&amp;val[z]&lt;v)</span><br><span class="line">		<span class="keyword">return</span> val[z];</span><br><span class="line">	<span class="type">int</span> x=son[z][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(son[x][<span class="number">1</span>])</span><br><span class="line">		x=son[x][<span class="number">1</span>];</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span> val[z];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_nxt</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="built_in">find</span>(z,v);</span><br><span class="line">	<span class="keyword">if</span>(z&amp;&amp;val[z]&gt;v)</span><br><span class="line">		<span class="keyword">return</span> val[z];</span><br><span class="line">	<span class="type">int</span> x=son[z][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(son[x][<span class="number">0</span>])</span><br><span class="line">		x=son[x][<span class="number">0</span>];</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span> val[z];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details>
<summary>模板题 2 主体部分</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">2</span>],fa[N],tot,val[N],siz[N],root;</span><br><span class="line"><span class="type">bool</span> tag[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dir</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x==son[fa[x]][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	siz[x]=<span class="number">1</span>+siz[son[x][<span class="number">0</span>]]+siz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update_tag</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(son[x][<span class="number">0</span>],son[x][<span class="number">1</span>]);</span><br><span class="line">	tag[x]^=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tag[x])&#123;</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">0</span>])</span><br><span class="line">			<span class="built_in">update_tag</span>(son[x][<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">1</span>])</span><br><span class="line">			<span class="built_in">update_tag</span>(son[x][<span class="number">1</span>]);</span><br><span class="line">		tag[x]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line">	<span class="type">bool</span> r=<span class="built_in">dir</span>(x);</span><br><span class="line">	son[y][r]=son[x][!r];</span><br><span class="line">	<span class="keyword">if</span>(son[x][!r])</span><br><span class="line">		fa[son[x][!r]]=y;</span><br><span class="line">	fa[x]=z;</span><br><span class="line">	<span class="keyword">if</span>(z)</span><br><span class="line">		son[z][<span class="built_in">dir</span>(y)]=x;</span><br><span class="line">	son[x][!r]=y;</span><br><span class="line">	fa[y]=x;</span><br><span class="line">	<span class="built_in">push_up</span>(y);</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp=fa[z];</span><br><span class="line">	<span class="keyword">while</span>(fa[x]!=temp)&#123;</span><br><span class="line">		<span class="type">int</span> y=fa[x];</span><br><span class="line">		<span class="keyword">if</span>(fa[y]!=temp)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">dir</span>(x)==<span class="built_in">dir</span>(y))</span><br><span class="line">				<span class="built_in">rotate</span>(y);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">rotate</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">rotate</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	z=x;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loc</span><span class="params">(<span class="type">int</span> &amp;z,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=z;</span><br><span class="line">	<span class="built_in">push_down</span>(x);</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>&gt;=k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			k-=siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">push_down</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(z,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="built_in">loc</span>(root,l);</span><br><span class="line">	<span class="built_in">loc</span>(son[root][<span class="number">1</span>],r-l<span class="number">+2</span>);</span><br><span class="line">	<span class="type">int</span> x=son[son[root][<span class="number">1</span>]][<span class="number">0</span>];</span><br><span class="line">	<span class="built_in">update_tag</span>(x);</span><br><span class="line">	<span class="built_in">push_down</span>(x);</span><br><span class="line">	<span class="built_in">splay</span>(root,x);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n<span class="number">+1</span>;i++)&#123;</span><br><span class="line">		son[++tot][<span class="number">0</span>]=root;</span><br><span class="line">		<span class="keyword">if</span>(root)</span><br><span class="line">			fa[root]=tot;</span><br><span class="line">		root=tot;</span><br><span class="line">		val[tot]=i;</span><br><span class="line">		siz[tot]=<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">push_up</span>(root);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">splay</span>(root,<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="Treap"><a href="#Treap" class="headerlink" title="Treap"></a>Treap</h3><p>Treap 将二叉搜索树与堆结合起来，通过维护堆的性质维护平衡。所以每个节点需要额外维护一个随机的值，用这个随机的值来维护堆的性质。这里介绍旋转 Treap，即通过旋转维护平衡性。</p>
<h4 id="无注释版代码-1"><a href="#无注释版代码-1" class="headerlink" title="无注释版代码"></a>无注释版代码</h4><details>
<summary>Code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> son[N][<span class="number">2</span>],val[N],rnd[N],siz[N],cnt[N],tot,root;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	siz[x]=cnt[x]+siz[son[x][<span class="number">0</span>]]+siz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">bool</span> dir)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp=son[x][!dir];</span><br><span class="line">	son[x][!dir]=son[temp][dir];</span><br><span class="line">	son[temp][dir]=x;</span><br><span class="line">	x=temp;</span><br><span class="line">	<span class="built_in">push_up</span>(son[x][dir]);</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)&#123;</span><br><span class="line">		x=++tot;</span><br><span class="line">		siz[x]=cnt[x]=<span class="number">1</span>;</span><br><span class="line">		val[x]=v;</span><br><span class="line">		rnd[x]=<span class="built_in">rand</span>();</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(val[x]==v)</span><br><span class="line">		cnt[x]++;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">bool</span> dir=(v&gt;val[x]);</span><br><span class="line">		<span class="built_in">insert</span>(son[x][dir],v);</span><br><span class="line">		<span class="keyword">if</span>(rnd[x]&lt;rnd[son[x][dir]])</span><br><span class="line">			<span class="built_in">rotate</span>(x,!dir);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> &amp;x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">		<span class="built_in">erase</span>(son[x][<span class="number">0</span>],v);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(v&gt;val[x])</span><br><span class="line">		<span class="built_in">erase</span>(son[x][<span class="number">1</span>],v);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[x]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			cnt[x]--;</span><br><span class="line">			<span class="built_in">push_up</span>(x);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(son[x][<span class="number">0</span>]||son[x][<span class="number">1</span>])&#123;</span><br><span class="line">			<span class="keyword">if</span>(!son[x][<span class="number">1</span>]||rnd[son[x][<span class="number">0</span>]]&gt;rnd[son[x][<span class="number">1</span>]])</span><br><span class="line">				<span class="built_in">rotate</span>(x,<span class="number">1</span>),<span class="built_in">erase</span>(son[x][<span class="number">1</span>],v);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">rotate</span>(x,<span class="number">0</span>),<span class="built_in">erase</span>(son[x][<span class="number">0</span>],v);</span><br><span class="line">			<span class="built_in">push_up</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_rank</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(v==val[x])</span><br><span class="line">		<span class="keyword">return</span> siz[son[x][<span class="number">0</span>]]<span class="number">+1</span>;</span><br><span class="line">	<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">find_rank</span>(son[x][<span class="number">0</span>],v);</span><br><span class="line">	<span class="keyword">return</span> siz[son[x][<span class="number">0</span>]]+cnt[x]+<span class="built_in">find_rank</span>(son[x][<span class="number">1</span>],v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!x)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]&gt;=k)</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">find</span>(son[x][<span class="number">0</span>],k);</span><br><span class="line">	<span class="keyword">if</span>(siz[son[x][<span class="number">0</span>]]+cnt[x]&gt;=k)</span><br><span class="line">		<span class="keyword">return</span> val[x];</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">find</span>(son[x][<span class="number">1</span>],k-siz[son[x][<span class="number">0</span>]]-cnt[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_pre</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=root,pre;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		<span class="keyword">if</span>(v&gt;val[x])</span><br><span class="line">			pre=val[x],x=son[x][<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> pre;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_nxt</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x=root,nxt;</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		<span class="keyword">if</span>(v&lt;val[x])</span><br><span class="line">			nxt=val[x],x=son[x][<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			x=son[x][<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> nxt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="FHQ-Treap"><a href="#FHQ-Treap" class="headerlink" title="FHQ Treap"></a>FHQ Treap</h3><p>即无旋转操作的 Treap，通过分裂和合并来维护平衡性。因其无旋，所以可以做可持久化数据结构，并且是平衡树中比较好写的一种。缺点是常数较大。</p>
<details>
<summary>模板题 1 AC 代码</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FHQ_Treap</span>&#123;</span><br><span class="line">	<span class="type">int</span> ls,rs;</span><br><span class="line">	<span class="type">int</span> val,rnd,siz;</span><br><span class="line">&#125;t[N];</span><br><span class="line"><span class="type">int</span> root,tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	t[u].siz=t[t[u].ls].siz+t[t[u].rs].siz<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	t[++tot].rnd=<span class="built_in">rand</span>()&lt;&lt;<span class="number">15</span>|<span class="built_in">rand</span>();</span><br><span class="line">	t[tot].siz=<span class="number">1</span>;</span><br><span class="line">	t[tot].val=val;</span><br><span class="line">	<span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> p,<span class="type">int</span> val,<span class="type">int</span> &amp;lrt,<span class="type">int</span> &amp;rrt)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!p)&#123;</span><br><span class="line">		lrt=rrt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(t[p].val&lt;=val)&#123;</span><br><span class="line">		lrt=p;</span><br><span class="line">		<span class="built_in">split</span>(t[p].rs,val,t[p].rs,rrt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		rrt=p;</span><br><span class="line">		<span class="built_in">split</span>(t[p].ls,val,lrt,t[p].ls);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">push_up</span>(p);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!l||!r)</span><br><span class="line">		<span class="keyword">return</span> l|r;</span><br><span class="line">	<span class="keyword">if</span>(t[l].rnd&gt;t[r].rnd)&#123;</span><br><span class="line">		t[l].rs=<span class="built_in">merge</span>(t[l].rs,r);</span><br><span class="line">		<span class="built_in">push_up</span>(l);</span><br><span class="line">		<span class="keyword">return</span> l;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		t[r].ls=<span class="built_in">merge</span>(l,t[r].ls);</span><br><span class="line">		<span class="built_in">push_up</span>(r);</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">split</span>(root,val,x,y);</span><br><span class="line">	root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,<span class="built_in">build</span>(val)),y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">erase</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y,temp;</span><br><span class="line">	<span class="built_in">split</span>(root,val,x,y);</span><br><span class="line">	<span class="built_in">split</span>(x,val<span class="number">-1</span>,x,temp);</span><br><span class="line">	temp=<span class="built_in">merge</span>(t[temp].ls,t[temp].rs);</span><br><span class="line">	root=<span class="built_in">merge</span>(<span class="built_in">merge</span>(x,temp),y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_rank</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">split</span>(root,val<span class="number">-1</span>,x,y);</span><br><span class="line">	<span class="type">int</span> res=t[x].siz<span class="number">+1</span>;</span><br><span class="line">	root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_kth</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> p=root;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(t[t[p].ls].siz<span class="number">+1</span>==k)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(t[t[p].ls].siz<span class="number">+1</span>&gt;k)</span><br><span class="line">			p=t[p].ls;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			k-=t[t[p].ls].siz<span class="number">+1</span>,p=t[p].rs;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> t[p].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pre</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">split</span>(root,val<span class="number">-1</span>,x,y);</span><br><span class="line">	<span class="type">int</span> p=x;</span><br><span class="line">	<span class="keyword">while</span>(t[p].rs)</span><br><span class="line">		p=t[p].rs;</span><br><span class="line">	root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> t[p].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nxt</span><span class="params">(<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="built_in">split</span>(root,val,x,y);</span><br><span class="line">	<span class="type">int</span> p=y;</span><br><span class="line">	<span class="keyword">while</span>(t[p].ls)</span><br><span class="line">		p=t[p].ls;</span><br><span class="line">	root=<span class="built_in">merge</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span> t[p].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,opt,x;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;opt,&amp;x);</span><br><span class="line">		<span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="built_in">insert</span>(x);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="built_in">erase</span>(x);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">find_rank</span>(x));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">find_kth</span>(x));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">pre</span>(x));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">nxt</span>(x));</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p><a href="https://www.luogu.com.cn/problem/P3369" title="模板题 1">模板题 1</a></p>
<p><a href="https://www.luogu.com.cn/problem/P3391" title="模板题 2">模板题 2</a></p>
<p><a href="https://oi-wiki.org/ds/bst/" title="参考资料">参考资料</a></p>
<p><a href="https://www.deepseek.com/" title="特别鸣谢">特别鸣谢</a>，为我解答了很多问题，以及帮我进行代码的修正。</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Manacher</title>
    <url>/2025/07/05/Manacher/</url>
    <content><![CDATA[<p>今天讲的字符串哈希题觉得都很水啊，咋一听到 Manacher 题就懵逼了呢？重学一遍……  </p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>给定一个长度为 $n$ 的字符串 $S$，找到所有回文子串。<br>最坏情况下有 $O(n^2)$ 个回文串，为了做到线性，我们使用回文半径来表示回文。这样，我们要求的就转化为：对于每个位置 $i$，求出最长回文半径。<br>使用字符串哈希可以容易地在 $O(n\log n)$ 时间内解决，但 Manacher 更为简洁和高效。  </p>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>约定：$[l,r]$ 表示下标在 $l,r$ 之间的子串。<br>我们只考虑长度为奇数的回文串，可以通过在字符串每个字符间加入无关字符如 <code>#</code> 等来把长度为偶数的串转化为长度为奇数的串。接下来，我们维护 $p_i$ 表示以 $i$ 为中心的回文半径，$r$ 为当前找到的覆盖位置最靠右的回文串能覆盖到的最大下标，$mid$ 表示它的回文中心的下标。<br>计算过程考虑分类讨论：  </p>
<ul>
<li><p>$i&gt;r$ 时，直接暴力一步步向后跳。  </p>
</li>
<li><p>$i\le r$ 时，设 $j$ 为 $i$ 关于 $mid$ 的对称点，即 $mid\times 2-i$。<br>由于 $[j-p_j,j+p_j]$ 与 $[i-p_i,i+p_i]$ 相等且都是回文串，所以 $p_i$ 可以直接取 $p_j$ 的值。但这个推论成立当且仅当 $i+p_j\le r$，否则 $p_i$ 只能取到 $r-i+1$，然后再暴力扩展。<br>综上，$p_i=\min(p_j,r-i+1)$。  </p>
</li>
</ul>
<p>$r$ 只能向右移动，故最多移动 $O(n)$ 次。其余情况的计算显然是 $O(1)$ 的。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,r=<span class="number">0</span>,mid=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> j=<span class="number">2</span>*mid-i;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;=r) p[i]=<span class="built_in">min</span>(r-i<span class="number">+1</span>,p[j]);</span><br><span class="line">    <span class="keyword">else</span> p[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i-p[i]]==s[i+p[i]]) ++p[i];</span><br><span class="line">    <span class="keyword">if</span>(i+p[i]<span class="number">-1</span>&gt;r)&#123;</span><br><span class="line">        r=i+p[i]<span class="number">-1</span>;</span><br><span class="line">        mid=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>部分引自 <a href="https://oi-wiki.org/string/manacher/">https://oi-wiki.org/string/manacher/</a>  </p>
<p>非常感谢<a href="https://www.luogu.com.cn/article/2fmdma9m">这篇博客</a>，讲的很透彻，帮我彻底弄懂了 Manacher。  </p>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>五一集训题目合集</title>
    <url>/2025/07/04/%E4%BA%94%E4%B8%80%E9%9B%86%E8%AE%AD%E9%A2%98%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h3 id="A-Simple-Task"><a href="#A-Simple-Task" class="headerlink" title="A Simple Task"></a><a href="https://codeforces.com/problemset/problem/558/E" title="A Simple Task">A Simple Task</a></h3><p>因为字符集大小只有 $26$，考虑直接在线段树每个节点维护当前区间的字符个数。排序时直接暴力区间赋值，复杂度会有 $26$ 的常数。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls u&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs u&lt;&lt;1|1</span></span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> tree[N*<span class="number">4</span>][<span class="number">26</span>],tag[N*<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        tree[u][i]=tree[ls][i]+tree[rs][i];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    tag[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u][s[l]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!~tag[u])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        tree[ls][i]=tree[rs][i]=<span class="number">0</span>;</span><br><span class="line">    tree[ls][tag[u]]=mid-l<span class="number">+1</span>,tree[rs][tag[u]]=r-mid;</span><br><span class="line">    tag[ls]=tag[rs]=tag[u];</span><br><span class="line">    tag[u]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            tree[u][i]=<span class="number">0</span>;</span><br><span class="line">        tree[u][k]=r-l<span class="number">+1</span>;</span><br><span class="line">        tag[u]=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify</span>(ls,l,mid,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">        <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)</span><br><span class="line">        <span class="keyword">return</span> tree[u][k];</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        res+=<span class="built_in">query</span>(ls,l,mid,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">        res+=<span class="built_in">query</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">query_ans</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(tree[u][i])</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>+i;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(u,l,r);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_ans</span>(ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_ans</span>(rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[<span class="number">26</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q&gt;&gt;s;</span><br><span class="line">    s=<span class="string">&quot; &quot;</span>+s;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="type">int</span> l,r,k;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">        <span class="keyword">if</span>(k)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">                a[i]=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])</span><br><span class="line">                    <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,l+a[i]<span class="number">-1</span>,i);</span><br><span class="line">                l+=a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">                a[i]=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">25</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i])</span><br><span class="line">                    <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,l+a[i]<span class="number">-1</span>,i);</span><br><span class="line">                l+=a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,<span class="built_in">query_ans</span>(<span class="number">1</span>,<span class="number">1</span>,n,i));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="HEOI2012-采花"><a href="#HEOI2012-采花" class="headerlink" title="[HEOI2012] 采花"></a><a href="https://www.luogu.com.cn/problem/P4113" title="[HEOI2012] 采花">[HEOI2012] 采花</a></h3><p>离线，树状数组维护之前出现两次及以上的颜色数，每次出现 $2$ 次后在之前的位置加 $1$，并且把之前的之前加的撤销。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x&amp;-x)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,c,m,x[N],tree[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        tree[i]+=k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&gt;<span class="number">0</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        res+=tree[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Query &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r&lt;x.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="type">int</span> pre1[N],pre2[N],ans[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,c,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(x[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">read</span>(q[i].l,q[i].r),q[i].id=i;</span><br><span class="line">    std::<span class="built_in">sort</span>(q<span class="number">+1</span>,q<span class="number">+1</span>+m);</span><br><span class="line">    <span class="type">int</span> now=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(now&lt;=q[i].r)&#123;</span><br><span class="line">            <span class="type">int</span> temp=x[now];</span><br><span class="line">            <span class="keyword">if</span>(pre1[temp])&#123;</span><br><span class="line">                <span class="built_in">modify</span>(pre1[temp],<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(pre2[temp])</span><br><span class="line">                    <span class="built_in">modify</span>(pre2[temp],<span class="number">-1</span>);</span><br><span class="line">                pre2[temp]=pre1[temp];</span><br><span class="line">            &#125;</span><br><span class="line">            pre1[temp]=now;</span><br><span class="line">            now++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[q[i].id]=<span class="built_in">query</span>(q[i].r)-<span class="built_in">query</span>(q[i].l<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="Ynoi2012-NOIP2015-充满了希望"><a href="#Ynoi2012-NOIP2015-充满了希望" class="headerlink" title="[Ynoi2012] NOIP2015 充满了希望"></a><a href="https://www.luogu.com.cn/problem/P5524" title="[Ynoi2012] NOIP2015 充满了希望">[Ynoi2012] NOIP2015 充满了希望</a></h3><p>注意到，任何情况下，查询的答案要么是 $0$，要么是一个确定的值（即有没有被修改过），这个确定的值必然来自 2 操作。所以维护时间戳，利用树状数组查询区间和。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls u&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs u&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,q,opt[N];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> tree[N*<span class="number">4</span>];</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!tree[u])</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            tree[ls]=tree[rs]=tree[u];</span><br><span class="line">            tree[u]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">                tree[u]=k;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">push_down</span>(u);</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">                <span class="built_in">modify</span>(ls,l,mid,x,y,k);</span><br><span class="line">            <span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">                <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(tree[u]||l==r)</span><br><span class="line">                <span class="keyword">return</span> tree[u];</span><br><span class="line">            <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">push_down</span>(u);</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">query</span>(ls,l,mid,x);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">query</span>(rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;a;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BIT</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        ll tree[N];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=m;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">                tree[i]+=k;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!x)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            ll res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">                res+=tree[i];</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;b;</span><br><span class="line"><span class="type">int</span> val[N],t[N];</span><br><span class="line">ll ans[N];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; ask[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,opt,l,r,k;i&lt;=m;i++)&#123;</span><br><span class="line">        cin&gt;&gt;opt;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">            <span class="type">int</span> x=a.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l),y=a.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,r);</span><br><span class="line">            a.<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,l,y);</span><br><span class="line">            a.<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,r,r,x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">            cin&gt;&gt;l&gt;&gt;r&gt;&gt;val[i];</span><br><span class="line">            a.<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cin&gt;&gt;k;</span><br><span class="line">            t[i]=a.<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,l,r;i&lt;=q;i++)&#123;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        ask[r].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(l,i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[i])</span><br><span class="line">            b.<span class="built_in">modify</span>(t[i],val[t[i]]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> k:ask[i])</span><br><span class="line">            ans[k.second]=b.<span class="built_in">query</span>(i)-b.<span class="built_in">query</span>(k.first<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="THUPC-2017-天天爱射击"><a href="#THUPC-2017-天天爱射击" class="headerlink" title="[THUPC 2017] 天天爱射击"></a><a href="https://www.luogu.com.cn/problem/P7424" title="[THUPC 2017] 天天爱射击">[THUPC 2017] 天天爱射击</a></h3><p>法一：<br>主席树 + 二分答案。对每颗子弹设一个版本，二分版本。$O(n\log^2n)$（常数过大无法通过）。<br>法二：<br>静态区间第 $k$ 大。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> root[N],tot;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum,ls,rs;</span><br><span class="line">&#125;tree[N*<span class="number">60</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tree[u].sum=tree[tree[u].ls].sum+tree[tree[u].rs].sum;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> old,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    u=++tot;</span><br><span class="line">    tree[u]=tree[old];</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u].sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify</span>(tree[u].ls,tree[old].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">modify</span>(tree[u].rs,tree[old].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> old,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>,s=tree[tree[u].ls].sum-tree[tree[old].ls].sum;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=s)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tree[u].ls,tree[old].ls,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tree[u].rs,tree[old].rs,mid<span class="number">+1</span>,r,k-s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,ans[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x1,x2,s;</span><br><span class="line">&#125;q[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; b[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">read</span>(q[i].x1,q[i].x2,q[i].s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="built_in">read</span>(x);</span><br><span class="line">		b[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2e5</span>;i++)&#123;</span><br><span class="line">		root[i]=root[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> t:b[i])</span><br><span class="line">			<span class="built_in">modify</span>(root[i],root[i],<span class="number">1</span>,m<span class="number">+1</span>,t);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="type">int</span> x1=q[i].x1,x2=q[i].x2,s=q[i].s;</span><br><span class="line">		<span class="type">int</span> k=<span class="built_in">query</span>(root[x2],root[x1<span class="number">-1</span>],<span class="number">1</span>,m<span class="number">+1</span>,s);</span><br><span class="line">        ans[k]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="Legacy"><a href="#Legacy" class="headerlink" title="Legacy"></a><a href="https://codeforces.com/problemset/problem/786/B" title="Legacy">Legacy</a></h3><p>线段树优化建图。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K 4e5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 4557430888798830399</span></span><br><span class="line"><span class="type">int</span> n,q,s,a[N],tot_edge,head[N*<span class="number">8</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt,w;</span><br><span class="line">&#125;e[N*<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++tot_edge].to=v;</span><br><span class="line">    e[tot_edge].nxt=head[u];</span><br><span class="line">    e[tot_edge].w=w;</span><br><span class="line">    head[u]=tot_edge;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        a[l]=u;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add_edge</span>(u,ls,<span class="number">0</span>),<span class="built_in">add_edge</span>(u,rs,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">add_edge</span>(ls+K,u+K,<span class="number">0</span>),<span class="built_in">add_edge</span>(rs+K,u+K,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> v,<span class="type">int</span> w,<span class="type">bool</span> rev)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(rev)</span><br><span class="line">            <span class="built_in">add_edge</span>(v+K,u,w);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">add_edge</span>(u+K,v,w);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify</span>(ls,l,mid,x,y,v,w,rev);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid)</span><br><span class="line">        <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,v,w,rev);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;ll,<span class="type">int</span>&gt;,vector&lt;pair&lt;ll,<span class="type">int</span>&gt;&gt;,greater&lt;pair&lt;ll,<span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line"><span class="type">bool</span> vis[N*<span class="number">8</span>];</span><br><span class="line">ll dis[N*<span class="number">8</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">read</span>(n,q,s);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">add_edge</span>(a[i],a[i]+K,<span class="number">0</span>),<span class="built_in">add_edge</span>(a[i]+K,a[i],<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,opt,x,y,v,w;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x,y,w);</span><br><span class="line">            <span class="built_in">add_edge</span>(a[x]+K,a[y],w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(v,x,y,w);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y,a[v],w,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">read</span>(v,x,y,w);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y,a[v],w,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[(<span class="type">int</span>)(a[s]+K)]=<span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>,a[s]+K));</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=que.<span class="built_in">top</span>().second;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">            <span class="type">int</span> v=e[i].to,w=e[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dis[a[i]]==inf)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1 &quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,dis[a[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="NOI2018-归程"><a href="#NOI2018-归程" class="headerlink" title="[NOI2018] 归程"></a><a href="https://www.luogu.com.cn/problem/P4768" title="[NOI2018] 归程">[NOI2018] 归程</a></h3><p>使用 Kruskal 重构树，倍增查找，时间复杂度 $O(n\log n)$。<br><del>多测一定要记得清 head 数组……</del></p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>,M=<span class="number">4e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,a;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&gt;x.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[M*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt,w;</span><br><span class="line">&#125;e[M*<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> tot_edge,head[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    e[++tot_edge].to=v;</span><br><span class="line">    e[tot_edge].w=w;</span><br><span class="line">    e[tot_edge].nxt=head[u];</span><br><span class="line">    head[u]=tot_edge;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;,greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line"><span class="type">int</span> dis[N*<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line">    dis[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=que.<span class="built_in">top</span>().second;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[u]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">            <span class="type">int</span> v=e[i].to,w=e[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">		        que.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dis[v],v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,q,k,s,fa[M*<span class="number">2</span>],w[M*<span class="number">2</span>],f[M*<span class="number">2</span>][<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt=n;</span><br><span class="line">    <span class="built_in">sort</span>(p<span class="number">+1</span>,p<span class="number">+1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++)</span><br><span class="line">        fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">find</span>(p[i].u),y=<span class="built_in">find</span>(p[i].v);</span><br><span class="line">        <span class="keyword">if</span>(x==y)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        fa[x]=fa[y]=++cnt;</span><br><span class="line">        w[cnt]=p[i].a;</span><br><span class="line">        dis[cnt]=<span class="built_in">Min</span>(dis[x],dis[y]);</span><br><span class="line">        f[x][<span class="number">0</span>]=f[y][<span class="number">0</span>]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">            f[j][i]=f[f[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lastans,v0,p0;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(f[x][i]&amp;&amp;w[f[x][i]]&gt;y)</span><br><span class="line">            x=f[x][i];</span><br><span class="line">    <span class="keyword">return</span> dis[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;return.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">	<span class="built_in">freopen</span>(<span class="string">&quot;return.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="built_in">read</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		tot_edge=lastans=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">memset</span>(w,<span class="number">0</span>,<span class="built_in">sizeof</span>(w));</span><br><span class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in">sizeof</span>(f));</span><br><span class="line">		<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">		<span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="built_in">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">read</span>(n,m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,l;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(p[i].u,p[i].v,l,p[i].a);</span><br><span class="line">            <span class="built_in">add_edge</span>(p[i].u,p[i].v,l);</span><br><span class="line">            <span class="built_in">add_edge</span>(p[i].v,p[i].u,l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dijkstra</span>();</span><br><span class="line">        <span class="built_in">kruskal</span>();</span><br><span class="line">        <span class="built_in">read</span>(q,k,s);</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="built_in">read</span>(v0,p0);</span><br><span class="line">            v0=(v0+k*lastans<span class="number">-1</span>)%n<span class="number">+1</span>;</span><br><span class="line">            p0=(p0+k*lastans)%(s<span class="number">+1</span>);</span><br><span class="line">            lastans=<span class="built_in">query</span>(v0,p0);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lastans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="SCOI2016-萌萌哒"><a href="#SCOI2016-萌萌哒" class="headerlink" title="[SCOI2016] 萌萌哒"></a><a href="https://www.luogu.com.cn/problem/P3295" title="[SCOI2016] 萌萌哒">[SCOI2016] 萌萌哒</a></h3><p>倍增+并查集。考虑将区间二进制拆分，之后再合并。$f_{i,j}$ 表示以 $i$ 为左端点，长度为 $2^j$ 的区间的所在连通块的左端点。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,f[N][<span class="number">25</span>],l1,r1,l2,r2,ans,maxn;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x][k])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x][k]=<span class="built_in">find</span>(f[x][k],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="built_in">find</span>(x,k),b=<span class="built_in">find</span>(y,k);</span><br><span class="line">    <span class="keyword">if</span>(a!=b)</span><br><span class="line">        f[a][k]=b;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> flag=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    maxn=std::__lg(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=maxn;j++)</span><br><span class="line">            f[i][j]=i;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">read</span>(l1,r1,l2,r2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=maxn;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span>(l1+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=r1)&#123;</span><br><span class="line">                <span class="built_in">merge</span>(l1,l2,j);</span><br><span class="line">                l1+=<span class="number">1</span>&lt;&lt;j;</span><br><span class="line">                l2+=<span class="number">1</span>&lt;&lt;j;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=maxn;j;j--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> x=<span class="built_in">find</span>(i,j);</span><br><span class="line">            <span class="built_in">merge</span>(i,x,j<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">merge</span>(i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)),x+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>)),j<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(f[i][<span class="number">0</span>]==i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                ans=<span class="number">9</span>;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ans=(ans*<span class="number">10ll</span>)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="HH-去散步"><a href="#HH-去散步" class="headerlink" title="HH 去散步"></a><a href="https://www.luogu.com.cn/problem/P2151" title="HH 去散步">HH 去散步</a></h3><p>设边权均为 $1$，计算邻接矩阵 $A$ 的 $k$ 次幂，则 $A^k_{i,j}$ 表示走 $k$ 步能连接 $i$ 和 $j$ 两点间的路径条数。但这道题要求不走回头路，我们考虑点边互换，记录入边和出边来避免走回头路。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(T x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">putchar</span>(x<span class="number">+48</span>);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">write</span>(x/<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(x%<span class="number">10</span><span class="number">+48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 45989</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">    <span class="type">int</span> x[N][N];</span><br><span class="line">    <span class="built_in">Matrix</span>()&#123;</span><br><span class="line">        <span class="built_in">memset</span>(x,<span class="number">0</span>,<span class="built_in">sizeof</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix &amp;a)&#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=cnt;k++)</span><br><span class="line">                    res.x[i][j]=(res.x[i][j]+x[i][k]*a.x[k][j]%mod)%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p;</span><br><span class="line"><span class="type">int</span> n,m,t,a,b,res;</span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        res.x[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">            res=res*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,t,a,b);</span><br><span class="line">    a++,b++;</span><br><span class="line">    e[cnt=<span class="number">1</span>].u=<span class="number">0</span>,e[<span class="number">1</span>].v=a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        u++,v++;</span><br><span class="line">        e[++cnt].u=u;</span><br><span class="line">        e[cnt].v=v;</span><br><span class="line">        e[++cnt].u=v;</span><br><span class="line">        e[cnt].v=u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">            <span class="keyword">if</span>(e[i].v==e[j].u&amp;&amp;i!=(j^<span class="number">1</span>)&amp;&amp;i!=j)</span><br><span class="line">                p.x[i][j]=<span class="number">1</span>;</span><br><span class="line">    p=<span class="built_in">qpow</span>(p,t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        <span class="keyword">if</span>(e[i].v==b)</span><br><span class="line">            res=(res+p.x[<span class="number">1</span>][i])%mod;</span><br><span class="line">    <span class="built_in">write</span>(res);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="SDOI2015-寻宝游戏"><a href="#SDOI2015-寻宝游戏" class="headerlink" title="[SDOI2015] 寻宝游戏"></a><a href="https://www.luogu.com.cn/problem/P3320" title="[SDOI2015] 寻宝游戏">[SDOI2015] 寻宝游戏</a></h3><p>将关键点按 dfn 排序为 $a_1,a_2,a_3,\cdots,a_n$，则包含所有关键点的最小生成树的边权和的 $2$ 倍为 $dis(a_1,a_2)+dis(a_2,a_3)+\cdots+dis(a_n,a_1)$。<br>实现方面，使用一个 set 来查询前驱后继。这题不开 long long 一分没有。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll ans,d[N];</span><br><span class="line"><span class="type">int</span> dfn[N],son[N],dfncnt,idfn[N],dep[N],siz[N],top[N],fa[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> to,w;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;edge&gt; e[N];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    fa[u]=f;</span><br><span class="line">    dep[u]=dep[f]<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=i.to,w=i.w;</span><br><span class="line">        <span class="keyword">if</span>(v==f)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        d[v]=d[u]+w;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])</span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">    top[u]=topf;</span><br><span class="line">    dfn[u]=++dfncnt;</span><br><span class="line">    idfn[dfncnt]=u;</span><br><span class="line">    <span class="keyword">if</span>(!son[u])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=i.to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[a]!=top[b])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[a]]&gt;dep[top[b]])</span><br><span class="line">            a=fa[top[a]];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b=fa[top[b]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[a]&gt;dep[b]?b:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">dis</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">	a=idfn[a],b=idfn[b];</span><br><span class="line">    <span class="keyword">return</span> d[a]+d[b]<span class="number">-2</span>*d[<span class="built_in">lca</span>(a,b)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(st.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		st.<span class="built_in">insert</span>(t);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(st.<span class="built_in">size</span>()==<span class="number">1</span>)&#123;</span><br><span class="line">		ans=<span class="number">2</span>*<span class="built_in">dis</span>(*st.<span class="built_in">begin</span>(),t);</span><br><span class="line">		st.<span class="built_in">insert</span>(t);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	st.<span class="built_in">insert</span>(t);</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="keyword">auto</span> it=st.<span class="built_in">find</span>(t);</span><br><span class="line">	<span class="keyword">if</span>(it==st.<span class="built_in">begin</span>())</span><br><span class="line">		x=*--st.<span class="built_in">end</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		x=*--it;</span><br><span class="line">	it=st.<span class="built_in">find</span>(t);</span><br><span class="line">	<span class="keyword">if</span>(it==--st.<span class="built_in">end</span>())</span><br><span class="line">		y=*st.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		y=*++it;</span><br><span class="line">	ans+=<span class="built_in">dis</span>(x,t)+<span class="built_in">dis</span>(t,y)-<span class="built_in">dis</span>(x,y);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(st.<span class="built_in">size</span>()&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">		st.<span class="built_in">erase</span>(t);</span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(st.<span class="built_in">size</span>()==<span class="number">3</span>)&#123;</span><br><span class="line">		st.<span class="built_in">erase</span>(t);</span><br><span class="line">		ans=<span class="number">2</span>*<span class="built_in">dis</span>(*st.<span class="built_in">begin</span>(),*--st.<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="keyword">auto</span> it=st.<span class="built_in">find</span>(t);</span><br><span class="line">	<span class="keyword">if</span>(it==st.<span class="built_in">begin</span>())</span><br><span class="line">		x=*--st.<span class="built_in">end</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		x=*--it;</span><br><span class="line">	it=st.<span class="built_in">find</span>(t);</span><br><span class="line">	<span class="keyword">if</span>(it==--st.<span class="built_in">end</span>())</span><br><span class="line">		y=*st.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		y=*++it;</span><br><span class="line">	ans-=<span class="built_in">dis</span>(x,t)+<span class="built_in">dis</span>(t,y)-<span class="built_in">dis</span>(x,y);</span><br><span class="line">	st.<span class="built_in">erase</span>(t);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">read</span>(x,y,z);</span><br><span class="line">        e[x].<span class="built_in">push_back</span>(&#123;y,z&#125;);</span><br><span class="line">        e[y].<span class="built_in">push_back</span>(&#123;x,z&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> t;</span><br><span class="line">        <span class="built_in">read</span>(t);</span><br><span class="line">		t=dfn[t];</span><br><span class="line">        <span class="keyword">if</span>(st.<span class="built_in">find</span>(t)==st.<span class="built_in">end</span>())</span><br><span class="line">			<span class="built_in">add</span>(t);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">			<span class="built_in">del</span>(t);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串入门</title>
    <url>/2025/07/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="字典树-Trie"><a href="#字典树-Trie" class="headerlink" title="字典树/Trie"></a>字典树/Trie</h3><p>结构为一棵树，从根节点到树上某一结点的一条路径就是一个字符串。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">id</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(c&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> c-<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> c-<span class="string">&#x27;a&#x27;</span><span class="number">+26</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> c-<span class="string">&#x27;0&#x27;</span><span class="number">+52</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Trie</span>&#123;</span><br><span class="line">	<span class="type">int</span> nxt[N][<span class="number">65</span>],tot,cnt[N];</span><br><span class="line">	<span class="type">bool</span> end[N];</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">64</span>;j++)</span><br><span class="line">				nxt[i][j]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">			cnt[i]=<span class="number">0</span>,end[i]=<span class="number">0</span>;</span><br><span class="line">		tot=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> p=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">			<span class="type">int</span> c=<span class="built_in">id</span>(s[i]);</span><br><span class="line">			<span class="keyword">if</span>(!nxt[p][c])</span><br><span class="line">				nxt[p][c]=++tot;</span><br><span class="line">			p=nxt[p][c];</span><br><span class="line">			cnt[p]++;</span><br><span class="line">		&#125;</span><br><span class="line">		end[p]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">char</span> s[])</span></span>&#123;</span><br><span class="line">		<span class="type">int</span> p=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">			<span class="type">int</span> c=<span class="built_in">id</span>(s[i]);</span><br><span class="line">			<span class="keyword">if</span>(!nxt[p][c])</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			p=nxt[p][c];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cnt[p];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>字符串查找，前缀统计等。<br>一些关于后缀的操作可以反转字符串变为前缀操作。  </p>
<h3 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h3><p>进行 KMP 算法的过程其实就是在求一个叫做<strong>最长公共前后缀</strong>的东西。<br>定义一个字符串 $S$ 的 border 为 $S$ 的一个非 $S$ 本身的子串 $T$，满足 $T$ 既是 $S$ 的前缀，又是 $S$ 的后缀。求解最大 border。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">nxt[<span class="number">1</span>]=<span class="number">0</span>;<span class="comment">//nxt[i]表示字串S[1...i]的最大border的长度</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=len;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(j&amp;&amp;s[j<span class="number">+1</span>]!=s[i])</span><br><span class="line">		j=nxt[j];</span><br><span class="line">	<span class="keyword">if</span>(s[j<span class="number">+1</span>]==s[i])</span><br><span class="line">		j++;</span><br><span class="line">	nxt[i]=j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h4><p>查找 $S_2$ 串在 $S_1$ 串的位置。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=len2;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(j&amp;&amp;s2[j<span class="number">+1</span>]!=s2[i])</span><br><span class="line">		j=nxt[j];</span><br><span class="line">	<span class="keyword">if</span>(s2[j<span class="number">+1</span>]==s2[i])</span><br><span class="line">		j++;</span><br><span class="line">	nxt[i]=j;</span><br><span class="line">&#125;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len1;i++)&#123;</span><br><span class="line">	<span class="keyword">while</span>(j&amp;&amp;s2[j<span class="number">+1</span>]!=s1[i])</span><br><span class="line">		j=nxt[j];</span><br><span class="line">	<span class="keyword">if</span>(s2[j<span class="number">+1</span>]==s1[i])</span><br><span class="line">		j++;</span><br><span class="line">	<span class="keyword">if</span>(j==len2)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i-j<span class="number">+1</span>);</span><br><span class="line">		j=nxt[j];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>另一种方法是，构建一个新字符串 $S=S_2+a+S_1$，进行一次 KMP，若某点 $nxt$ 值等于 $S_2$ 的长度则找到了一个解。$a$ 为字符集以外的任意字符，如 <code>#</code>。  </p>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>差分约束</title>
    <url>/2025/07/04/%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>血的教训：模拟赛出了个差分约束板子结果发现不会打。<br><a href="https://www.luogu.com.cn/problem/P5960" title="题目链接">题目链接</a></p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>我们有一些形如</p>
<script type="math/tex; mode=display">x_c-x_{c^\prime}\le y</script><p>的方程构成了方程组，要求出一组解。<br>之后进行神奇的关联，我们来看一个求最短路的代码片段：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].w)&#123;</span><br><span class="line">	dis[v]=dis[u]+e[i].w;</span><br><span class="line">	<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">		q.<span class="built_in">push</span>(v);</span><br><span class="line">		vis[v]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们发现，这里通过松弛操作维护了</p>
<script type="math/tex; mode=display">dis[v] \le dis[u]+e[i].w</script><p>移项，得</p>
<script type="math/tex; mode=display">dis[v]-dis[u]\le e[i].w</script><p>我们发现，这与题目中所给的方程形式完全一致。所以，我们可以将解方程组转化为一个图论问题，使用最短路算法求出方程的一组解，这就是差分约束系统。</p>
<h3 id="题目解法"><a href="#题目解法" class="headerlink" title="题目解法"></a>题目解法</h3><p>通过观察以上两个式子，发现 $c$ 对应一条边的 $v$ 节点，$c^\prime$ 对应边的 $u$ 节点，只要建立一个权值为 $y$ 的边就好了。<br>但我们发现，这样不一定能保证图的连通性，解决办法是建立一个虚拟的 $0$ 号超级源点，与每个节点建一条权值为 $0$ 的边。<br>还有方程无解的问题，对应图论中的负环问题。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e3</span><span class="number">+10</span>,M=<span class="number">1e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,head[N],tot,cnt[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dis[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt,w;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	e[tot].w=w;</span><br><span class="line">	head[u]=tot;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">	dis[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">	vis[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		vis[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(dis[v]&gt;dis[u]+e[i].w)&#123;</span><br><span class="line">				dis[v]=dis[u]+e[i].w;</span><br><span class="line">				<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">					vis[v]=<span class="number">1</span>;</span><br><span class="line">					cnt[v]++;</span><br><span class="line">					<span class="keyword">if</span>(cnt[v]==n<span class="number">+1</span>)<span class="comment">//判负环</span></span><br><span class="line">						<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">0</span>);<span class="comment">//虚拟源点</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> c1,c2,y;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;c1,&amp;c2,&amp;y);</span><br><span class="line">		<span class="built_in">add</span>(c2,c1,y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">spfa</span>())&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,dis[i]);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="其他形式"><a href="#其他形式" class="headerlink" title="其他形式"></a>其他形式</h3><p>若有 $x<em>c-x</em>{c^\prime}\ge y$，可以两边同时乘 $-1$ 改变不等号方向，或者跑最长路。<br>若有 $x<em>c-x</em>{c^\prime}=y$，可以将其拆分为</p>
<script type="math/tex; mode=display">
\begin{cases}
x_c-x_{c^\prime}\le y\\
x_c-x_{c^\prime}\ge y
\end{cases}</script><p><a href="https://www.luogu.com.cn/record/204400669" title="End.">End.</a></p>
]]></content>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>初等数论</title>
    <url>/2025/07/15/%E5%88%9D%E7%AD%89%E6%95%B0%E8%AE%BA/</url>
    <content><![CDATA[<p>之前写几篇数论文章已经忘了，而且写的也不是很美丽，正巧今天讲课讲了一遍数论，那就当从头复习一遍。</p>
<h3 id="符号与约定"><a href="#符号与约定" class="headerlink" title="符号与约定"></a>符号与约定</h3><p>非特殊声明下，本文所涉及的数均为非负整数。<br>$a\mid b$ 表示 $b$ 是 $a$ 的倍数，$a$ 是 $b$ 的约数。<br>$\gcd(a,b)$ 表示 $a$ 和 $b$ 的最大公约数。在不引起混淆的前提下可记作 $(a,b)$。<br>$\operatorname{lcm}(a,b)$ 表示 $a$ 和 $b$ 的最小公倍数。在不引起混淆的前提下可记作 $[a,b]$。</p>
<h3 id="素数"><a href="#素数" class="headerlink" title="素数"></a>素数</h3><p>数量估计：小于等于 $x$ 的素数<strong>约有</strong> $\dfrac{x}{\ln x}$ 个。</p>
<h4 id="埃拉托斯特尼筛法"><a href="#埃拉托斯特尼筛法" class="headerlink" title="埃拉托斯特尼筛法"></a>埃拉托斯特尼筛法</h4><p>原理：所有合数必然都有素因子，则我们可以采用“标记”的思想，若遇到一个未被标记的数，则其必为素数，并将它的所有倍数标记。反之它就是合数。时间复杂度 $O(n\log \log n)$。我不会证。简单的优化是标记数组使用 <code>std::bitset</code>，性能甚至超越了 $O(n)$ 的线性筛法。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e7</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">bitset&lt;N&gt; p;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="number">1e7</span>;</span><br><span class="line">    p.<span class="built_in">set</span>();</span><br><span class="line">    p[<span class="number">0</span>]=p[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n/i;i++)</span><br><span class="line">        <span class="keyword">if</span>(p[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i*i;j&lt;=n;j+=i)</span><br><span class="line">                p[j]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>外层循环只需执行到 $\sqrt{n}$ 即可。使用安全的除法运算防止 <code>int</code> 溢出。</p>
<h4 id="线性筛法"><a href="#线性筛法" class="headerlink" title="线性筛法"></a>线性筛法</h4><p>也叫欧拉筛法。其时间复杂度为线性的原因是每个合数仅会被标记 $1$ 次。更为重要的是，在筛出所有质数的同时也能求出所有数的最小质因子，可以优化质因数分解。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e7</span><span class="number">+10</span>,M=<span class="number">7e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,p[M],e[N],tot;<span class="comment">//e[i]存储i的最小质因子在p[]中的下标</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="number">1e7</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e[i]) p[e[i]=++tot]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=e[i]&amp;&amp;p[j]&lt;=n/i;j++)</span><br><span class="line">            e[p[j]*i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="算术基本定理"><a href="#算术基本定理" class="headerlink" title="算术基本定理"></a>算术基本定理</h4><p>任何一个数 $n$，都可以表示为有限个素数之积。即可以表示为：</p>
<script type="math/tex; mode=display">n=\prod p_i^{\alpha_i}</script><p>这也是标准素因数分解式。<br>根据这个式子，设 $a=\prod p_i^{\alpha_i}$，$b=\prod p_i^{\beta_i}$，则 $\gcd(a,b)$ 可表示为 $\prod p_i^{\min(\alpha_i,\beta_i)}$，$\operatorname{lcm}(a,b)$ 可表示为 $\prod p_i^{\max(\alpha_i,\beta_i)}$。根据这个定义，容易证明</p>
<script type="math/tex; mode=display">\gcd(a,b)\times \operatorname{lcm}(a,b)=a\times b</script><h3 id="同余"><a href="#同余" class="headerlink" title="同余"></a>同余</h3><h4 id="求最大公约数"><a href="#求最大公约数" class="headerlink" title="求最大公约数"></a>求最大公约数</h4><p>辗转相除法，又名欧几里得算法。原理：$\gcd(a,b)=\gcd(b,a\bmod b)$。递归执行，边界为 $\gcd(a,0)=a$。时间复杂度 $O(\log \min(a,b))$。</p>
<h4 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h4><p>对于 $a,b$，存在 $x,y$ 使得  </p>
<script type="math/tex; mode=display">ax+by=\gcd(a,b)</script><p>并且方程 $ax+by=c$ 有解当且仅当 $\gcd(a,b)\mid c$。以下是求解过程的推导：  </p>
<script type="math/tex; mode=display">\begin{aligned}
ax+by&=\gcd(a,b)\\
&=\gcd(b,a\bmod b)\\
&=bx'+(a-b\times \lfloor\frac{a}{b}\rfloor)y'\\
&=ay'+b(x'-\lfloor\frac{a}{b}\rfloor y')
\end{aligned}</script><p>像欧几里得算法一样递归求解即可。这个算法叫做扩展欧几里得算法。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d=<span class="built_in">exgcd</span>(b,a%b,x,y);</span><br><span class="line">    <span class="type">int</span> temp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=temp-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h4><p>线性求法：<br>要求模数 $p$ 为<strong>质数</strong>。显然在 $i=1$ 时 $i^{-1}=1$，考虑 $i&gt;1$ 的情况。设 $k=\lfloor\dfrac{p}{i}\rfloor,j=p\bmod i$，则 $p=ki+j$。则 $ki+j\equiv 0 \pmod p$，两边同时乘 $i^{-1}j^{-1}$，得 $kj^{-1}+i^{-1}\equiv 0\pmod p$，移项并回代 $k,j$，得 $i^{-1}\equiv -\lfloor\dfrac{p}{i}\rfloor\times(p\bmod i)^{-1} \pmod p$ 实际操作中为了避免负数，可以将 $-\lfloor\dfrac{p}{i}\rfloor$ 替换为 $p-\lfloor\dfrac{p}{i}\rfloor$。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    inv[i]=(<span class="type">long</span> <span class="type">long</span>)(p-p/i)*inv[p%i]%p;</span><br></pre></td></tr></table></figure><br>不过一般都直接用费马小定理快速幂求出。</p>
<h4 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h4><p>定义欧拉函数 $\varphi(n)$ 为 $1\sim n$ 中与 $n$ 互素的数的个数。  </p>
<script type="math/tex; mode=display">\varphi(n)=n\prod \frac{p_i-1}{p_i}</script><p>证明：容斥，但我不会。<br>欧拉定理：<br>若 $a,m$ <strong>互质</strong>，则 $a^{\varphi(m)}\equiv 1\pmod m$。<br>扩展欧拉定理：</p>
<script type="math/tex; mode=display">a^b\equiv \begin{cases}a^{b\bmod \varphi(m)},&\gcd(a,m)=1,\\
a^b,&\gcd(a,m)\ne 1,b<\varphi(m),\\
a^{(b\bmod\varphi(m))+\varphi(m)},&\gcd(a,m)\ne 1,b\ge\varphi(m).
\end{cases}
\pmod m</script><p>都不会证。</p>
<h3 id="线性同余方程组"><a href="#线性同余方程组" class="headerlink" title="线性同余方程组"></a>线性同余方程组</h3><h4 id="扩展中国剩余定理"><a href="#扩展中国剩余定理" class="headerlink" title="扩展中国剩余定理"></a>扩展中国剩余定理</h4><p>又称 exCRT。<br>给定同余方程组  </p>
<script type="math/tex; mode=display">\begin{cases}
x\equiv a_1\pmod {m_1},\\
x\equiv a_2\pmod {m_2},\\
\cdots\\
x\equiv a_n\pmod {m_n}.
\end{cases}</script><p>在模数<strong>不保证</strong>互质的情况下求解 $x$。<br>原理：exCRT 的本质是合并线性同余方程。<br>定理：若方程组有解，则解在模 $\operatorname{lcm}(m_1,m_2,\cdots,m_n)$ 意义下唯一，否则无解。<br>求解过程：<br>考虑 $2$ 个同余方程的情况：</p>
<script type="math/tex; mode=display">\begin{cases}
x\equiv a_1\pmod {m_1},\\
x\equiv a_2\pmod {m_2}.
\end{cases}</script><p>设 $x=k_1m_1+a_1=k_2m_2+a_2$，则 $k_1m_1-k_2m_2=a_2-a_1$。注意：根据裴蜀定理，当且仅当 $\gcd(m_1,m_2)\mid (a_2-a_1)$ 时此方程有解。设 $d=\gcd(m_1,m_2)$，原式写为 $\dfrac{m_1}{d}k_1-\dfrac{m_2}{d}k_2=\dfrac{a_2-a_1}{d}$，设 $m_1’=\dfrac{m_1}{d},m_2’=\dfrac{m_2}{d},c=\dfrac{a_2-a_1}{d}$，则方程变为：  </p>
<script type="math/tex; mode=display">m_1'k_1+m_2'k_2=c</script><p>因为 $\gcd(m_1’,m_2’)=1$，所以可以直接用扩展欧几里得算法求出 $k_1$ 的一个特解 $k_1^<em>$。$k_1$ 的通解为 $k_1=k_1^</em>+t\times m_2’$，代回，得到 $x$ 的通解为   </p>
<script type="math/tex; mode=display">\begin{aligned}
x&=k_1m_1+a_1\\
&=(k_1^*+t\times m_2')m_1+a_1\\
&=m_1k_1^*+a_1+t\times m_1m_2'
\end{aligned}</script><p>注意到 $m_1m_2’=\dfrac{m_1m_2}{d}=\operatorname{lcm}(m_1,m_2)$，所以有  </p>
<script type="math/tex; mode=display">x\equiv m_1k_1^*+a_1\pmod{\operatorname{lcm}(m_1,m_2)}</script><p>至此，我们成功合并了两个方程。<br>对于 $n$ 个方程的合并，只需重复以上步骤，一直合并到只剩一个方程 $x\equiv A\pmod M$，其中 $M=\operatorname{lcm}(m_1,m_2,\cdots,m_n)$。时间复杂度 $O(n\log M)$。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exCRT</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a1=a[<span class="number">1</span>],m1=m[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a2=a[i],m2=m[i];</span><br><span class="line">        <span class="type">int</span> k1,k2;</span><br><span class="line">        <span class="type">int</span> d=<span class="built_in">exgcd</span>(m1,m2,k1,k2);</span><br><span class="line">        <span class="keyword">if</span>((a2-a1)%d!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        k1*=(a2-a1)/d;</span><br><span class="line">        <span class="type">int</span> t=m2/d;</span><br><span class="line">        k1=(k1%t+t)%t;</span><br><span class="line">        a1+=k1*m1;</span><br><span class="line">        m1=m1/d*m2;</span><br><span class="line">        a1=(a1%m1+m1)%m1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>附表：<br><img src="https://github.com/headless-piston/blog_images/blob/main/prime.jpg?raw=true" alt=""></p>
<p>参考资料：<br><a href="https://oi-wiki.org/math/">https://oi-wiki.org/math/</a><br><a href="https://www.cnblogs.com/Tmbcan/p/18903233">https://www.cnblogs.com/Tmbcan/p/18903233</a></p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>基础对拍详解</title>
    <url>/2025/07/04/%E5%9F%BA%E7%A1%80%E5%AF%B9%E6%8B%8D%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="这个密码看着不太对。" data-whm="这个文章不能被校验。">
  <script id="hbeData" type="hbeData" data-hmacdigest="6379568937095e9d290783699a912932b7355bc2544291836633b7a0c2ceb1ac"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-shrink">
      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">这里需要密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Kalthyix 团队周报</tag>
      </tags>
  </entry>
  <entry>
    <title>指令集</title>
    <url>/2025/08/22/%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    <content><![CDATA[<h1 id="声明：任何情况下，都不要在正式比赛中使用指令集"><a href="#声明：任何情况下，都不要在正式比赛中使用指令集" class="headerlink" title="声明：任何情况下，都不要在正式比赛中使用指令集"></a>声明：任何情况下，都不要在正式比赛中使用指令集</h1><p>$n$ 方过百万，暴力碾标算。  </p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>简单来说，指令集就是 CPU 可以直接接收并执行而不需要像其他代码一样需要经过繁杂处理的一类命令。现在的 Intel 和 AMD 的 CPU 一般都支持 SSE（128 位）、AVX（256 位）等指令集。以下以 AVX 指令集为例介绍一般使用方法。若想用别的指令集可以尝试把下文的 <code>256</code> 改为 <code>128</code> 等，如 <code>__m256i</code> 改为 <code>__m128i</code>。  </p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>指令集通过对存储和运算向量化来优化效率。通俗的一种理解是分块/状压，通过一种 64/128/256 位的容器存储变量。以 <code>int</code> 为例，一个 256 位的容器就可以存储 8 个 <code>int</code>，可以得到近似 $\dfrac{1}{8}$ 的常数优化。  </p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;immintrin.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>头文件是帮你封装好的，让你不用在代码中内联汇编。  </p>
<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p><code>__m256</code> 为 <code>float</code>，<code>__m256i</code> 为 <code>long long</code>，<code>__m256d</code> 为 <code>double</code>。<br>额，<code>int</code> 呢？其实可以用 <code>__m256i</code> 存，方式类似那个一个 <code>long long</code> 拆成两个 <code>int</code> 用的奇技淫巧。  </p>
<h3 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>直接像其他变量一样就行<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__m256i a;</span><br><span class="line">__m256 b;</span><br><span class="line">__m256d c;</span><br></pre></td></tr></table></figure></p>
<h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p>对于 <code>__m256i</code>，用 <code>_mm256_set_epi32(int e7,int e6,int e5,int e4,int e3,int e2,int e1,int e0)</code> 和 <code>_mm256_set_epi64x(long long e3,long long e2,long long e1,long long e0)</code>，这两条都指令返回一个 <code>__m256i</code>。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__m256i a;</span><br><span class="line">a=_mm256_set_epi32(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>);</span><br><span class="line">a=_mm256_set_epi64x(<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><br>注意，以上指令的下标是逆序的。<br>如果想整体赋值，可以用 <code>_mm256_set1_epi32(int a)</code> 和 <code>_mm256_set1_epi64x(long long a)</code>。  </p>
<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p><code>_mm256_add_epi32(__m256i a,__m256i b)</code> 把 <code>a</code> 和 <code>b</code> 内的值按 32 位整型大小相加并返回结果。同理，<code>add</code> 可换为 <code>sub</code>（减法）、<code>mullo</code>（乘法）、<code>abs</code>（绝对值）还有位运算等等。<br>64 位同理，参考上文格式，将 <code>epi32</code> 换为 <code>epi64x</code> 即可。下文亦不再过多赘述。  </p>
<h4 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h4><p>这里是一个难点，认真看：<br>可以直接下标访问<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__m256i a=_mm256_set_epi32(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><br>结果为 $3\times 2^{32}+4$（事实上不会显示这个数，因为是以 <code>int</code> 形式输出的）。原因如下：<br><code>__m256i</code> 存储是逆序的，所以下标要倒着看。而 <code>__m256i</code> 存的又是 <code>long long</code>，所以寻址到元素 $3$ 和 $4$ 所在的那 64 位。<br>那我咋访问 <code>int</code> 类型？<br>用 <code>int</code> 指针强行指……<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">__m256i a=_mm256_set_epi32(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line"><span class="type">int</span> *b=(<span class="type">int</span>*)&amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,b[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><br>这样就输出 $6$。  </p>
<p>试试看：</p>
<ul>
<li><a href="https://qoj.ac/problem/8616">Fast Tree Queries</a>  </li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://ouuan.github.io/post/n%E6%96%B9%E8%BF%87%E7%99%BE%E4%B8%87-%E6%9A%B4%E5%8A%9B%E7%A2%BE%E6%A0%87%E7%AE%97%E6%8C%87%E4%BB%A4%E9%9B%86%E4%BC%98%E5%8C%96%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/">https://ouuan.github.io/post/n%E6%96%B9%E8%BF%87%E7%99%BE%E4%B8%87-%E6%9A%B4%E5%8A%9B%E7%A2%BE%E6%A0%87%E7%AE%97%E6%8C%87%E4%BB%A4%E9%9B%86%E4%BC%98%E5%8C%96%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</a></p>
]]></content>
      <tags>
        <tag>其他技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>暑假集训题目合集-1</title>
    <url>/2025/07/11/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86-1/</url>
    <content><![CDATA[<p>Day $n$ 指第 $n$ 个讲课日，模拟赛过屎，不放了。</p>
<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><h2 id="单调队列优化-DP"><a href="#单调队列优化-DP" class="headerlink" title="单调队列优化 DP"></a>单调队列优化 DP</h2><p>一般形如 $dp<em>i=\max</em>{j\in[l_i,r_i]}(f(j))+g(j)$ 的形式可以进行单调队列优化，其中 $f(i)$ 是一个关于 $j$ 的函数，$[l_i,r_i]$ 是滑动窗口。</p>
<h3 id="宝物筛选"><a href="#宝物筛选" class="headerlink" title="宝物筛选"></a><a href="https://www.luogu.com.cn/problem/P1776">宝物筛选</a></h3><p>多重背包优化。$O(nW\log m)$ 的二进制拆分优化就不讲了。<br>考虑朴素的 $O(nWm)$ 转移：</p>
<script type="math/tex; mode=display">dp_{j}=\max_{k=0}^{m_i}(dp_{j-k\times w_i}+k\times v_i)</script><p>尝试改写成适合单调队列优化的形式，按余数分组：<br>设当前 $r=j\bmod w_i$，$t=\lfloor j/w_i\rfloor$，状态转移方程改写为：</p>
<script type="math/tex; mode=display">dp_j=\max_{k=0}^{\min(m_i,t)}(dp_{r+(t-k)\cdot w_i}+k\cdot v_i)</script><p>令 $t’=t-k$，则 $k=t-t’$：</p>
<script type="math/tex; mode=display">\begin{aligned}
dp_j&=\max(dp_{r+t'\cdot w_i}+(t-t')\cdot v_i)\\
&=\max(dp_{r+t'\cdot w_i}+t'\cdot v_i)+t\cdot v_i
\end{aligned}</script><p>$t’\in[\max(0,t-m_i),t]$，构成一个滑动窗口。<br>时间复杂度 $O(nW)$。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">4e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="type">int</span> val,t;</span><br><span class="line">    <span class="built_in">Queue</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Queue</span>(<span class="type">int</span> val,<span class="type">int</span> t):<span class="built_in">val</span>(val),<span class="built_in">t</span>(t)&#123;&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="type">int</span> n,W,v,w,m,dp[N],l,r,tag,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,W);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(v,w,m);</span><br><span class="line">        <span class="keyword">if</span>(w==<span class="number">0</span>)&#123;</span><br><span class="line">            tag+=v*m;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> d=<span class="number">0</span>;d&lt;w;d++)&#123;</span><br><span class="line">            l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;d+t*w&lt;=W;t++)&#123;</span><br><span class="line">                <span class="type">int</span> j=t*w+d,val=dp[j]-t*v;</span><br><span class="line">                <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&lt;=val) --r;</span><br><span class="line">                q[++r]=<span class="built_in">Queue</span>(val,t);</span><br><span class="line">                <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l].t&lt;t-m) ++l;</span><br><span class="line">                dp[j]=<span class="built_in">max</span>(q[l].val+t*v,dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=W;i++) ans=<span class="built_in">max</span>(ans,dp[i]+tag);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="NOI2005-瑰丽华尔兹"><a href="#NOI2005-瑰丽华尔兹" class="headerlink" title="[NOI2005] 瑰丽华尔兹"></a><a href="https://www.luogu.com.cn/problem/P2254">[NOI2005] 瑰丽华尔兹</a></h3><p>单调队列优化 DP。<br>容易想到 $O(nmT)$ 的方程：设 $dp_{t,i,j}$ 表示在 $(i,j)$ 位置经过 $t$ 时间的答案，容易写出转移：</p>
<script type="math/tex; mode=display">dp_{t,i,j}=\max(dp_{t-1,i,j},dp_{t-1,i',j'}+1)</script><p>考虑优化成 $O(nmk)$，则我们首先将状态优化为 $dp_{k,i,j}$ 表示第 $k$ 个区间，在 $(i,j)$ 位置的答案。转移变为</p>
<script type="math/tex; mode=display">dp_{k,i,j}=\max(dp_{k-1,i',j'}+dis)</script><p>具体地，假设当前在向 $i$ 的正方向滑行，我们可以写出：</p>
<script type="math/tex; mode=display">dp_{k,i,j}=\max_{pos=i-len_k}^i(dp_{k-1,pos,j}-pos)+i</script><p>其余三个方向同理，这就可以单调队列优化了。<br>可以滚动数组去掉 $k$ 这一维。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Abs</span><span class="params">(<span class="type">const</span> T &amp;x)</span></span>&#123;<span class="keyword">return</span> x&lt;<span class="number">0</span>?~x<span class="number">+1</span>:x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;<span class="keyword">return</span> a&lt;b?b:a;&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">210</span>,fx[]=&#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,fy[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="type">int</span> val,x,y;</span><br><span class="line">    <span class="built_in">Queue</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Queue</span>(<span class="type">int</span> val,<span class="type">int</span> x,<span class="type">int</span> y):<span class="built_in">val</span>(val),<span class="built_in">x</span>(x),<span class="built_in">y</span>(y)&#123;&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">dis</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;ax,<span class="type">const</span> <span class="type">int</span> &amp;ay,<span class="type">const</span> <span class="type">int</span> &amp;bx,<span class="type">const</span> <span class="type">int</span> &amp;by)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Abs</span>(ax-bx)+<span class="built_in">Abs</span>(ay-by);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,sx,sy,k,dp[N][N],op,l,r,ans;</span><br><span class="line"><span class="type">char</span> s[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;=<span class="number">1</span>&amp;&amp;y&gt;=<span class="number">1</span>&amp;&amp;x&lt;=n&amp;&amp;y&lt;=m)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[x][y]==<span class="string">&#x27;x&#x27;</span>)&#123;</span><br><span class="line">            l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">            x+=fx[op],y+=fy[op];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r&amp;&amp;dp[x][y]&gt;q[r].val+<span class="built_in">dis</span>(x,y,q[r].x,q[r].y)) --r;</span><br><span class="line">        q[++r]=<span class="built_in">Queue</span>(dp[x][y],x,y);</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r&amp;&amp;(<span class="built_in">Abs</span>(x-q[l].x)&gt;len||<span class="built_in">Abs</span>(y-q[l].y)&gt;len)) ++l;</span><br><span class="line">        dp[x][y]=<span class="built_in">Max</span>(dp[x][y],q[l].val+<span class="built_in">dis</span>(x,y,q[l].x,q[l].y));</span><br><span class="line">        ans=<span class="built_in">Max</span>(ans,dp[x][y]);</span><br><span class="line">        x+=fx[op],y+=fy[op];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,sx,sy,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>,&amp;s[i][j]);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[sx][sy]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,s,t;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(s,t,op);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) <span class="built_in">dfs</span>(n,j,t-s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++) <span class="built_in">dfs</span>(<span class="number">1</span>,j,t-s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>) <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">dfs</span>(j,m,t-s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">dfs</span>(j,<span class="number">1</span>,t-s<span class="number">+1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>闲话：《海上钢琴师》真的非常好看！</p>
<h3 id="SCOI2010-股票交易"><a href="#SCOI2010-股票交易" class="headerlink" title="[SCOI2010] 股票交易"></a><a href="https://www.luogu.com.cn/problem/P2569">[SCOI2010] 股票交易</a></h3><p>设 $dp_{i,j}$ 表示 $i$ 天结束时手上有 $j$ 个股票时的最大收益。转移：</p>
<ul>
<li>什么也不做：<script type="math/tex; mode=display">dp_{i,j}=dp_{i-1,j}</script></li>
<li>买入：<script type="math/tex; mode=display">dp_{i,j}=\max(dp_{i-W-1,j-k}-k\times AP_i)</script></li>
<li>卖出：<script type="math/tex; mode=display">dp_{i,j}=\max(dp_{i-W-1,j+k}+k\times BP_i)</script></li>
</ul>
<p>第一个式子没有研究价值，我们看后两个。将式子转化，用 $k’$ 分别代替 $j-k$ 和 $j+k$：</p>
<script type="math/tex; mode=display">dp_{i,j}=\max(dp_{i-W-1,k'}+k'\times AP_i)-j\times AP_i\quad j-k'\le AS_i</script><script type="math/tex; mode=display">dp_{i,j}=\max(dp_{i-W-1,k'}+k'\times BP_i)-j\times BP_i\quad k'-j\le BS_i</script><p>显然可以单调队列。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2010</span>;</span><br><span class="line"><span class="type">int</span> t,maxp,w,l,r,ap[N],dp[N][N],bp[N],as[N],bs[N],ans; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ll k;</span><br><span class="line">    <span class="built_in">Queue</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Queue</span>(<span class="type">int</span> val,<span class="type">int</span> k):<span class="built_in">val</span>(val),<span class="built_in">k</span>(k)&#123;&#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(t,maxp,w);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++) <span class="built_in">read</span>(ap[i],bp[i],as[i],bs[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=as[i];j++) dp[i][j]=-ap[i]*j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=maxp;j++)</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i][j],dp[i<span class="number">-1</span>][j]);</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> pre=i-w<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pre&lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=maxp;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&lt;=dp[pre][j]+j*ap[i]) --r;</span><br><span class="line">            q[++r]=<span class="built_in">Queue</span>(dp[pre][j]+j*ap[i],j);</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;j-q[l].k&gt;as[i]) ++l;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i][j],q[l].val-j*ap[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=maxp;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&lt;=dp[pre][j]+j*bp[i]) --r;</span><br><span class="line">            q[++r]=<span class="built_in">Queue</span>(dp[pre][j]+j*bp[i],j);</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[l].k-j&gt;bs[i]) ++l;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i][j],q[l].val-j*bp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=maxp;i++) ans=<span class="built_in">max</span>(ans,dp[t][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="玉蟾宫"><a href="#玉蟾宫" class="headerlink" title="玉蟾宫"></a><a href="https://www.luogu.com.cn/problem/P4147">玉蟾宫</a></h3><p>插一个单调栈典题。<br>我们考虑枚举行数，对于一行内，维护每一列向上延伸最多的 <code>F</code> 数量（类似直方图）。例如，对于样例<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">R F F F F F </span><br><span class="line">F F F F F F </span><br><span class="line">R R R F F F </span><br><span class="line">F F F F F F </span><br><span class="line">F F F F F F</span><br></pre></td></tr></table></figure><br>假设我们枚举到最后一行，那么应该向上延伸最多的 <code>F</code> 数量应当是：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">      F F F</span><br><span class="line">      F F F</span><br><span class="line">      F F F</span><br><span class="line">F F F F F F</span><br><span class="line">F F F F F F</span><br><span class="line">2 2 2 5 5 5</span><br></pre></td></tr></table></figure><br>此时枚举列，同时对向上延伸最多 <code>F</code> 数量维护单调栈。<br>时间复杂度 $O(nm)$。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stack</span>&#123;</span><br><span class="line">    <span class="type">int</span> h,len;</span><br><span class="line">    <span class="built_in">Stack</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Stack</span>(<span class="type">int</span> h,<span class="type">int</span> len):<span class="built_in">h</span>(h),<span class="built_in">len</span>(len)&#123;&#125;</span><br><span class="line">&#125;st[N];</span><br><span class="line"><span class="type">int</span> n,m,top,h[N][N],ans;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            cin&gt;&gt;c;</span><br><span class="line">            h[i][j]=(c==<span class="string">&#x27;F&#x27;</span>)?h[i<span class="number">-1</span>][j]<span class="number">+1</span>:<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(top&amp;&amp;st[top].h&gt;h[i][j])&#123;</span><br><span class="line">                temp+=st[top].len;</span><br><span class="line">                ans=<span class="built_in">max</span>(ans,st[top].h*temp);</span><br><span class="line">                --top;</span><br><span class="line">            &#125;</span><br><span class="line">            st[++top]=<span class="built_in">Stack</span>(h[i][j],temp<span class="number">+1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(top)&#123;</span><br><span class="line">            temp+=st[top].len;</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,st[top].h*temp);</span><br><span class="line">            --top;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans*<span class="number">3</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="APIO2008-免费道路"><a href="#APIO2008-免费道路" class="headerlink" title="[APIO2008] 免费道路"></a><a href="https://www.luogu.com.cn/problem/P3623">[APIO2008] 免费道路</a></h3><p>题意：一个边权为 $0$ 或 $1$ 的图，求边权和为 $n-k$ 的生成树。<br>首先 Kruskal 求最大生成树，求得必须要加入的 $0$ 边。<br>再 Kruskal 一遍，先将 $0$ 边加至 $k$ 条，然后一直加 $1$ 边直到求出生成树。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e4</span><span class="number">+10</span>,M=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,fa[N],tot,cnt,ans[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;<span class="type">int</span> u,v,w;&#125;e[M];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">l</span><span class="params">(<span class="type">const</span> edge &amp;x,<span class="type">const</span> edge &amp;y)</span></span>&#123;<span class="keyword">return</span> x.w&lt;y.w;&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">g</span><span class="params">(<span class="type">const</span> edge &amp;x,<span class="type">const</span> edge &amp;y)</span></span>&#123;<span class="keyword">return</span> x.w&gt;y.w;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">read</span>(e[i].u,e[i].v,e[i].w);</span><br><span class="line">    <span class="built_in">sort</span>(e<span class="number">+1</span>,e<span class="number">+1</span>+m,g);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="built_in">find</span>(e[i].u),v=<span class="built_in">find</span>(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">        fa[u]=v;</span><br><span class="line">        ++tot;</span><br><span class="line">        <span class="keyword">if</span>(e[i].w==<span class="number">0</span>) ++cnt,e[i].w=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(tot==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt&gt;k)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no solution\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e<span class="number">+1</span>,e<span class="number">+1</span>+m,l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="built_in">find</span>(e[i].u),v=<span class="built_in">find</span>(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(e[i].w==<span class="number">-1</span>)&#123;</span><br><span class="line">            fa[u]=v;</span><br><span class="line">            e[i].w=<span class="number">0</span>;</span><br><span class="line">            ans[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tot&lt;k&amp;&amp;e[i].w==<span class="number">0</span>)&#123;</span><br><span class="line">            fa[u]=v;</span><br><span class="line">            ans[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tot&gt;=k&amp;&amp;e[i].w==<span class="number">1</span>)&#123;</span><br><span class="line">            fa[u]=v;</span><br><span class="line">            ans[++tot]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tot==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tot!=n<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no solution\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j=ans[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,e[j].u,e[j].v,e[j].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="AHOI2013-连通图"><a href="#AHOI2013-连通图" class="headerlink" title="[AHOI2013] 连通图"></a><a href="https://www.luogu.com.cn/problem/P5227">[AHOI2013] 连通图</a></h3><p>线段树分治+可撤销并查集。<br>在时间轴上开线段树，每个节点维护 <code>std::vector</code> 表示当前区间需要加的边，使用可撤销并查集在回溯时撤销当前节点添加的边。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,fa[N],siz[N],k,last[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">    <span class="built_in">Edge</span>()&#123;&#125;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> u,<span class="type">int</span> v):<span class="built_in">u</span>(u),<span class="built_in">v</span>(v)&#123;&#125;</span><br><span class="line">&#125;edge[M];</span><br><span class="line">vector&lt;Edge&gt; tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,Edge t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        tree[u].<span class="built_in">push_back</span>(t);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(ls,l,mid,x,y,t);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line">stack&lt;Edge&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(x),y=<span class="built_in">find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(siz[x]&gt;siz[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    fa[x]=y;</span><br><span class="line">    siz[y]+=siz[x];</span><br><span class="line">    st.<span class="built_in">push</span>(<span class="built_in">Edge</span>(x,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_ans</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=st.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(Edge x:tree[u]) <span class="built_in">merge</span>(x.u,x.v);</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(siz[<span class="built_in">find</span>(<span class="number">1</span>)]==n) <span class="built_in">printf</span>(<span class="string">&quot;Connected\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Disconnected\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">get_ans</span>(ls,l,mid);</span><br><span class="line">        <span class="built_in">get_ans</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>((<span class="type">int</span>)st.<span class="built_in">size</span>()&gt;temp)&#123;</span><br><span class="line">        Edge x=st.<span class="built_in">top</span>();</span><br><span class="line">        <span class="type">int</span> u=x.u,v=x.v;</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">        siz[v]-=siz[u];</span><br><span class="line">        fa[u]=u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i,siz[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(edge[i].u,edge[i].v);</span><br><span class="line">    <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,c,x;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(c);</span><br><span class="line">        <span class="keyword">while</span>(c--)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            <span class="keyword">if</span>(last[x]<span class="number">+1</span>&lt;=i<span class="number">-1</span>) <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,k,last[x]<span class="number">+1</span>,i<span class="number">-1</span>,edge[x]);</span><br><span class="line">            last[x]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,k,last[i]<span class="number">+1</span>,k,edge[i]);</span><br><span class="line">    <span class="built_in">get_ans</span>(<span class="number">1</span>,<span class="number">1</span>,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><h3 id="JSOI2009-电子字典"><a href="#JSOI2009-电子字典" class="headerlink" title="[JSOI2009] 电子字典"></a><a href="https://www.luogu.com.cn/problem/P4407">[JSOI2009] 电子字典</a></h3><p>Trie 题怎么能用 Trie 做呢？<br>由于串长极小，直接字符串哈希，实现时需要注意以下几个点：</p>
<ul>
<li>使用自然溢出哈希；</li>
<li>记得去重，去重一定不要用 <code>std::set</code>，会 T 飞。</li>
</ul>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ull base[<span class="number">25</span>],h[<span class="number">25</span>];</span><br><span class="line">gp_hash_table&lt;ull,<span class="type">int</span>&gt; word;</span><br><span class="line"><span class="type">char</span> s[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">22</span>;i++) base[i]=base[i<span class="number">-1</span>]*<span class="number">131</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s));</span><br><span class="line">        <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s<span class="number">+1</span>);</span><br><span class="line">        h[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">strlen</span>(s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">            h[i]=h[i<span class="number">-1</span>]*<span class="number">131</span>+s[i];</span><br><span class="line">        word[h[len]]=m<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s));</span><br><span class="line">        <span class="built_in">memset</span>(h,<span class="number">0</span>,<span class="built_in">sizeof</span>(h));</span><br><span class="line">        h[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s<span class="number">+1</span>);</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">strlen</span>(s<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">            h[i]=h[i<span class="number">-1</span>]*<span class="number">131</span>+s[i];</span><br><span class="line">        <span class="keyword">if</span>(word.<span class="built_in">find</span>(h[len])!=word.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">            ull hash1=h[i<span class="number">-1</span>]*base[len-i]+(h[len]-h[i]*base[len-i]);</span><br><span class="line">            <span class="keyword">auto</span> it=word.<span class="built_in">find</span>(hash1);</span><br><span class="line">            <span class="keyword">if</span>(it!=word.<span class="built_in">end</span>()&amp;&amp;it-&gt;second!=m)</span><br><span class="line">                it-&gt;second=m,++res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> j=<span class="string">&#x27;a&#x27;</span>;j&lt;=<span class="string">&#x27;z&#x27;</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==s[i]) <span class="keyword">continue</span>;</span><br><span class="line">                ull hash1=h[len]-s[i]*base[len-i]+j*base[len-i];</span><br><span class="line">                <span class="keyword">auto</span> it=word.<span class="built_in">find</span>(hash1);</span><br><span class="line">                <span class="keyword">if</span>(it!=word.<span class="built_in">end</span>()&amp;&amp;it-&gt;second!=m)</span><br><span class="line">                    it-&gt;second=m,++res;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=len;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> j=<span class="string">&#x27;a&#x27;</span>;j&lt;=<span class="string">&#x27;z&#x27;</span>;j++)&#123;</span><br><span class="line">                ull hash1=h[i]*base[len-i<span class="number">+1</span>]+j*base[len-i]+(h[len]-h[i]*base[len-i]);</span><br><span class="line">                <span class="keyword">auto</span> it=word.<span class="built_in">find</span>(hash1);</span><br><span class="line">                <span class="keyword">if</span>(it!=word.<span class="built_in">end</span>()&amp;&amp;it-&gt;second!=m)</span><br><span class="line">                    it-&gt;second=m,++res;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="USACO12DEC-First-G"><a href="#USACO12DEC-First-G" class="headerlink" title="[USACO12DEC] First! G"></a><a href="https://www.luogu.com.cn/problem/P3065">[USACO12DEC] First! G</a></h3><p>建 Trie，在 Trie 上查找时对字母连边，拓扑排序判环。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">3e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,nxt[N][<span class="number">26</span>],tot,e[<span class="number">26</span>][<span class="number">26</span>],indegree[<span class="number">26</span>],cnt,ans[N];</span><br><span class="line"><span class="type">bool</span> ed[N];</span><br><span class="line">string s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="type">int</span> k=c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[p][k]) nxt[p][k]=++tot;</span><br><span class="line">        p=nxt[p][k];</span><br><span class="line">    &#125;</span><br><span class="line">    ed[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="built_in">sizeof</span>(e));</span><br><span class="line">    <span class="built_in">memset</span>(indegree,<span class="number">0</span>,<span class="built_in">sizeof</span>(indegree));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ed[p]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> k=c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(k!=i&amp;&amp;nxt[p][i]&amp;&amp;!e[k][i])&#123;</span><br><span class="line">                e[k][i]=<span class="number">1</span>;</span><br><span class="line">                ++indegree[i];</span><br><span class="line">            &#125;</span><br><span class="line">        p=nxt[p][k];</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(!indegree[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v=<span class="number">0</span>;v&lt;<span class="number">26</span>;v++)</span><br><span class="line">            <span class="keyword">if</span>(e[u][v]&amp;&amp;!--indegree[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(indegree[i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">        <span class="built_in">insert</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(s[i]))</span><br><span class="line">            ans[++cnt]=i;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        cout&lt;&lt;s[ans[i]]&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="IOI-2008-Type-Printer"><a href="#IOI-2008-Type-Printer" class="headerlink" title="[IOI 2008] Type Printer"></a><a href="https://www.luogu.com.cn/problem/P4683">[IOI 2008] Type Printer</a></h3><p>显然先建出 Trie，考虑怎样的遍历顺序更优。<br>发现这不是<a href="https://www.luogu.com.cn/problem/P3698">老熟人</a>吗？</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">25010</span>;</span><br><span class="line"><span class="type">int</span> n,nxt[N*<span class="number">20</span>][<span class="number">26</span>],tot;</span><br><span class="line"><span class="type">bool</span> ed[N*<span class="number">20</span>],flag[N*<span class="number">20</span>],f;</span><br><span class="line">string maxlen,ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="type">int</span> k=c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[p][k]) nxt[p][k]=++tot;</span><br><span class="line">        p=nxt[p][k];</span><br><span class="line">    &#125;</span><br><span class="line">    ed[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">        <span class="type">int</span> k=c-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        p=nxt[p][k];</span><br><span class="line">        flag[p]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ed[u]) ans.<span class="built_in">push_back</span>(<span class="string">&#x27;P&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> maxk=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> v=nxt[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!v) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag[v]) maxk=i;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(i+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(~maxk)&#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(maxk+<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(nxt[u][maxk]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag[u]&amp;&amp;!~maxk)&#123;</span><br><span class="line">        cout&lt;&lt;ans.<span class="built_in">length</span>()&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:ans)</span><br><span class="line">            cout&lt;&lt;c&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        <span class="built_in">insert</span>(s);</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">length</span>()&gt;maxlen.<span class="built_in">length</span>()) maxlen=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">query</span>(maxlen);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>


<h2 id="笛卡尔树"><a href="#笛卡尔树" class="headerlink" title="笛卡尔树"></a>笛卡尔树</h2><h3 id="TJOI2011-树的序"><a href="#TJOI2011-树的序" class="headerlink" title="[TJOI2011] 树的序"></a><a href="https://www.luogu.com.cn/problem/P1377">[TJOI2011] 树的序</a></h3><p>考虑 BST 每个节点记录权值 $k$ 和插入的时间 $t$，则 $k$ 满足 BST 的性质，$t$ 满足小根堆的性质，这样构建的 BST 是一棵 Treap。<br>题意转化为：重新分配 $t$，使得生成序列最小。<br>既然 $t$ 维度是小根堆，那么满足父亲小于后代。贪心地想，较小的 $t$ 分配顺序为：父亲 $&gt;$ 左子树 $&gt;$ 右子树，也就是 BST 的前序遍历。<br>笛卡尔树同样满足 Treap 的性质。它的 $k$ 与 $t$ 正好与本题的 BST 相反。则我们只需交换 $k$ 和 $t$ 并 $O(n)$ 构建笛卡尔树即可。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],st[N],top,son[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,u);</span><br><span class="line">    <span class="keyword">if</span>(son[u][<span class="number">0</span>]) <span class="built_in">dfs</span>(son[u][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(son[u][<span class="number">1</span>]) <span class="built_in">dfs</span>(son[u][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++) <span class="built_in">read</span>(x),a[x]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> last=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(top&amp;&amp;a[st[top]]&gt;a[i]) last=st[top--];</span><br><span class="line">        <span class="keyword">if</span>(top) son[st[top]][<span class="number">1</span>]=i;</span><br><span class="line">        son[i][<span class="number">0</span>]=last;</span><br><span class="line">        st[++top]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        vis[son[i][<span class="number">0</span>]]=vis[son[i][<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="最大异或和"><a href="#最大异或和" class="headerlink" title="最大异或和"></a><a href="https://www.luogu.com.cn/problem/P4735">最大异或和</a></h3><p>可持久化 01 trie 模板题。<br>操作与主席树类似，对于查询，设我们已经维护了所有的前缀异或和 $sum<em>i=\oplus</em>{j=1}^ia<em>j$，则只需最大化 $sum</em>{p-1}\oplus sum_n\oplus x$。后两项是给定的，则我们只需贪心求出答案即可。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::max;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">6e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,nxt[N*<span class="number">25</span>][<span class="number">2</span>],siz[N*<span class="number">25</span>],tot,root[N],sum;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> old,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    root[u]=++tot;</span><br><span class="line">    <span class="type">int</span> p=root[u],q=root[old];</span><br><span class="line">    siz[p]=siz[q]<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">24</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        nxt[p][<span class="number">0</span>]=nxt[q][<span class="number">0</span>],nxt[p][<span class="number">1</span>]=nxt[q][<span class="number">1</span>];</span><br><span class="line">        nxt[p][c]=++tot;</span><br><span class="line">        p=nxt[p][c],q=nxt[q][c];</span><br><span class="line">        siz[p]=siz[q]<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=root[a],q=root[b],res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">24</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(siz[nxt[q][c^<span class="number">1</span>]]&gt;siz[nxt[p][c^<span class="number">1</span>]])&#123;</span><br><span class="line">            res|=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line">            p=nxt[p][c^<span class="number">1</span>];</span><br><span class="line">            q=nxt[q][c^<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            p=nxt[p][c];</span><br><span class="line">            q=nxt[q][c];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a);</span><br><span class="line">        <span class="built_in">insert</span>(i,i<span class="number">-1</span>,sum^=a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> op;</span><br><span class="line">    <span class="type">int</span> x,l,r;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        op=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(op!=<span class="string">&#x27;A&#x27;</span>&amp;&amp;op!=<span class="string">&#x27;Q&#x27;</span>) op=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            ++n;</span><br><span class="line">            <span class="built_in">insert</span>(n,n<span class="number">-1</span>,sum^=x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">read</span>(l,r,x);</span><br><span class="line">            <span class="type">int</span> ans;</span><br><span class="line">            <span class="keyword">if</span>(l==<span class="number">1</span>) ans=<span class="built_in">max</span>(<span class="built_in">query</span>(sum^x,<span class="number">0</span>,r<span class="number">-1</span>),sum^x);</span><br><span class="line">            <span class="keyword">else</span> ans=<span class="built_in">query</span>(sum^x,l<span class="number">-2</span>,r<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="十二省联考-2019-异或粽子"><a href="#十二省联考-2019-异或粽子" class="headerlink" title="[十二省联考 2019] 异或粽子"></a><a href="https://www.luogu.com.cn/problem/P5283">[十二省联考 2019] 异或粽子</a></h3><p>类似<a href="https://www.luogu.com.cn/problem/P2048">[NOI2010] 超级钢琴</a>的贪心，由于 $a_i\oplus a_j=a_j\oplus a_i$，只需使用堆查询最大的 $2k$ 个，再令答案除以 $2$。可以用 Trie 查询全局第 $k$ 大，方法类似线段树上二分。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">5e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,k,nxt[N&lt;&lt;<span class="number">5</span>][<span class="number">2</span>],siz[N&lt;&lt;<span class="number">5</span>],tot=<span class="number">1</span>;</span><br><span class="line">ll a[N],ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    ++siz[p];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!nxt[p][c]) nxt[p][c]=++tot;</span><br><span class="line">        p=nxt[p][c];</span><br><span class="line">        ++siz[p];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x,<span class="type">int</span> rnk)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> p=<span class="number">1</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">32</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="type">int</span> c=(x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(siz[nxt[p][c]]&gt;=rnk) p=nxt[p][c];</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            rnk-=siz[nxt[p][c]];</span><br><span class="line">            p=nxt[p][c^<span class="number">1</span>];</span><br><span class="line">            res|=<span class="number">1ll</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> id,rnk;</span><br><span class="line">    ll val;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> id,<span class="type">int</span> rnk,ll val):<span class="built_in">id</span>(id),<span class="built_in">rnk</span>(rnk),<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> val&lt;x.val;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,k);k&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">        a[i]^=a[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">insert</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">node</span>(i,n<span class="number">+1</span>,<span class="built_in">query</span>(a[i],n<span class="number">+1</span>)));</span><br><span class="line">    <span class="keyword">while</span>(k--)&#123;</span><br><span class="line">        node u=q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans+=u.val;</span><br><span class="line">        <span class="keyword">if</span>(u.rnk) q.<span class="built_in">push</span>(<span class="built_in">node</span>(u.id,u.rnk<span class="number">-1</span>,<span class="built_in">query</span>(a[u.id],u.rnk<span class="number">-1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><h2 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h2><h3 id="POI-2006-PAL-Palindromes"><a href="#POI-2006-PAL-Palindromes" class="headerlink" title="[POI 2006] PAL-Palindromes"></a><a href="https://www.luogu.com.cn/problem/P3449">[POI 2006] PAL-Palindromes</a></h3><p>容易发现，两个回文串 $A$，$B$ 组合成新回文串当且仅当 $AB$ 等于 $BA$。设 $A$ 的哈希值为 $a$，$B$ 的哈希值为 $b$，有</p>
<script type="math/tex; mode=display">a\times base^{|B|}+b=b\times base^{|A|}+a</script><p>简单移项</p>
<script type="math/tex; mode=display">\frac{a}{base^{|A|}-1}=\frac{b}{base^{|B|}-1}</script><p>开哈希桶维护即可。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod1=<span class="number">998244353</span>,mod2=<span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">    a%=p;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%p;</span><br><span class="line">        a=a*a%p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pair_hash</span>&#123;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &amp;x)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="type">size_t</span> seed=<span class="number">0</span>;</span><br><span class="line">        seed^=hash&lt;<span class="type">int</span>&gt;&#123;&#125;(x.first)<span class="number">+0x9e3779b9</span>+(seed&lt;&lt;<span class="number">6</span>)+(seed&gt;&gt;<span class="number">2</span>);</span><br><span class="line">        seed^=hash&lt;<span class="type">int</span>&gt;&#123;&#125;(x.second)<span class="number">+0x9e3779b9</span>+(seed&lt;&lt;<span class="number">6</span>)+(seed&gt;&gt;<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> seed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">gp_hash_table&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,<span class="type">int</span>,pair_hash&gt; cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,temp;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;temp&gt;&gt;s;</span><br><span class="line">        ll h1=<span class="number">0</span>,h2=<span class="number">0</span>,base1=<span class="number">1</span>,base2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s)&#123;</span><br><span class="line">            h1=(h1*<span class="number">131</span>+c)%mod1;</span><br><span class="line">            base1=base1*<span class="number">131</span>%mod1;</span><br><span class="line">            h2=(h2*<span class="number">131</span>+c)%mod2;</span><br><span class="line">            base2=base2*<span class="number">131</span>%mod2;</span><br><span class="line">        &#125;</span><br><span class="line">        ll x=h1*<span class="built_in">qpow</span>(base1<span class="number">-1</span>,mod1<span class="number">-2</span>,mod1)%mod1;</span><br><span class="line">        ll y=h2*<span class="built_in">qpow</span>(base2<span class="number">-1</span>,mod2<span class="number">-2</span>,mod2)%mod2;</span><br><span class="line">        ans+=cnt[<span class="built_in">make_pair</span>(x,y)];</span><br><span class="line">        ++cnt[<span class="built_in">make_pair</span>(x,y)];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans*<span class="number">2</span>+n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="POI-2012-OKR-A-Horrible-Poem"><a href="#POI-2012-OKR-A-Horrible-Poem" class="headerlink" title="[POI 2012] OKR-A Horrible Poem"></a><a href="https://www.luogu.com.cn/problem/P3538">[POI 2012] OKR-A Horrible Poem</a></h3><p>$A$ 的一个子串 $B$ 能成为 $A$ 的一个完整周期，当且仅当其长度为 $A$ 长度的因数。直接枚举因数。判断是否是完整周期的方法：设 $h<em>{l,r}$ 表示 $[l,r]$ 的哈希值，则当一个长为 $len$ 的子串满足 $h</em>{l,r-len}=h_{l+len,r}$ 时，其为一个完整周期。先跑一遍线性筛降低枚举因数的时间复杂度。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">5e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,q,e[N],p[N],tot;</span><br><span class="line">ull h[N],base[N];</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function">ull <span class="title">gethash</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> h[r]-h[l<span class="number">-1</span>]*base[r-l<span class="number">+1</span>];&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %s %d&quot;</span>,&amp;n,s<span class="number">+1</span>,&amp;q);</span><br><span class="line">    base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        base[i]=base[i<span class="number">-1</span>]*<span class="number">131</span>;</span><br><span class="line">        h[i]=h[i<span class="number">-1</span>]*<span class="number">131</span>+s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e[i]) p[e[i]=++tot]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=e[i]&amp;&amp;p[j]&lt;=n/i;j++)</span><br><span class="line">            e[p[j]*i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a,b,len,ans;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">        len=ans=b-a<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> prime=p[e[len]];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">gethash</span>(a+ans/prime,b)==<span class="built_in">gethash</span>(a,b-ans/prime))</span><br><span class="line">                ans/=prime;</span><br><span class="line">            len/=prime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="ONTAK2015-Tasowanie"><a href="#ONTAK2015-Tasowanie" class="headerlink" title="[ONTAK2015] Tasowanie"></a><a href="https://www.luogu.com.cn/problem/P8023">[ONTAK2015] Tasowanie</a></h3><p>双指针+二分+哈希。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[N],b[N],len,p1,p2;</span><br><span class="line">ull h1[N],h2[N],base[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethash1</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> h1[r]-h1[l<span class="number">-1</span>]*base[r-l<span class="number">+1</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethash2</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="keyword">return</span> h2[r]-h2[l<span class="number">-1</span>]*base[r-l<span class="number">+1</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">gethash1</span>(p1,p1+x<span class="number">-1</span>)==<span class="built_in">gethash2</span>(p2,p2+x<span class="number">-1</span>);&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">read</span>(b[i]);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m) <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">+1</span>;i&lt;=m;i++) a[i]=<span class="number">1e3</span><span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;m) <span class="keyword">for</span>(<span class="type">int</span> i=m<span class="number">+1</span>;i&lt;=n;i++) b[i]=<span class="number">1e3</span><span class="number">+1</span>;</span><br><span class="line">    base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    len=<span class="built_in">max</span>(n,m);</span><br><span class="line">    a[len<span class="number">+1</span>]=b[len<span class="number">+1</span>]=<span class="number">1e3</span><span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++) base[i]=base[i<span class="number">-1</span>]*<span class="number">13331</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">        h1[i]=h1[i<span class="number">-1</span>]*<span class="number">13331</span>+a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">        h2[i]=h2[i<span class="number">-1</span>]*<span class="number">13331</span>+b[i];</span><br><span class="line">    p1=<span class="number">1</span>,p2=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[p1]&lt;b[p2]) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[p1++]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[p1]&gt;b[p2]) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[p2++]);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> l=<span class="number">1</span>,r=<span class="built_in">min</span>(len-p1<span class="number">+1</span>,len-p2<span class="number">+1</span>);</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">                <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid<span class="number">+1</span>;</span><br><span class="line">                <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[p1+r]&lt;b[p2+r]) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[p1++]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[p2++]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="HNOI2008-GT考试"><a href="#HNOI2008-GT考试" class="headerlink" title="[HNOI2008] GT考试"></a><a href="https://www.luogu.com.cn/problem/P3193">[HNOI2008] GT考试</a></h3><p>设 $f_{i,j}$ 表示长串匹配前 $i$ 个字符，短串匹配前 $j$ 个字符的方案数。答案为：</p>
<script type="math/tex; mode=display">ans=\sum_{i=0}^{m-1} f_{n,i}</script><p>设 $g_{i,j}$ 表示匹配到第 $i$ 位时加入一个数字后匹配到第 $j$ 位的方案数，可以用 KMP 求出。</p>
<script type="math/tex; mode=display">f_{i,j}=\sum_{k=0}^{m-1}f_{i-1,k}\times g_{k,j}</script><p>注意到这是矩阵乘法的形式，矩阵快速幂 $O(m^3\log n)$。<br>在转化成矩阵的过程中，$f_{i,j}$ 被转化为一个一行 $m-1$ 列的矩阵。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="type">int</span> n,m,mod,nxt[<span class="number">25</span>],ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">Matrix</span>()&#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));&#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;m;k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">                    res.a[i][j]=(res.a[i][j]+a[i][k]*x.a[k][j]%mod)%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;base,f,g;</span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    Matrix res=base;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) base.a[i][i]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s<span class="number">+1</span>);</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;s[j<span class="number">+1</span>]!=s[i]) j=nxt[j];</span><br><span class="line">        <span class="keyword">if</span>(s[j<span class="number">+1</span>]==s[i]) j++;</span><br><span class="line">        nxt[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c=<span class="string">&#x27;0&#x27;</span>;c&lt;=<span class="string">&#x27;9&#x27;</span>;c++)&#123;</span><br><span class="line">            j=i;</span><br><span class="line">            <span class="keyword">while</span>(j&amp;&amp;s[j<span class="number">+1</span>]!=c) j=nxt[j];</span><br><span class="line">            <span class="keyword">if</span>(s[j<span class="number">+1</span>]==c) j++;</span><br><span class="line">            g.a[i][j]=(g.a[i][j]<span class="number">+1</span>)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    f.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    f=f*<span class="built_in">qpow</span>(g,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) ans=(ans+f.a[<span class="number">0</span>][i])%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><p>感觉自己没理解 Manacher 啊，改天<a href="https://headless-piston.github.io/2025/07/05/Manacher/">重学一次</a>。</p>
<h3 id="国家集训队-拉拉队排练"><a href="#国家集训队-拉拉队排练" class="headerlink" title="[国家集训队] 拉拉队排练"></a><a href="https://www.luogu.com.cn/problem/P1659">[国家集训队] 拉拉队排练</a></h3><p>由于只需要找长度为奇数的回文串，无需在字符间插入 <code>#</code>，直接跑 Manacher，开差分数组 $sum$，表示当前长度的回文串数量。当位置 $i$ 的最长回文半径为 $p<em>i$ 时，容易想到半径长度小于等于 $p_i$ 的都是回文串，则我们只需在差分数组 $sum_1$ 处加 $1$，$sum</em>{p_i\times 2}$ 处减 $1$ 就行了。最后统计答案时要用快速幂。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e6</span><span class="number">+10</span>,mod=<span class="number">19930726</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    a%=mod;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,p[N];</span><br><span class="line">ll k,sum[N],ans;</span><br><span class="line"><span class="type">char</span> s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s<span class="number">+1</span>);</span><br><span class="line">    s[<span class="number">0</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,r=<span class="number">0</span>,mid=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=r) p[i]=<span class="built_in">min</span>(p[mid*<span class="number">2</span>-i],r-i<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">while</span>(s[i-p[i]]==s[i+p[i]]) ++p[i];</span><br><span class="line">        <span class="keyword">if</span>(p[i]+i&gt;r) r=p[i]+i<span class="number">-1</span>,mid=i;</span><br><span class="line">        ++sum[<span class="number">1</span>],--sum[p[i]*<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sum[i]+=sum[i<span class="number">-1</span>];</span><br><span class="line">    <span class="type">int</span> tot=n;</span><br><span class="line">    ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tot%<span class="number">2</span>==<span class="number">0</span>) --tot;</span><br><span class="line">    <span class="keyword">while</span>(k&amp;&amp;tot&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        ans=ans*<span class="built_in">qpow</span>(tot,<span class="built_in">min</span>(sum[tot],k))%mod;</span><br><span class="line">        k=<span class="built_in">max</span>(k-sum[tot],<span class="number">0ll</span>);</span><br><span class="line">        tot-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="国家集训队-最长双回文串"><a href="#国家集训队-最长双回文串" class="headerlink" title="[国家集训队] 最长双回文串"></a><a href="https://www.luogu.com.cn/problem/P4555">[国家集训队] 最长双回文串</a></h3><p>在跑 Manacher 同时维护以每个点开头和结尾的最长回文串长度。仅 Manacher 求解的答案不完全，需要再递推地扫一遍，最后枚举中点即可。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">char</span> t[N],s[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> len0,len,p[N&lt;&lt;<span class="number">1</span>],a[N&lt;&lt;<span class="number">1</span>],b[N&lt;&lt;<span class="number">1</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t<span class="number">+1</span>);</span><br><span class="line">    len0=<span class="built_in">strlen</span>(t<span class="number">+1</span>);</span><br><span class="line">    s[<span class="number">0</span>]=s[<span class="number">1</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len0;i++)&#123;</span><br><span class="line">        s[++len]=t[i];</span><br><span class="line">        s[++len]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,r=<span class="number">0</span>,mid=<span class="number">0</span>;i&lt;=len;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">2</span>*mid-i;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=r) p[i]=<span class="built_in">min</span>(r-i<span class="number">+1</span>,p[j]);</span><br><span class="line">        <span class="keyword">else</span> p[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(s[i-p[i]]==s[i+p[i]]) ++p[i];</span><br><span class="line">        <span class="keyword">if</span>(i+p[i]<span class="number">-1</span>&gt;r)&#123;</span><br><span class="line">            r=i+p[i]<span class="number">-1</span>;</span><br><span class="line">            mid=i;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i+p[i]<span class="number">-1</span>]=<span class="built_in">max</span>(a[i+p[i]<span class="number">-1</span>],p[i]<span class="number">-1</span>);</span><br><span class="line">        b[i-p[i]<span class="number">+1</span>]=<span class="built_in">max</span>(b[i-p[i]<span class="number">+1</span>],p[i]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=len;i&gt;=<span class="number">1</span>;i-=<span class="number">2</span>) a[i]=<span class="built_in">max</span>(a[i],a[i<span class="number">+2</span>]<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i+=<span class="number">2</span>) b[i]=<span class="built_in">max</span>(b[i],b[i<span class="number">-2</span>]<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=len;i+=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&amp;&amp;b[i]) ans=<span class="built_in">max</span>(ans,a[i]+b[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>搜索题真是无聊死了，就少放几道吧……</p>
<h3 id="CSP-S-2022-假期计划"><a href="#CSP-S-2022-假期计划" class="headerlink" title="[CSP-S 2022] 假期计划"></a><a href="https://www.luogu.com.cn/problem/P8817">[CSP-S 2022] 假期计划</a></h3><p>$n$ 遍 BFS 求全源最短路，之后考虑枚举。将 $5$ 个点记作 $1,2,3,4,5$，则枚举 $3,4$ 点，判断 $2,5$ 是否与已选的点重复。可以预处理出每个能同时到达 $1$ 点和另一个点的前三大点，因为它最多只有可能与 $3,4$ 中的一个和 $2,5$ 中的一个重合。总体时间复杂度 $O(nm+n^2)$。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2510</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,dis[N][N];</span><br><span class="line">ll ans,val[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> id):<span class="built_in">id</span>(id)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val[id]!=val[x.id]?val[id]&lt;val[x.id]:id&lt;x.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;node&gt; st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,k);++k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="built_in">read</span>(val[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dis[i][i]=<span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> v:e[u])</span><br><span class="line">                <span class="keyword">if</span>(dis[i][u]<span class="number">+1</span>&lt;dis[i][v]&amp;&amp;dis[i][u]<span class="number">+1</span>&lt;=k)&#123;</span><br><span class="line">                    dis[i][v]=dis[i][u]<span class="number">+1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(v);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis[i][j]&lt;=k&amp;&amp;dis[<span class="number">1</span>][j]&lt;=k)</span><br><span class="line">                st[i].<span class="built_in">insert</span>(<span class="built_in">node</span>(j));</span><br><span class="line">            <span class="keyword">if</span>(st[i].<span class="built_in">size</span>()&gt;<span class="number">3</span>) st[i].<span class="built_in">erase</span>(st[i].<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> b=<span class="number">2</span>;b&lt;=n;b++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> c=<span class="number">2</span>;c&lt;=n;c++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b==c||dis[b][c]&gt;k) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> temp1:st[b])&#123;</span><br><span class="line">                <span class="type">int</span> a=temp<span class="number">1.</span>id;</span><br><span class="line">                <span class="keyword">if</span>(a==b||a==c) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span> temp2:st[c])&#123;</span><br><span class="line">                    <span class="type">int</span> d=temp<span class="number">2.</span>id;</span><br><span class="line">                    <span class="keyword">if</span>(d==b||d==c||a==d) <span class="keyword">continue</span>;</span><br><span class="line">                    ans=<span class="built_in">max</span>(ans,val[a]+val[b]+val[c]+val[d]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="AHOI2012-铁盘整理"><a href="#AHOI2012-铁盘整理" class="headerlink" title="[AHOI2012] 铁盘整理"></a><a href="https://www.luogu.com.cn/problem/P2534">[AHOI2012] 铁盘整理</a></h3><p>IDA* 板题。先离散化，估价函数为相邻差不为 $1$ 的个数。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">18</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],b[N],lim;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">h</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) res+=(<span class="built_in">abs</span>(a[i<span class="number">+1</span>]-a[i])!=<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> cnt,<span class="type">int</span> pre)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> temp=<span class="built_in">h</span>();</span><br><span class="line">    <span class="keyword">if</span>(temp==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(cnt+temp&gt;lim) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==pre) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">reverse</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+i);</span><br><span class="line">        f|=<span class="built_in">dfs</span>(cnt<span class="number">+1</span>,i);</span><br><span class="line">        <span class="built_in">reverse</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(a[i]),b[i]=a[i];</span><br><span class="line">    <span class="built_in">sort</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">lower_bound</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+n,a[i])-b;</span><br><span class="line">    a[n<span class="number">+1</span>]=n<span class="number">+1</span>;</span><br><span class="line">    lim=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>))&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lim);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++lim;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="Prime-Gift"><a href="#Prime-Gift" class="headerlink" title="Prime Gift"></a><a href="https://codeforces.com/problemset/problem/912/E">Prime Gift</a></h3><p>容易发现，$p_i$ 越小，方案数越多。$n=16$ 时不可接受，考虑 Meet in the middle。最坏情况下前 $8$ 个质数 $2,3,5,7,11,13,17,19$，在 $10^{18}$ 内能组成 $7039193$ 种数字。实际实现时可以将数的分配得更加均匀以降低复杂度。之后二分答案+双指针求解即可。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> ll lim=<span class="number">1e18</span>,N=<span class="number">7039192</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,p[<span class="number">20</span>],k,tota,totb;</span><br><span class="line">ll a[N],b[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> x,ll num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs1</span>(x<span class="number">+2</span>,num);</span><br><span class="line">    <span class="keyword">for</span>(ll i=p[x];;i*=p[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(lim/i&lt;num) <span class="keyword">break</span>;</span><br><span class="line">        a[++tota]=num*i;</span><br><span class="line">        <span class="built_in">dfs1</span>(x<span class="number">+2</span>,num*i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> x,ll num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(x<span class="number">+2</span>,num);</span><br><span class="line">    <span class="keyword">for</span>(ll i=p[x];;i*=p[x])&#123;</span><br><span class="line">        <span class="keyword">if</span>(lim/i&lt;num) <span class="keyword">break</span>;</span><br><span class="line">        b[++totb]=num*i;</span><br><span class="line">        <span class="built_in">dfs2</span>(x<span class="number">+2</span>,num*i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=totb;i&lt;=tota;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j&amp;&amp;x/a[i]&lt;b[j]) --j;</span><br><span class="line">        cnt+=j;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt&lt;k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(p[i]);</span><br><span class="line">    <span class="built_in">sort</span>(p<span class="number">+1</span>,p<span class="number">+1</span>+n);</span><br><span class="line">    a[++tota]=b[++totb]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+tota);</span><br><span class="line">    <span class="built_in">sort</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+totb);</span><br><span class="line">    <span class="built_in">read</span>(k);</span><br><span class="line">    ll l=<span class="number">1</span>,r=<span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) l=mid<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="USACO09NOV-Lights-G"><a href="#USACO09NOV-Lights-G" class="headerlink" title="[USACO09NOV] Lights G"></a><a href="https://www.luogu.com.cn/problem/P2962">[USACO09NOV] Lights G</a></h3><p>Meet in the middle，开一个 <code>std::map</code> 记录状态对应的最小操作次数，按照补集相加。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">40</span>;</span><br><span class="line"><span class="type">int</span> n,m,ans;</span><br><span class="line">ll a[N];</span><br><span class="line">map&lt;ll,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i]=<span class="number">1ll</span>&lt;&lt;i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        --u,--v;</span><br><span class="line">        a[u]|=<span class="number">1ll</span>&lt;&lt;v;</span><br><span class="line">        a[v]|=<span class="number">1ll</span>&lt;&lt;u;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=n<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;(n&gt;&gt;<span class="number">1</span>));i++)&#123;</span><br><span class="line">        ll temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;(n&gt;&gt;<span class="number">1</span>);j++)</span><br><span class="line">            <span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">                temp^=a[j];</span><br><span class="line">        <span class="keyword">if</span>(!mp.<span class="built_in">count</span>(temp)) mp[temp]=__builtin_popcount(i);</span><br><span class="line">        <span class="keyword">else</span> mp[temp]=<span class="built_in">min</span>(mp[temp],__builtin_popcount(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;(n-(n&gt;&gt;<span class="number">1</span>)));i++)&#123;</span><br><span class="line">        ll temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n-(n&gt;&gt;<span class="number">1</span>);j++)</span><br><span class="line">            <span class="keyword">if</span>((i&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">                temp^=a[(n&gt;&gt;<span class="number">1</span>)+j];</span><br><span class="line">        <span class="keyword">if</span>(mp.<span class="built_in">count</span>(((<span class="number">1ll</span>&lt;&lt;n)<span class="number">-1</span>)^temp))</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,__builtin_popcount(i)+mp[((<span class="number">1ll</span>&lt;&lt;n)<span class="number">-1</span>)^temp]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="机关"><a href="#机关" class="headerlink" title="机关"></a><a href="https://www.luogu.com.cn/problem/P5507">机关</a></h3><p><del>坏题。</del><br>考虑 A*。容易想到 $4$ 进制状压，则状态 $x$ 的估价 $h(x)$ 应为当前已经旋转的次数与所有不为 $1$ 的旋钮旋到 $1$ 所需总步数除以 $2$ 的和。因为最好情况是旋一个按钮时另一个正好也到了 $1$。每个状态记录一个 $pre$ 表示是从哪个状态转移过来的以输出方案。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=(<span class="number">1</span>&lt;&lt;<span class="number">24</span>)<span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> st,a[<span class="number">15</span>][<span class="number">4</span>],b[N],pre[N],step[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==st) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">write</span>(pre[x]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,b[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">h</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp=(x&gt;&gt;(i&lt;&lt;<span class="number">1</span>))&amp;<span class="number">3</span>;</span><br><span class="line">        res+=temp?<span class="number">4</span>-temp:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,h;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> x,<span class="type">int</span> h):<span class="built_in">x</span>(x),<span class="built_in">h</span>(h)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;a)<span class="type">const</span>&#123;<span class="keyword">return</span> h&gt;a.h;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,x;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(x);</span><br><span class="line">        st|=(x<span class="number">-1</span>)&lt;&lt;(i&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">            <span class="built_in">read</span>(a[i][j]),--a[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">node</span>(st,<span class="built_in">h</span>(st)));</span><br><span class="line">    vis[st]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> x=q.<span class="built_in">top</span>().x;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">            <span class="type">int</span> pos1=i&lt;&lt;<span class="number">1</span>,temp1=(x&gt;&gt;pos1)&amp;<span class="number">3</span>,j=a[i][temp1];</span><br><span class="line">            <span class="type">int</span> pos2=j&lt;&lt;<span class="number">1</span>,temp2=(x&gt;&gt;pos2)&amp;<span class="number">3</span>,res=x;</span><br><span class="line">            res&amp;=~(<span class="number">3</span>&lt;&lt;pos1);</span><br><span class="line">            res&amp;=~(<span class="number">3</span>&lt;&lt;pos2);</span><br><span class="line">            res|=((temp1<span class="number">+1</span>)&amp;<span class="number">3</span>)&lt;&lt;pos1;</span><br><span class="line">            res|=((temp2<span class="number">+1</span>)&amp;<span class="number">3</span>)&lt;&lt;pos2;</span><br><span class="line">            <span class="keyword">if</span>(!vis[res])&#123;</span><br><span class="line">                vis[res]=<span class="number">1</span>;</span><br><span class="line">                step[res]=step[x]<span class="number">+1</span>;</span><br><span class="line">                pre[res]=x,b[res]=i<span class="number">+1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">node</span>(res,step[res]+<span class="built_in">h</span>(res)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,step[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h1><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="NOIP-2013-提高组-货车运输"><a href="#NOIP-2013-提高组-货车运输" class="headerlink" title="[NOIP 2013 提高组] 货车运输"></a><a href="https://www.luogu.com.cn/problem/P1967">[NOIP 2013 提高组] 货车运输</a></h3><p>最优情况一定是走最大生成树上的边，所以先 Kruskal 求最大生成树，接下来求树上两点间路径权值最小值，可以边权下放点权上树剖+线段树或倍增。另外，图不保证连通，实际上要对森林做操作。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e4</span><span class="number">+10</span>,M=<span class="number">5e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,q,boss[N],cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> boss[x]==x?x:boss[x]=<span class="built_in">find</span>(boss[x]);&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> w&gt;x.w;&#125;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge1</span>&#123;<span class="type">int</span> v,w;&#125;;</span><br><span class="line">vector&lt;Edge1&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskal</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) boss[i]=i;</span><br><span class="line">    <span class="built_in">sort</span>(edge<span class="number">+1</span>,edge<span class="number">+1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m&amp;&amp;cnt&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="built_in">find</span>(edge[i].u),v=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">        boss[u]=v;</span><br><span class="line">        ++cnt;</span><br><span class="line">        u=edge[i].u,v=edge[i].v;</span><br><span class="line">        <span class="type">int</span> w=edge[i].w;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(&#123;v,w&#125;);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(&#123;u,w&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[N],dfncnt,son[N],fa[N],siz[N],top[N],dep[N],w[N],P,tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    fa[u]=f;</span><br><span class="line">    dep[u]=dep[f]<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=t.v;</span><br><span class="line">        <span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">        w[v]=t.w;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])</span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">    top[u]=topf;</span><br><span class="line">    dfn[u]=++dfncnt;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=t.v;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!siz[i]) w[i]=<span class="number">2e9</span>,<span class="built_in">dfs1</span>(i,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">dfs2</span>(i,i);</span><br><span class="line">    P=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(P&lt;=n<span class="number">+1</span>) P&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(tree,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(tree));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        tree[P+dfn[i]]=w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=P<span class="number">-1</span>;i;i--)</span><br><span class="line">        tree[i]=<span class="built_in">min</span>(tree[<span class="built_in">ls</span>(i)],tree[<span class="built_in">rs</span>(i)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    l+=P<span class="number">-1</span>,r+=P<span class="number">+1</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(l^<span class="number">1</span>^r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(~l&amp;<span class="number">1</span>) res=<span class="built_in">min</span>(tree[l^<span class="number">1</span>],res);</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res=<span class="built_in">min</span>(tree[r^<span class="number">1</span>],res);</span><br><span class="line">        l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find</span>(x)!=<span class="built_in">find</span>(y)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res=<span class="built_in">min</span>(res,<span class="built_in">query</span>(dfn[top[x]],dfn[x]));</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y) res=<span class="built_in">min</span>(res,<span class="built_in">query</span>(dfn[x]<span class="number">+1</span>,dfn[y]));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        edge[i]=&#123;u,v,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">kruskal</span>();</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">read</span>(x,y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask</span>(x,y));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="BJWC2010-严格次小生成树"><a href="#BJWC2010-严格次小生成树" class="headerlink" title="[BJWC2010] 严格次小生成树"></a><a href="https://www.luogu.com.cn/problem/P4180">[BJWC2010] 严格次小生成树</a></h3><p>跟上一道题一个套路。考虑枚举替换边的过程，首先加一条边形成环，再从环上删去最大的一条小于加入边边权的边。线段树维护区间最大值和区间严格次大值即可。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">3e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,boss[N],cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> maxn,se;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> maxn=<span class="number">-1</span>,<span class="type">int</span> se=<span class="number">-1</span>):<span class="built_in">maxn</span>(maxn),<span class="built_in">se</span>(se)&#123;&#125;</span><br><span class="line">    node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        node res;</span><br><span class="line">        res.maxn=<span class="built_in">max</span>(maxn,x.maxn);</span><br><span class="line">        res.se=<span class="built_in">max</span>(se,x.se);</span><br><span class="line">        <span class="keyword">if</span>(maxn!=x.maxn)</span><br><span class="line">            res.se=<span class="built_in">max</span>(res.se,<span class="built_in">min</span>(maxn,x.maxn));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> P;</span><br><span class="line">node tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    l+=P<span class="number">-1</span>,r+=P<span class="number">+1</span>;</span><br><span class="line">    node res;</span><br><span class="line">    <span class="keyword">while</span>(l^<span class="number">1</span>^r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(~l&amp;<span class="number">1</span>) res=res+tree[l^<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res=res+tree[r^<span class="number">1</span>];</span><br><span class="line">        l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Edge &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> w&lt;x.w;&#125;</span><br><span class="line">&#125;edge[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge1</span>&#123;<span class="type">int</span> v,w;&#125;;</span><br><span class="line">vector&lt;Edge1&gt; e[N];</span><br><span class="line">ll ans,minval;</span><br><span class="line"><span class="type">int</span> dfn[N],top[N],dfncnt,dep[N],fa[N],siz[N],son[N],w[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> boss[x]==x?x:boss[x]=<span class="built_in">find</span>(boss[x]);&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    dep[u]=dep[f]<span class="number">+1</span>;</span><br><span class="line">    fa[u]=f;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=t.v;</span><br><span class="line">        <span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">        w[v]=t.w;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])</span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">    top[u]=topf;</span><br><span class="line">    dfn[u]=++dfncnt;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:e[u])&#123;</span><br><span class="line">        <span class="type">int</span> v=t.v;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    node res;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res=res+<span class="built_in">query</span>(dfn[top[x]],dfn[x]);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y) res=res+<span class="built_in">query</span>(dfn[x]<span class="number">+1</span>,dfn[y]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        edge[i]=&#123;u,v,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(edge<span class="number">+1</span>,edge<span class="number">+1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) boss[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m&amp;&amp;cnt&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> u=<span class="built_in">find</span>(edge[i].u),v=<span class="built_in">find</span>(edge[i].v);</span><br><span class="line">        <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">        boss[u]=v;</span><br><span class="line">        vis[i]=<span class="number">1</span>;</span><br><span class="line">        u=edge[i].u,v=edge[i].v;</span><br><span class="line">        <span class="type">int</span> w=edge[i].w;</span><br><span class="line">        minval+=w;</span><br><span class="line">        e[u].<span class="built_in">push_back</span>(&#123;v,w&#125;);</span><br><span class="line">        e[v].<span class="built_in">push_back</span>(&#123;u,w&#125;);</span><br><span class="line">        <span class="keyword">if</span>(++cnt==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    P=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(P&lt;=n<span class="number">+1</span>) P&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        tree[P+dfn[i]]=w[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=P<span class="number">-1</span>;i;i--)</span><br><span class="line">        tree[i]=tree[i&lt;&lt;<span class="number">1</span>]+tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    ans=<span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> x=edge[i].u,y=edge[i].v,w=edge[i].w;</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">continue</span>;</span><br><span class="line">        node temp=<span class="built_in">ask</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(temp.maxn==w)</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,minval-temp.se+w);</span><br><span class="line">        <span class="keyword">else</span> ans=<span class="built_in">min</span>(ans,minval-temp.maxn+w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="Peaks"><a href="#Peaks" class="headerlink" title="Peaks"></a><a href="https://www.luogu.com.cn/problem/P4197">Peaks</a></h3><p>Kruskal 重构树的在线做法还是太吃操作了，我们直接离线。容易想到将边权和询问的 $x$ 升序排序后动态加边，查询第 $k$ 大直接线段树上二分，加边用并查集+线段树合并维护。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">5e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,q,h[N],b[N],len,tot,root[N],fa[N],now,ans[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> edge &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> w&lt;x.w;&#125;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span>&#123;</span><br><span class="line">    <span class="type">int</span> v,x,k,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Query &amp;a)<span class="type">const</span>&#123;<span class="keyword">return</span> x&lt;a.x;&#125;</span><br><span class="line">&#125;qu[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span>&#123;</span><br><span class="line">    <span class="type">int</span> ls,rs,sum;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tree[u].sum=tree[tree[u].ls].sum+tree[tree[u].rs].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!u) u=++tot;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        ++tree[u].sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(tree[u].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(tree[u].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a||!b) <span class="keyword">return</span> a|b;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[a].sum+=tree[b].sum;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    tree[a].ls=<span class="built_in">merge</span>(tree[a].ls,tree[b].ls,l,mid);</span><br><span class="line">    tree[a].rs=<span class="built_in">merge</span>(tree[a].rs,tree[b].rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="built_in">push_up</span>(a);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=tree[tree[u].ls].sum)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tree[u].ls,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tree[u].rs,mid<span class="number">+1</span>,r,k-tree[tree[u].ls].sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(h[i]);</span><br><span class="line">        b[i]=h[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+n);</span><br><span class="line">    len=<span class="built_in">unique</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+n)-b<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="built_in">lower_bound</span>(b<span class="number">+1</span>,b<span class="number">+1</span>+len,h[i])-b;</span><br><span class="line">        <span class="built_in">modify</span>(root[i],<span class="number">1</span>,len,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v,w);</span><br><span class="line">        e[i]=&#123;u,v,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(e<span class="number">+1</span>,e<span class="number">+1</span>+m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,v,x,k;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(v,x,k);</span><br><span class="line">        qu[i]=&#123;v,x,k,i&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(qu<span class="number">+1</span>,qu<span class="number">+1</span>+q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="type">int</span> x=qu[i].x,k=qu[i].k,id=qu[i].id;</span><br><span class="line">        <span class="keyword">while</span>(e[now<span class="number">+1</span>].w&lt;=x&amp;&amp;now&lt;m)&#123;</span><br><span class="line">            ++now;</span><br><span class="line">            <span class="type">int</span> u=<span class="built_in">find</span>(e[now].u),v=<span class="built_in">find</span>(e[now].v);</span><br><span class="line">            <span class="keyword">if</span>(u==v) <span class="keyword">continue</span>;</span><br><span class="line">            fa[u]=v;</span><br><span class="line">            root[v]=<span class="built_in">merge</span>(root[v],root[u],<span class="number">1</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> v=<span class="built_in">find</span>(qu[i].v);</span><br><span class="line">        <span class="keyword">if</span>(tree[root[v]].sum&lt;k) ans[id]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> ans[id]=b[<span class="built_in">query</span>(root[v],<span class="number">1</span>,len,tree[root[v]].sum-k<span class="number">+1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><p>没做。</p>
<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h3 id="ZJOI2007-最大半连通子图"><a href="#ZJOI2007-最大半连通子图" class="headerlink" title="[ZJOI2007] 最大半连通子图"></a><a href="https://www.luogu.com.cn/problem/P2272">[ZJOI2007] 最大半连通子图</a></h3><p>容易发现，半连通子图就是若干相连的强连通分量，则找最大半连通子图转化为缩点后在 DAG 上找最长链+计数。注意去重。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,mod,head[N],tot_edge;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;<span class="type">int</span> to,nxt;&#125;e1[M];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    e1[++tot_edge].to=v;</span><br><span class="line">    e1[tot_edge].nxt=head[u];</span><br><span class="line">    head[u]=tot_edge;</span><br><span class="line">&#125;</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="type">bool</span> instack[N];</span><br><span class="line"><span class="type">int</span> dfn[N],low[N],dfncnt,scccnt,scc[N],w[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    dfn[u]=low[u]=++dfncnt;</span><br><span class="line">    instack[u]=<span class="number">1</span>;</span><br><span class="line">    st.<span class="built_in">push</span>(u);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e1[i].nxt)&#123;</span><br><span class="line">        <span class="type">int</span> v=e1[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])&#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(v);</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v])</span><br><span class="line">            low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])&#123;</span><br><span class="line">        ++scccnt;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> v=st.<span class="built_in">top</span>();</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">            instack[v]=<span class="number">0</span>;</span><br><span class="line">            scc[v]=scccnt;</span><br><span class="line">            ++w[scccnt];</span><br><span class="line">            <span class="keyword">if</span>(u==v) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e2[N];</span><br><span class="line"><span class="type">int</span> indegree[N],dp[N],dis[N],ans1,ans2;</span><br><span class="line">set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; p;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(u,v);</span><br><span class="line">        <span class="built_in">add_edge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e1[i].nxt)&#123;</span><br><span class="line">            <span class="type">int</span> v=e1[i].to;</span><br><span class="line">            <span class="keyword">if</span>(scc[u]==scc[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(p.<span class="built_in">find</span>(<span class="built_in">make_pair</span>(scc[u],scc[v]))!=p.<span class="built_in">end</span>())</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            p.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(scc[u],scc[v]));</span><br><span class="line">            e2[scc[u]].<span class="built_in">push_back</span>(scc[v]);</span><br><span class="line">            ++indegree[scc[v]];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=scccnt;i++)</span><br><span class="line">        <span class="keyword">if</span>(!indegree[i])&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            dis[i]=w[i];</span><br><span class="line">            dp[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v:e2[u])&#123;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&lt;dis[u]+w[v])&#123;</span><br><span class="line">                dis[v]=dis[u]+w[v];</span><br><span class="line">                dp[v]=dp[u];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dis[v]==dis[u]+w[v])</span><br><span class="line">                dp[v]=(dp[u]+dp[v])%mod;</span><br><span class="line">            <span class="keyword">if</span>(!--indegree[v]) q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=scccnt;i++) ans1=<span class="built_in">max</span>(ans1,dis[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=scccnt;i++)</span><br><span class="line">        <span class="keyword">if</span>(dis[i]==ans1) ans2=(ans2+dp[i])%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d\n&quot;</span>,ans1,ans2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h1><h2 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h2><h3 id="Machine-Schedule"><a href="#Machine-Schedule" class="headerlink" title="Machine Schedule"></a><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=246&amp;page=show_problem&amp;problem=3635">Machine Schedule</a></h3><p>连接每个 $a_i$ 和 $b_i$，问题变为了二分图上找最小点覆盖。直接跑二分图最大匹配即可。<br>Kőnig 定理：二分图中，最小点覆盖中的顶点数量等于最大匹配中的边数量。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,ans,match[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!match[v]||<span class="built_in">dfs</span>(match[v]))&#123;</span><br><span class="line">                match[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">int</span>)*(n<span class="number">+10</span>));</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">read</span>(m,k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,a;i&lt;=k;i++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(a,u,v);</span><br><span class="line">            e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">bool</span>)*(n<span class="number">+10</span>));</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(i)) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="USACO05JAN-Muddy-Fields-G"><a href="#USACO05JAN-Muddy-Fields-G" class="headerlink" title="[USACO05JAN] Muddy Fields G"></a><a href="https://www.luogu.com.cn/problem/P6062">[USACO05JAN] Muddy Fields G</a></h3><p>贪心地考虑，极长地放木板一定优。将所有横着的和竖着的木板编号，相交的连边，之后二分图最大匹配。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">55</span>;</span><br><span class="line"><span class="type">int</span> r,c,tota,totb,a[N][N],b[N][N],match[N*N],ans;</span><br><span class="line"><span class="type">char</span> mp[N][N];</span><br><span class="line"><span class="type">bool</span> vis[N*N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N*N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!match[v]||<span class="built_in">dfs</span>(match[v]))&#123;</span><br><span class="line">                match[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;r&gt;&gt;c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=r;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c;j++)&#123;</span><br><span class="line">            cin&gt;&gt;mp[i][j];</span><br><span class="line">            <span class="keyword">if</span>(mp[i][j]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j<span class="number">-1</span>]==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    a[i][j]=a[i][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span> a[i][j]=++tota;</span><br><span class="line">                <span class="keyword">if</span>(mp[i<span class="number">-1</span>][j]==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">                    b[i][j]=b[i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">else</span> b[i][j]=++totb;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j]&amp;&amp;b[i][j])</span><br><span class="line">                    e[a[i][j]].<span class="built_in">push_back</span>(b[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tota;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dfs</span>(i)) ++ans;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="Guardian-of-Decency"><a href="#Guardian-of-Decency" class="headerlink" title="Guardian of Decency"></a><a href="https://onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=242&amp;page=show_problem&amp;problem=3235">Guardian of Decency</a></h3><p>最大独立集与最小点覆盖之和为顶点数目，这个推论适用于一般图。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> t,n,match[N],ans,cnta,cntb;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    string music,sport;</span><br><span class="line">&#125;a[N],b[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">            vis[v]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!match[v]||<span class="built_in">dfs</span>(match[v]))&#123;</span><br><span class="line">                match[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">int</span>)*(n<span class="number">+10</span>));</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cin&gt;&gt;a[i].h&gt;&gt;a[i].sex&gt;&gt;a[i].music&gt;&gt;a[i].sport;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(a[i].h-a[j].h)&gt;<span class="number">40</span>||a[i].sex==a[j].sex||</span><br><span class="line">                    a[i].music!=a[j].music||a[i].sport==a[j].sport)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[i].sex==<span class="string">&#x27;M&#x27;</span>) e[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">                <span class="keyword">else</span> e[j].<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">bool</span>)*(n<span class="number">+10</span>));</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dfs</span>(i)) ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n-ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="欧拉路径"><a href="#欧拉路径" class="headerlink" title="欧拉路径"></a>欧拉路径</h2><p>没做。</p>
<h2 id="连通分量"><a href="#连通分量" class="headerlink" title="连通分量"></a>连通分量</h2><p>没做。</p>
<p>参考资料：<br><a href="https://oi-wiki.org/graph/graph-matching/bigraph-match/">https://oi-wiki.org/graph/graph-matching/bigraph-match/</a></p>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>杂题合集</title>
    <url>/2025/07/04/%E6%9D%82%E9%A2%98%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h3 id="abc-405e"><a href="#abc-405e" class="headerlink" title="abc_405e"></a><a href="https://atcoder.jp/contests/abc405/tasks/abc405_e" title="abc_405e">abc_405e</a></h3><p>简单组合计数。形式化地说，A 必须在 C 左边，A 必须在 D 左边，B 必须在 D 左边，不难发现应对 C 进行分割，左半部分与 B 重合，而右半部分与 D 重合。如图<br><img src="https://github.com/headless-piston/blog_images/blob/main/abc405e.png?raw=true" alt="image"><br>枚举 C 中的断点 $i$，答案即为  </p>
<script type="math/tex; mode=display">\sum_{i=0}^{c}\binom{a+b+i}{b}\binom{c-i+d-1}{d-1}</script><p>预处理阶乘和逆元可以做到 $O(n)$。  </p>
<h3 id="【模板】通信题"><a href="#【模板】通信题" class="headerlink" title="【模板】通信题"></a><a href="https://www.luogu.com.cn/problem/P12509" title="【模板】通信题">【模板】通信题</a></h3><p>通信题真好玩。<br>我们只能使用不大于 $2^{20}$ 的非负整数存储状态。注意到这个数刚好比 $10^6$ 略大。这给我们对每一位附上不同权值提供了方便。考虑利用异或运算的性质，给每一位附上当前字符下标的权值（下标从 $1$）开始，然后求其异或和。将 $S$ 和 $T$ 的结果异或起来即得答案。注意下标一定从 $1$ 开始，否则第一位的值无论如何都是 $0$。</p>
<details>
<summary>communication.cpp</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Alice</span><span class="params">(string S)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S.<span class="built_in">length</span>();i++)</span><br><span class="line">        res^=(i<span class="number">+1</span>)*(S[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Bob</span><span class="params">(string T,<span class="type">int</span> X)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;T.<span class="built_in">length</span>();i++)</span><br><span class="line">        res^=(i<span class="number">+1</span>)*(T[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> X^res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="『MdOI-R1』Group"><a href="#『MdOI-R1』Group" class="headerlink" title="『MdOI R1』Group"></a><a href="https://www.luogu.com.cn/problem/P6069" title="『MdOI R1』Group">『MdOI R1』Group</a></h3><p>二分答案。<br>注意到，对 $a$ 进行排序，则我们可以选中其中一段连续的区间，计算它的方差。而两侧的值直接设为区间的平均值，不产生贡献。这样是最优策略。在检查合法性时直接从 $1$ 到 $n$ 枚举区间就好了，预处理前缀和和前缀平方和可做到 $O(1)$ 求方差。<br>二分时，$l$ 必须从 $1$ 开始。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],l,r;</span><br><span class="line">ll m,sum[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">1</span>,r=l+len<span class="number">-1</span>;r&lt;=n;l++,r++)&#123;</span><br><span class="line">        ll s=sum[r][<span class="number">0</span>]-sum[l<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">double</span> p=<span class="number">1.0</span>*s/len;</span><br><span class="line">        <span class="type">double</span> res=len*p*p;</span><br><span class="line">        res-=<span class="number">2</span>*s*p;</span><br><span class="line">        res+=sum[r][<span class="number">1</span>]-sum[l<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(res&lt;=m)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    std::<span class="built_in">sort</span>(a<span class="number">+1</span>,a<span class="number">+1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum[i][<span class="number">0</span>]=sum[i<span class="number">-1</span>][<span class="number">0</span>]+a[i];</span><br><span class="line">        sum[i][<span class="number">1</span>]=sum[i<span class="number">-1</span>][<span class="number">1</span>]<span class="number">+1ll</span>*a[i]*a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    l=<span class="number">1</span>,r=n;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid))</span><br><span class="line">            l=mid<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r=mid<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n-r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="NOIP-2014-提高组-飞扬的小鸟"><a href="#NOIP-2014-提高组-飞扬的小鸟" class="headerlink" title="[NOIP 2014 提高组] 飞扬的小鸟"></a><a href="https://www.luogu.com.cn/problem/P1941" title="[NOIP 2014 提高组] 飞扬的小鸟">[NOIP 2014 提高组] 飞扬的小鸟</a></h3><p>$dp_{i,j}$ 表示在 $(i,j)$ 所用的最少点击屏幕数，显然有朴素转移方程</p>
<script type="math/tex; mode=display">dp_{i,j}=\min(dp_{i,j},dp_{i-1,j-k\times x_{i-1}},dp_{i-1,j+y_{i-1}})</script><p>时间复杂度 $O(nm^2)$。<br>考虑优化，复杂度瓶颈在于 $k$ 的枚举。我们发现，可以使用类似完全背包的处理，从 $dp<em>{i,j-(k-1)\times x</em>{i-1}}$ 转移到 $dp<em>{i,j-k\times x</em>{i-1}}$ 而不必从 $dp_{i-1}$ 转移。时间复杂度 $O(nm)$。<br>注意要先处理点击屏幕的情况，否则可能出现同一横坐标既向下又向上的情况。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b,<span class="type">const</span> Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Min</span>(<span class="built_in">Min</span>(a,b),args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">10010</span>,M=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,x[N],y[N],dp[N][M],cnt,res;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,h;</span><br><span class="line">&#125;c[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">read</span>(n,m,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">read</span>(x[i],y[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,p;i&lt;=k;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(p);</span><br><span class="line">        <span class="built_in">read</span>(c[p].l,c[p].h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        dp[<span class="number">0</span>][i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=x[i<span class="number">-1</span>]<span class="number">+1</span>;j&lt;=m;j++)</span><br><span class="line">            dp[i][j]=<span class="built_in">Min</span>(dp[i][j],dp[i<span class="number">-1</span>][j-x[i<span class="number">-1</span>]]<span class="number">+1</span>,dp[i][j-x[i<span class="number">-1</span>]]<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=m-x[i<span class="number">-1</span>];j&lt;=m;j++)</span><br><span class="line">            dp[i][m]=<span class="built_in">Min</span>(dp[i][m],dp[i<span class="number">-1</span>][j]<span class="number">+1</span>,dp[i][j]<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j+y[i<span class="number">-1</span>]&lt;=m;j++)</span><br><span class="line">            dp[i][j]=<span class="built_in">Min</span>(dp[i][j],dp[i<span class="number">-1</span>][j+y[i<span class="number">-1</span>]]);</span><br><span class="line">        <span class="keyword">if</span>(c[i].h)&#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=c[i].l;j++)</span><br><span class="line">                dp[i][j]=inf;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=c[i].h;j&lt;=m;j++)</span><br><span class="line">                dp[i][j]=inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> f=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j]!=inf)&#123;</span><br><span class="line">                f=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(f)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0\n%d\n&quot;</span>,cnt<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res=inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        res=<span class="built_in">Min</span>(res,dp[n][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1\n%d\n&quot;</span>,res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="邦邦的大合唱站队"><a href="#邦邦的大合唱站队" class="headerlink" title="邦邦的大合唱站队"></a><a href="https://www.luogu.com.cn/problem/P3694" title="邦邦的大合唱站队">邦邦的大合唱站队</a></h3><p>状压 DP，每一位表示一种乐队。预处理前缀和计算长度。代码实现也很简单。<del>（很久没有独立想出过 DP 题了）</del></p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,a,dp[<span class="number">1</span>&lt;&lt;<span class="number">21</span>],sum[N][<span class="number">30</span>],len[<span class="number">1</span>&lt;&lt;<span class="number">21</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; t[<span class="number">30</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">        sum[i][a<span class="number">-1</span>]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            sum[i][j]+=sum[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,bitcnt;i&lt;(<span class="number">1</span>&lt;&lt;m);i++)&#123;</span><br><span class="line">        bitcnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)&#123;</span><br><span class="line">                bitcnt++;</span><br><span class="line">                len[i]+=sum[n][j];</span><br><span class="line">            &#125;</span><br><span class="line">        t[bitcnt].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> p:t[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=p;j;j^=<span class="built_in">lowbit</span>(j))&#123;</span><br><span class="line">                <span class="type">int</span> k=<span class="built_in">lowbit</span>(j);</span><br><span class="line">                dp[p]=<span class="built_in">Min</span>(dp[p],dp[p^k]+len[p]-len[p^k]-(sum[len[p]][__lg(k)]-sum[len[p^k]][__lg(k)]));</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,dp[(<span class="number">1</span>&lt;&lt;m)<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="可持久化并查集"><a href="#可持久化并查集" class="headerlink" title="可持久化并查集"></a><a href="https://www.luogu.com.cn/problem/P3402" title="可持久化并查集">可持久化并查集</a></h3><p>用可持久化数组实现。使用按秩合并但不使用路径压缩。注意修改 $fa$ 与修改 $dep$ 都要新建版本。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f)</span><br><span class="line">        x=~x<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T &amp;a,T &amp;b)</span></span>&#123;</span><br><span class="line">    T c=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>,M=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span>&#123;</span><br><span class="line">    <span class="type">int</span> ls,rs,fa,dep;</span><br><span class="line">&#125;tree[N*<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> nodetot,root[M],n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    u=++nodetot;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u].fa=l;</span><br><span class="line">        tree[u].dep=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">build</span>(tree[u].ls,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(tree[u].rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_fa</span><span class="params">(<span class="type">int</span> old,<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    u=++nodetot;</span><br><span class="line">    tree[u]=tree[old];</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u].fa=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify_fa</span>(tree[old].ls,tree[u].ls,l,mid,x,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">modify_fa</span>(tree[old].rs,tree[u].rs,mid<span class="number">+1</span>,r,x,k);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_dep</span><span class="params">(<span class="type">int</span> old,<span class="type">int</span> &amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    u=++nodetot;</span><br><span class="line">    tree[u]=tree[old];</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        tree[u].dep++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="built_in">modify_dep</span>(tree[old].ls,tree[u].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">modify_dep</span>(tree[old].rs,tree[u].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_fa</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> tree[u].fa;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_fa</span>(tree[u].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_fa</span>(tree[u].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_dep</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">        <span class="keyword">return</span> tree[u].dep;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_dep</span>(tree[u].ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query_dep</span>(tree[u].rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> ver,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx=<span class="built_in">query_fa</span>(root[ver],<span class="number">1</span>,n,x);</span><br><span class="line">    <span class="keyword">if</span>(fx==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">find</span>(ver,fx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> ver,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    x=<span class="built_in">find</span>(ver<span class="number">-1</span>,x);</span><br><span class="line">    y=<span class="built_in">find</span>(ver<span class="number">-1</span>,y);</span><br><span class="line">    <span class="keyword">if</span>(x==y)&#123;</span><br><span class="line">        root[ver]=root[ver<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> depx=<span class="built_in">query_dep</span>(root[ver<span class="number">-1</span>],<span class="number">1</span>,n,x),depy=<span class="built_in">query_dep</span>(root[ver<span class="number">-1</span>],<span class="number">1</span>,n,y);</span><br><span class="line">    <span class="keyword">if</span>(depx&gt;depy)</span><br><span class="line">        <span class="built_in">Swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify_fa</span>(root[ver<span class="number">-1</span>],root[ver],<span class="number">1</span>,n,x,y);</span><br><span class="line">    <span class="keyword">if</span>(depx==depy)</span><br><span class="line">        <span class="built_in">modify_dep</span>(root[ver],root[ver],<span class="number">1</span>,n,y);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> opt,a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="built_in">build</span>(root[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(a,b);</span><br><span class="line">            <span class="built_in">merge</span>(i,a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(a);</span><br><span class="line">            root[i]=root[a];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">read</span>(a,b);</span><br><span class="line">            root[i]=root[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(i,a)==<span class="built_in">find</span>(i,b))</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="PA-2024-Modernizacja-Bajtocji"><a href="#PA-2024-Modernizacja-Bajtocji" class="headerlink" title="[PA 2024] Modernizacja Bajtocji"></a><a href="https://www.luogu.com.cn/problem/P10350" title="[PA 2024] Modernizacja Bajtocji">[PA 2024] Modernizacja Bajtocji</a></h3><p>挺喜欢这道题，但出在模拟赛里我就不喜欢了。<br>显然需要维护连通块，连通块内出现环了就说明都有电脑了，连通块是树形的就无法确定。然而这里有一个删除操作。并查集不好进行删除，我们发现被删的点留在连通块内无影响，则考虑对每个人维护 $id$，删除即为更新 $id$。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Swap</span><span class="params">(T &amp;a,T &amp;b)</span></span>&#123;</span><br><span class="line">    T c=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=c;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1.3e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> fa[N],siz[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]==x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,id[N],have[N],cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        fa[i]=i,siz[i]=<span class="number">1</span>,id[i]=i;</span><br><span class="line">    cnt=n;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        <span class="type">int</span> a,b;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">&#x27;?&#x27;</span>)&#123;</span><br><span class="line">            cin&gt;&gt;a;</span><br><span class="line">            a=id[a];</span><br><span class="line">            <span class="type">int</span> p=<span class="built_in">find</span>(a);</span><br><span class="line">            <span class="keyword">if</span>(siz[p]==<span class="number">1</span>)</span><br><span class="line">                cout&lt;&lt;have[p];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(have[p])</span><br><span class="line">                cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;<span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">            cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">            a=id[a],b=id[b];</span><br><span class="line">            <span class="type">int</span> p=<span class="built_in">find</span>(a),q=<span class="built_in">find</span>(b);</span><br><span class="line">            <span class="keyword">if</span>(p==q)</span><br><span class="line">                have[p]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                fa[q]=p;</span><br><span class="line">                siz[p]+=siz[q];</span><br><span class="line">                have[p]|=have[q];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cin&gt;&gt;a;</span><br><span class="line">            <span class="type">int</span> a1=a;</span><br><span class="line">            a=id[a];</span><br><span class="line">            <span class="type">int</span> p=<span class="built_in">find</span>(a);</span><br><span class="line">            siz[p]--;</span><br><span class="line">            id[a1]=++cnt;</span><br><span class="line">            fa[cnt]=cnt;</span><br><span class="line">            siz[cnt]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="【模板】最长公共子序列"><a href="#【模板】最长公共子序列" class="headerlink" title="【模板】最长公共子序列"></a><a href="https://www.luogu.com.cn/problem/P1439" title="【模板】最长公共子序列">【模板】最长公共子序列</a></h3><p>好早以前欠的一道题，现在补上。<br>朴素 DP $O(n^2)$，但这题可以转化为求最长上升子序列。将序列 $P<em>1$ 视为是“有序的”，按照 $P_1$ 的排序规则在 $P_2$ 中求最长上升子序列，显然这就是答案。实现方面的话开个桶就行。<br>最长上升子序列 $O(n\log n)$ 求法：<br>设 $dp_i$ 表示到第 $i$ 个数时的答案，$t_i$ 表示 $dp_i$ 对应的序列最大值，显然有 $dp_i=\max</em>{j&lt;i \land t_j&lt;b_i} dp_j$，我们可以用树状数组维护前缀 $\max$，实现 $O(n\log n)$ 的时间复杂度。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;a,<span class="type">const</span> T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b?b:a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],b[N],dp[N],ans;</span><br><span class="line"><span class="type">int</span> tree[N];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) x&amp;-x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=n;x+=<span class="built_in">lowbit</span>(x))</span><br><span class="line">        tree[x]=<span class="built_in">Max</span>(tree[x],k);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x^=<span class="built_in">lowbit</span>(x))</span><br><span class="line">        res=<span class="built_in">Max</span>(tree[x],res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,t;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(t),a[t]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(b[i]);</span><br><span class="line">        dp[i]=<span class="built_in">query</span>(a[b[i]])<span class="number">+1</span>;</span><br><span class="line">        <span class="built_in">modify</span>(a[b[i]],dp[i]);</span><br><span class="line">        ans=<span class="built_in">Max</span>(ans,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="CQOI2017-小Q的棋盘"><a href="#CQOI2017-小Q的棋盘" class="headerlink" title="[CQOI2017] 小Q的棋盘"></a><a href="https://www.luogu.com.cn/problem/P3698" title="[CQOI2017] 小Q的棋盘">[CQOI2017] 小Q的棋盘</a></h3><p>也是模拟赛的史，可以树形 DP，但我选择贪。<br>优先走最长链，如果还有剩余步数就需要每两步访问一个新节点。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(x);</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?y:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">114</span>;</span><br><span class="line"><span class="type">int</span> v,n,maxdep;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> dep)</span></span>&#123;</span><br><span class="line">    maxdep=<span class="built_in">Max</span>(maxdep,dep);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u,dep<span class="number">+1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(v,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a,b;i&lt;v;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a,b);</span><br><span class="line">        a++,b++;</span><br><span class="line">        e[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        e[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=maxdep<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n<span class="number">+1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Min</span>(v,maxdep+(n-maxdep<span class="number">+1</span>)/<span class="number">2</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="SZA-Cloakroom"><a href="#SZA-Cloakroom" class="headerlink" title="SZA-Cloakroom"></a><a href="https://www.luogu.com.cn/problem/P3537" title="SZA-Cloakroom">SZA-Cloakroom</a></h3><p>很巧妙的一道 DP。显然可以将物品和询问离线下来分别按时间排序。设 $dp_k$ 表示总价值为 $k$ 的物品能拿走的最后的时间。转移</p>
<script type="math/tex; mode=display">dp_k=\max(dp_k,\min(dp_k-c_j,b_j))</script><p>表示新加入物品 $j$，我们能否凑出 $k$ 决定于最早被取走的那个物品的时间，所以取 $\min$，而我们显然希望这个值越晚越好，所以取 $\max$，则只要 $dp_k&gt;m_i+s_i$ 就说明合法。<br>初始状态所有 $dp$ 均为 $-\inf$，表示均不合法。$dp_0$ 为 $\inf$ 表示不选任何物品总是可行的。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>,M=<span class="number">1e6</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> c,a,b;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a&lt;x.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;t[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line">    <span class="type">int</span> m,k,s,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> query &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m&lt;x.m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[M];</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Max</span><span class="params">(<span class="type">const</span> T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&lt;y?y:x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Min</span><span class="params">(<span class="type">const</span> T &amp;x,<span class="type">const</span> T &amp;y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x&lt;y?x:y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,p,dp[<span class="number">100010</span>],ans[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;t[i].c&gt;&gt;t[i].a&gt;&gt;t[i].b;</span><br><span class="line">    <span class="built_in">sort</span>(t<span class="number">+1</span>,t<span class="number">+1</span>+n);</span><br><span class="line">    cin&gt;&gt;p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">        cin&gt;&gt;q[i].m&gt;&gt;q[i].k&gt;&gt;q[i].s,q[i].id=i;</span><br><span class="line">    <span class="built_in">sort</span>(q<span class="number">+1</span>,q<span class="number">+1</span>+p);</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=p;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(;t[j].a&lt;=q[i].m&amp;&amp;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">100000</span>;k&gt;=t[j].c;k--)</span><br><span class="line">                dp[k]=<span class="built_in">Max</span>(dp[k],<span class="built_in">Min</span>(dp[k-t[j].c],t[j].b));</span><br><span class="line">        ans[q[i].id]=dp[q[i].k]&gt;(q[i].m+q[i].s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">        <span class="built_in">printf</span>(ans[i]?<span class="string">&quot;TAK\n&quot;</span>:<span class="string">&quot;NIE\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="abc-288f"><a href="#abc-288f" class="headerlink" title="abc_288f"></a><a href="https://atcoder.jp/contests/abc288/tasks/abc288_f" title="abc_288f">abc_288f</a></h3><p>设 $dp_i$ 表示前 $i$ 位的答案，有朴素的转移</p>
<script type="math/tex; mode=display">dp_i=\sum_{j=1}^{i-1} dp_j\times \overline{X_{j+1}X_{j+2}\cdots X_i}</script><p>化简：</p>
<script type="math/tex; mode=display">dp_i=10\times dp_{i-1}+X_i+X_i\times \sum_{j=1}^{i-1}dp_j</script><p>可以维护前缀和实现 $O(n)$。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,x;</span><br><span class="line">ll sum,dp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %1d&quot;</span>,&amp;n,&amp;x);</span><br><span class="line">    dp=sum=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>,&amp;x);</span><br><span class="line">        dp=(dp*<span class="number">10</span>%mod+sum*x%mod+x)%mod;</span><br><span class="line">        sum=(sum+dp)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,dp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="小-a-和-uim-之大逃离"><a href="#小-a-和-uim-之大逃离" class="headerlink" title="小 a 和 uim 之大逃离"></a><a href="https://www.luogu.com.cn/problem/P1373" title="小 a 和 uim 之大逃离">小 a 和 uim 之大逃离</a></h3><p>我们事实上只关注二者的差，所以无需分别记录状态。$dp_{i,j,t,0/1}$ 表示在 $(i,j)$，二者之差为 $t$，当前应为小 a/uim 走。转移很朴素，看代码吧。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">810</span>;</span><br><span class="line"><span class="type">int</span> n,m,k,a[N][N],dp[N][N][<span class="number">20</span>][<span class="number">2</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    k++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i][j]);</span><br><span class="line">            dp[i][j][a[i][j]%k][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">0</span>;t&lt;=k;t++)&#123;</span><br><span class="line">                dp[i][j][t][<span class="number">0</span>]=(dp[i][j][t][<span class="number">0</span>]+dp[i<span class="number">-1</span>][j][(t-a[i][j]+k)%k][<span class="number">1</span>])%mod;</span><br><span class="line">                dp[i][j][t][<span class="number">0</span>]=(dp[i][j][t][<span class="number">0</span>]+dp[i][j<span class="number">-1</span>][(t-a[i][j]+k)%k][<span class="number">1</span>])%mod;</span><br><span class="line">                dp[i][j][t][<span class="number">1</span>]=(dp[i][j][t][<span class="number">1</span>]+dp[i<span class="number">-1</span>][j][(t+a[i][j])%k][<span class="number">0</span>])%mod;</span><br><span class="line">                dp[i][j][t][<span class="number">1</span>]=(dp[i][j][t][<span class="number">1</span>]+dp[i][j<span class="number">-1</span>][(t+a[i][j])%k][<span class="number">0</span>])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            ans=(ans+dp[i][j][<span class="number">0</span>][<span class="number">1</span>])%mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="SDOI2010-地精部落"><a href="#SDOI2010-地精部落" class="headerlink" title="[SDOI2010] 地精部落"></a><a href="https://www.luogu.com.cn/problem/P2467" title="[SDOI2010] 地精部落">[SDOI2010] 地精部落</a></h3><p>$dp_{j,0/1}$ 表示前 $i$ 个数中最后一个是第 $j$ 大的数的升/降序方案数。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">4210</span>;</span><br><span class="line"><span class="type">int</span> n,p,dp[N][<span class="number">2</span>],sum[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;p;</span><br><span class="line">    sum[<span class="number">1</span>][<span class="number">0</span>]=sum[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            dp[j][<span class="number">0</span>]=sum[j<span class="number">-1</span>][<span class="number">1</span>]%p;</span><br><span class="line">            dp[j][<span class="number">1</span>]=(sum[i<span class="number">-1</span>][<span class="number">0</span>]-sum[j<span class="number">-1</span>][<span class="number">0</span>]+p)%p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            sum[j][<span class="number">0</span>]=(dp[j][<span class="number">0</span>]+sum[j<span class="number">-1</span>][<span class="number">0</span>])%p;</span><br><span class="line">            sum[j][<span class="number">1</span>]=(dp[j][<span class="number">1</span>]+sum[j<span class="number">-1</span>][<span class="number">1</span>])%p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;(sum[n][<span class="number">0</span>]+sum[n][<span class="number">1</span>])%p&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="SCOI2009-游戏"><a href="#SCOI2009-游戏" class="headerlink" title="[SCOI2009] 游戏"></a><a href="https://www.luogu.com.cn/problem/P4161" title="[SCOI2009] 游戏">[SCOI2009] 游戏</a></h3><p>神仙题，转化太难想了。观察题目给的实例，发现转化关系可分为 $3$ 组，不难看出每组的周期应为该组内元素数量，总排数即为各组的元素数的 $\operatorname{lcm}$ 再加 $1$。接下来想如何不重地枚举所有对应关系。考虑使用质因数分解。使用类似完全背包的写法，这样就保证了所有方案的枚举。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,prime[N],e[N],tot;</span><br><span class="line">ll dp[N],res;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!e[i])</span><br><span class="line">            prime[e[i]=++tot]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=e[i]&amp;&amp;prime[j]*i&lt;=n;j++)</span><br><span class="line">            e[prime[j]*i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;=prime[i];j--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=prime[i];k&lt;=j;k*=prime[i])</span><br><span class="line">                dp[j]+=dp[j-k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        res+=dp[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res<span class="number">+1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="LnOI2019-真正的-OIer-从不女装"><a href="#LnOI2019-真正的-OIer-从不女装" class="headerlink" title="[LnOI2019] 真正的 OIer 从不女装"></a><a href="https://www.luogu.com.cn/problem/P5500" title="[LnOI2019] 真正的 OIer 从不女装">[LnOI2019] 真正的 OIer 从不女装</a></h3><p>我们发现，女装只有零次和无数次。所以将 $k&gt;0$ 的情况视为 $k=1$。线段树维护区间最长连续段、包含最左/右端最长连续段。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::max;</span><br><span class="line"><span class="keyword">using</span> std::min;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Seg</span>&#123;</span><br><span class="line">    <span class="type">int</span> maxn,maxl,maxr,tag,vall,valr,len;</span><br><span class="line">    <span class="built_in">Seg</span>(<span class="type">int</span> maxn=<span class="number">0</span>,<span class="type">int</span> maxl=<span class="number">0</span>,<span class="type">int</span> maxr=<span class="number">0</span>,<span class="type">int</span> tag=<span class="number">0</span>,<span class="type">int</span> vall=<span class="number">0</span>,<span class="type">int</span> valr=<span class="number">0</span>,<span class="type">int</span> len=<span class="number">0</span>):</span><br><span class="line">    <span class="built_in">maxn</span>(maxn),<span class="built_in">maxl</span>(maxl),<span class="built_in">maxr</span>(maxr),<span class="built_in">tag</span>(tag),<span class="built_in">vall</span>(vall),<span class="built_in">valr</span>(valr),<span class="built_in">len</span>(len)&#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Seg <span class="keyword">operator</span>+(<span class="type">const</span> Seg &amp;a,<span class="type">const</span> Seg &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a.len) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(!b.len) <span class="keyword">return</span> a;</span><br><span class="line">        Seg res;</span><br><span class="line">        res.maxn=<span class="built_in">max</span>(a.maxn,b.maxn);</span><br><span class="line">        res.maxl=a.maxl,res.maxr=b.maxr;</span><br><span class="line">        res.vall=a.vall,res.valr=b.valr;</span><br><span class="line">        res.len=a.len+b.len;</span><br><span class="line">        <span class="keyword">if</span>(a.valr==b.vall)&#123;</span><br><span class="line">            res.maxn=<span class="built_in">max</span>(res.maxn,a.maxr+b.maxl);</span><br><span class="line">            <span class="keyword">if</span>(a.maxl==a.len) res.maxl+=b.maxl;</span><br><span class="line">            <span class="keyword">if</span>(b.maxr==b.len) res.maxr+=a.maxr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="built_in">read</span>(val);</span><br><span class="line">        tree[u]=<span class="built_in">Seg</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,val,val,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(ls,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(rs,mid<span class="number">+1</span>,r);</span><br><span class="line">    tree[u]=tree[ls]+tree[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[u].tag) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> lenl=tree[ls].len,lenr=tree[rs].len,val=tree[u].tag;</span><br><span class="line">    tree[ls]=<span class="built_in">Seg</span>(lenl,lenl,lenl,val,val,val,lenl);</span><br><span class="line">    tree[rs]=<span class="built_in">Seg</span>(lenr,lenr,lenr,val,val,val,lenr);</span><br><span class="line">    tree[u].tag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        <span class="type">int</span> len=tree[u].len;</span><br><span class="line">        tree[u]=<span class="built_in">Seg</span>(len,len,len,k,k,k,len);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(ls,l,mid,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">    tree[u]=tree[ls]+tree[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Seg <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r) <span class="keyword">return</span> tree[u];</span><br><span class="line">    Seg res;</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) res=res+<span class="built_in">query</span>(ls,l,mid,x,y);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) res=res+<span class="built_in">query</span>(rs,mid<span class="number">+1</span>,r,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x,y,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(ch!=<span class="string">&#x27;R&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;Q&#x27;</span>) ch=<span class="built_in">getchar</span>();</span><br><span class="line">        <span class="built_in">read</span>(x,y,k);</span><br><span class="line">        <span class="keyword">if</span>(ch^<span class="string">&#x27;Q&#x27;</span>) <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y,k);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y).maxn);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Seg temp=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line">            <span class="type">int</span> res=temp.maxn;</span><br><span class="line">            <span class="keyword">if</span>(temp.vall==temp.valr) res=<span class="built_in">max</span>(res,temp.maxl+temp.maxr);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">min</span>(res,temp.len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="NOIP-2004-提高组-合并果子-加强版"><a href="#NOIP-2004-提高组-合并果子-加强版" class="headerlink" title="[NOIP 2004 提高组] 合并果子 加强版"></a><a href="https://www.luogu.com.cn/problem/P6033" title="[NOIP 2004 提高组] 合并果子 加强版">[NOIP 2004 提高组] 合并果子 加强版</a></h3><p>传统做法中堆的 $O(n\log n)$ 复杂度太高了，我们使用两个队列，先桶排，然后按顺序插入队列 $q_1$ 中，之后每合并一次就将结果插入队列 $q_2$ 中，容易发现，$q_1$ 和 $q_2$ 都具有单调性，所以每次只需从两个队列的队头取出 $2$ 个最小的数即可。时间复杂度 $O(n)$。注意读入的常数。<br>使用这种思路，做 <a href="https://www.luogu.com.cn/problem/P2827" title="[NOIP 2016 提高组] 蚯蚓">[NOIP 2016 提高组] 蚯蚓</a>。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __linux__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> getchar getchar_unlocked</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a,b[M];</span><br><span class="line">queue&lt;ll&gt; q1,q2;</span><br><span class="line">ll sum;</span><br><span class="line"><span class="function">ll <span class="title">get_min</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q<span class="number">1.</span><span class="built_in">empty</span>())&#123;</span><br><span class="line">        ll x=q<span class="number">2.f</span>ront();</span><br><span class="line">        q<span class="number">2.</span><span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q<span class="number">2.</span><span class="built_in">empty</span>())&#123;</span><br><span class="line">        ll x=q<span class="number">1.f</span>ront();</span><br><span class="line">        q<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q<span class="number">1.f</span>ront()&lt;q<span class="number">2.f</span>ront())&#123;</span><br><span class="line">        ll x=q<span class="number">1.f</span>ront();</span><br><span class="line">        q<span class="number">1.</span><span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    ll x=q<span class="number">2.f</span>ront();</span><br><span class="line">    q<span class="number">2.</span><span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(a),b[a]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1e5</span>;i++)</span><br><span class="line">        <span class="keyword">while</span>(b[i]--)</span><br><span class="line">            q<span class="number">1.</span><span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        ll x=<span class="built_in">get_min</span>(),y=<span class="built_in">get_min</span>();</span><br><span class="line">        q<span class="number">2.</span><span class="built_in">push</span>(x+y);</span><br><span class="line">        sum+=x+y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="多人背包"><a href="#多人背包" class="headerlink" title="多人背包"></a><a href="https://www.luogu.com.cn/problem/P1858" title="多人背包">多人背包</a></h3><p>也是很久以前的题，之前好几次想写都觉得太抽象写不了，今天静下心来想一想其实并不难。<br>$dp_{j,k}$ 表示容量为 $j$ 时的第 $k$ 优解。我们直接双指针枚举选或不选当前物品，枚举出当前的前 $k$ 优，将它们存入队列中然后直接转移。时间复杂度 $O(nvk)$，空间复杂度 $O(vk)$。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> k,v,n,a[<span class="number">210</span>],b[<span class="number">210</span>],dp[<span class="number">5010</span>][<span class="number">60</span>],temp[<span class="number">60</span>];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xcf</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    cin&gt;&gt;k&gt;&gt;v&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;a[i]&gt;&gt;b[i];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=v;j&gt;=a[i];j--)&#123;</span><br><span class="line">            <span class="type">int</span> p1=<span class="number">1</span>,p2=<span class="number">1</span>,cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(cnt&lt;=k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j][p1]&gt;dp[j-a[i]][p2]+b[i])</span><br><span class="line">                    temp[++cnt]=dp[j][p1++];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    temp[++cnt]=dp[j-a[i]][p2++]+b[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">1</span>;t&lt;=k;t++)</span><br><span class="line">                dp[j][t]=temp[t];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">        ans+=dp[v][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>暑假集训题目合集-2</title>
    <url>/2025/07/13/%E6%9A%91%E5%81%87%E9%9B%86%E8%AE%AD%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86-2/</url>
    <content><![CDATA[<h1 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h1><h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><p>一般使用线段树维护，具体地，维护区间和及区间非零个数。</p>
<h3 id="NOI2023-方格染色"><a href="#NOI2023-方格染色" class="headerlink" title="[NOI2023] 方格染色"></a><a href="https://www.luogu.com.cn/problem/P9478">[NOI2023] 方格染色</a></h3><p>横竖线就是扫描线板题。斜线最多只有 $5$ 个，暴力将能够合并的斜线合并，然后遍历所有横竖线判断是否有交。懒得写离散化了，直接动态开点线段树也能过。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> tot,n,m,q,C,cnt,type3cnt,cnt1,cnt2;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">114</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">    <span class="type">int</span> t,x1,y1,x2,y2;</span><br><span class="line">&#125;a[N],b[<span class="number">114</span>],c[<span class="number">114</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">change</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y1,y2,k;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> change &amp;temp)<span class="type">const</span>&#123;<span class="keyword">return</span> x&lt;temp.x;&#125;</span><br><span class="line">&#125;p[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    Node *ls,*rs;</span><br><span class="line">    <span class="type">int</span> val,tag;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line">Node *root;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node *<span class="title">new_node</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> &amp;tree[++tot];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_up</span><span class="params">(Node *u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;tag) u-&gt;val=r-l<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l==r) u-&gt;val=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        u-&gt;val=<span class="number">0</span>;</span><br><span class="line">        u-&gt;val+=u-&gt;ls?u-&gt;ls-&gt;val:<span class="number">0</span>;</span><br><span class="line">        u-&gt;val+=u-&gt;rs?u-&gt;rs-&gt;val:<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(Node*&amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==<span class="literal">nullptr</span>) u=<span class="built_in">new_node</span>();</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        u-&gt;tag+=k;</span><br><span class="line">        <span class="built_in">push_up</span>(u,l,r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(u-&gt;ls,l,mid,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) <span class="built_in">modify</span>(u-&gt;rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">    <span class="built_in">push_up</span>(u,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(C,n,m,q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,t,x1,y1,x2,y2;i&lt;=q;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(t,x1,y1,x2,y2);</span><br><span class="line">        <span class="keyword">if</span>(t!=<span class="number">3</span>)&#123;</span><br><span class="line">            p[++cnt]=&#123;x1<span class="number">-1</span>,y1,y2,<span class="number">1</span>&#125;;</span><br><span class="line">            p[++cnt]=&#123;x2,y1,y2,<span class="number">-1</span>&#125;;</span><br><span class="line">            a[++cnt1]=&#123;t,x1,y1,x2,y2&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> b[++type3cnt]=&#123;<span class="number">3</span>,x1,y1,x2,y2&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(p<span class="number">+1</span>,p<span class="number">+1</span>+cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">        <span class="built_in">modify</span>(root,<span class="number">1</span>,<span class="number">1e9</span>,p[i].y1,p[i].y2,p[i].k);</span><br><span class="line">        ans+=root-&gt;val*(p[i<span class="number">+1</span>].x-p[i].x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=type3cnt;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=type3cnt;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j||vis[j]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(b[j].x2-b[i].x1==b[j].y2-b[i].y1&amp;&amp;b[j].x1&lt;=b[i].x2&amp;&amp;b[j].x2&gt;=b[i].x2)&#123;</span><br><span class="line">                    b[i].x1=<span class="built_in">min</span>(b[i].x1,b[j].x1);</span><br><span class="line">                    b[i].y1=<span class="built_in">min</span>(b[i].y1,b[j].y1);</span><br><span class="line">                    b[i].x2=<span class="built_in">max</span>(b[i].x2,b[j].x2);</span><br><span class="line">                    b[i].y2=<span class="built_in">max</span>(b[i].y2,b[j].y2);</span><br><span class="line">                    vis[j]=<span class="number">1</span>;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=type3cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        c[++cnt2]=b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt2;i++)&#123;</span><br><span class="line">        set&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; st;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt1;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j].t==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> tx=c[i].x1+a[j].y1-c[i].y1;</span><br><span class="line">                <span class="keyword">if</span>(tx&lt;c[i].x1||tx&gt;c[i].x2||tx&lt;<span class="number">1</span>||tx&gt;n) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(tx&lt;a[j].x1||tx&gt;a[j].x2) <span class="keyword">continue</span>;</span><br><span class="line">                pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; temp=&#123;tx,a[j].y1&#125;;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">find</span>(temp)==st.<span class="built_in">end</span>())</span><br><span class="line">                    --ans,st.<span class="built_in">insert</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[j].t==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="type">int</span> ty=c[i].y1+a[j].x1-c[i].x1;</span><br><span class="line">                <span class="keyword">if</span>(ty&lt;c[i].y1||ty&gt;c[i].y2||ty&lt;<span class="number">1</span>||ty&gt;m) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(ty&lt;a[j].y1||ty&gt;a[j].y2) <span class="keyword">continue</span>;</span><br><span class="line">                pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; temp=&#123;a[j].x1,ty&#125;;</span><br><span class="line">                <span class="keyword">if</span>(st.<span class="built_in">find</span>(temp)==st.<span class="built_in">end</span>())</span><br><span class="line">                    --ans,st.<span class="built_in">insert</span>(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=c[i].x2-c[i].x1<span class="number">+1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="SHOI2007-园丁的烦恼"><a href="#SHOI2007-园丁的烦恼" class="headerlink" title="[SHOI2007] 园丁的烦恼"></a><a href="https://www.luogu.com.cn/problem/P2163">[SHOI2007] 园丁的烦恼</a></h3><p>将一个询问拆成四个询问的差分形式，扫描线维护二维前缀和，动态开点线段树代替离散化。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">5e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;a)<span class="type">const</span>&#123;<span class="keyword">return</span> x&lt;a.x;&#125;</span><br><span class="line">&#125;p[N];</span><br><span class="line"><span class="type">int</span> tot,ans[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y,belong,f;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Query &amp;a)<span class="type">const</span>&#123;<span class="keyword">return</span> x&lt;a.x;&#125;</span><br><span class="line">&#125;q[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Tree</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    Tree *ls,*rs;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">5</span>],*root;</span><br><span class="line"><span class="type">int</span> node_cnt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Tree* <span class="title">new_node</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> &amp;tree[++node_cnt];&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> val(x) (x==nullptr?0:x-&gt;sum)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(Tree *&amp;u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==<span class="literal">nullptr</span>) u=<span class="built_in">new_node</span>();</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        ++u-&gt;sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(u-&gt;ls,l,mid,x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">modify</span>(u-&gt;rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">    u-&gt;sum=<span class="built_in">val</span>(u-&gt;ls)+<span class="built_in">val</span>(u-&gt;rs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(Tree *u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==<span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r) <span class="keyword">return</span> u-&gt;sum;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) res+=<span class="built_in">query</span>(u-&gt;ls,l,mid,x,y);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) res+=<span class="built_in">query</span>(u-&gt;rs,mid<span class="number">+1</span>,r,x,y);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> now;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(p[i].x,p[i].y);</span><br><span class="line">    <span class="built_in">sort</span>(p<span class="number">+1</span>,p<span class="number">+1</span>+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a,b,c,d;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a,b,c,d);</span><br><span class="line">        <span class="keyword">if</span>(a<span class="number">-1</span>&gt;=<span class="number">0</span>&amp;&amp;b<span class="number">-1</span>&gt;=<span class="number">0</span>) q[++tot]=&#123;a<span class="number">-1</span>,b<span class="number">-1</span>,i,<span class="number">1</span>&#125;;</span><br><span class="line">        q[++tot]=&#123;c,d,i,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(a<span class="number">-1</span>&gt;=<span class="number">0</span>) q[++tot]=&#123;a<span class="number">-1</span>,d,i,<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(b<span class="number">-1</span>&gt;=<span class="number">0</span>) q[++tot]=&#123;c,b<span class="number">-1</span>,i,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q<span class="number">+1</span>,q<span class="number">+1</span>+tot);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(now&lt;n&amp;&amp;p[now<span class="number">+1</span>].x&lt;=q[i].x)</span><br><span class="line">            <span class="built_in">modify</span>(root,<span class="number">0</span>,<span class="number">1e7</span>,p[++now].y);</span><br><span class="line">        ans[q[i].belong]+=<span class="built_in">query</span>(root,<span class="number">0</span>,<span class="number">1e7</span>,<span class="number">0</span>,q[i].y)*q[i].f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="IOI-1998-USACO5-5-矩形周长-Picture"><a href="#IOI-1998-USACO5-5-矩形周长-Picture" class="headerlink" title="[IOI 1998][USACO5.5] 矩形周长 Picture"></a><a href="https://www.luogu.com.cn/problem/P1856">[IOI 1998][USACO5.5] 矩形周长 Picture</a></h3><p>横线和竖线分开算。注意若出现多条线重合，则必须先处理加再处理删。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,val[N&lt;&lt;<span class="number">2</span>],sum[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum[u]) val[u]=r-l<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l==r) val[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> val[u]=val[ls]+val[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        sum[u]+=k;</span><br><span class="line">        <span class="built_in">push_up</span>(u,l,r);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(ls,l,mid,x,y,k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,k);</span><br><span class="line">    <span class="built_in">push_up</span>(u,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,a,b,k;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;y)<span class="type">const</span>&#123;<span class="keyword">return</span> x^y.x?x&lt;y.x:k&gt;y.k;&#125;</span><br><span class="line">&#125;p[N&lt;&lt;<span class="number">1</span>],q[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> tot1,tot2,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a,b,c,d;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a,b,c,d);</span><br><span class="line">        p[++tot1]=&#123;a,b,d<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        p[++tot1]=&#123;c,b,d<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">        q[++tot2]=&#123;b,a,c<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        q[++tot2]=&#123;d,a,c<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(p<span class="number">+1</span>,p<span class="number">+1</span>+tot1);</span><br><span class="line">    <span class="built_in">sort</span>(q<span class="number">+1</span>,q<span class="number">+1</span>+tot2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot1;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp=val[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(p[i].a&gt;p[i].b) <span class="built_in">swap</span>(p[i].a,p[i].b);</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">-1e4</span>,<span class="number">1e4</span>,p[i].a,p[i].b,p[i].k);</span><br><span class="line">        ans+=<span class="built_in">abs</span>(temp-val[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot2;i++)&#123;</span><br><span class="line">        <span class="type">int</span> temp=val[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(q[i].a&gt;q[i].b) <span class="built_in">swap</span>(q[i].a,q[i].b);</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">-1e4</span>,<span class="number">1e4</span>,q[i].a,q[i].b,q[i].k);</span><br><span class="line">        ans+=<span class="built_in">abs</span>(temp-val[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h1><h2 id="树上技巧"><a href="#树上技巧" class="headerlink" title="树上技巧"></a>树上技巧</h2><p>树的直径的求法：  </p>
<ul>
<li>两遍 dfs/bfs（无法处理负边权）</li>
<li>树形 DP（可以处理负边权）</li>
</ul>
<p>这两种方法的时间复杂度均为 $O(n)$。<br>树形 DP 具体求法：<br>设 $dp<em>{u,0/1}$ 表示以 $u$ 为根的子树中从根向下能延伸的最长/非严格次长路径。则答案为 $dp</em>{u,0}+dp_{u,1}$ 的最大值。</p>
<h3 id="APIO2010-巡逻"><a href="#APIO2010-巡逻" class="headerlink" title="[APIO2010] 巡逻"></a><a href="https://www.luogu.com.cn/problem/P3629">[APIO2010] 巡逻</a></h3><p>老题了。考虑贪心，$k=1$ 时连接直径两端是显然的。设直径为 $(u_1,v_1)$，加入的第二条边为 $(u_2,v_2)$，二者不交时答案显然为 $dis(u_1,v_1)+dis(u_2,v_2)$，若两路径有交，形如<br><img src="https://github.com/headless-piston/blog_images/blob/main/P3629.png?raw=true" alt=""><br>则答案为 $dis(u_1,v_2)+dis(u_2,v_1)$。由此可以看出，若仍要选在直径上的边，代价会更大。则我们将直径的边权全部设为 $-1$，再找一个新的直径。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,k,ans,dis[N],a,b,pre[N],head[N],dp[N][<span class="number">2</span>],maxn;</span><br><span class="line"><span class="type">bool</span> vis[N],tag[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">bool</span> flag,<span class="type">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">        dis[v]=dis[u]<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag) pre[v]=u;</span><br><span class="line">        <span class="keyword">if</span>(dis[v]&gt;dis[x]) x=v;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,flag,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,u);</span><br><span class="line">        <span class="type">int</span> w=tag[u]&amp;&amp;tag[v]?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> temp=dp[v][<span class="number">0</span>]+w;</span><br><span class="line">        <span class="keyword">if</span>(temp&gt;dp[u][<span class="number">0</span>])</span><br><span class="line">            dp[u][<span class="number">1</span>]=dp[u][<span class="number">0</span>],dp[u][<span class="number">0</span>]=temp;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(temp&gt;dp[u][<span class="number">1</span>])</span><br><span class="line">            dp[u][<span class="number">1</span>]=temp;</span><br><span class="line">        maxn=<span class="built_in">max</span>(maxn,dp[u][<span class="number">0</span>]+dp[u][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,a,b;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a,b);</span><br><span class="line">        e[a].<span class="built_in">push_back</span>(b);</span><br><span class="line">        e[b].<span class="built_in">push_back</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>,a);</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">dfs1</span>(a,<span class="number">1</span>,b);</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">        ans=(n<span class="number">-1</span>)*<span class="number">2</span>-dis[b]<span class="number">+1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=b;i;i=pre[i]) tag[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    ans=n*<span class="number">2</span>-dis[b]-maxn;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="NOI2021-轻重边"><a href="#NOI2021-轻重边" class="headerlink" title="[NOI2021] 轻重边"></a><a href="https://www.luogu.com.cn/problem/P7735">[NOI2021] 轻重边</a></h3><p>结论：每次修改操作染不同颜色，重边数等于区间内相邻两点颜色相同的点对数。树剖+线段树维护即可。精细处理树剖的查询部分。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> t,n,m,siz[N],son[N],dep[N],fa[N],dfn[N],dfncnt,top[N];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    fa[u]=f;</span><br><span class="line">    siz[u]=<span class="number">1</span>;</span><br><span class="line">    son[u]=<span class="number">0</span>;</span><br><span class="line">    dep[u]=dep[f]<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==f) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        siz[u]+=siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v]&gt;siz[son[u]])</span><br><span class="line">            son[u]=v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">    dfn[u]=++dfncnt;</span><br><span class="line">    top[u]=topf;</span><br><span class="line">    <span class="keyword">if</span>(son[u]) <span class="built_in">dfs2</span>(son[u],topf);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="keyword">if</span>(v==fa[u]||v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> lc,rc,cnt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">friend</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;a,<span class="type">const</span> node &amp;b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.lc==<span class="number">-1</span>) <span class="keyword">return</span> b;</span><br><span class="line">        <span class="keyword">if</span>(b.lc==<span class="number">-1</span>) <span class="keyword">return</span> a;</span><br><span class="line">        node res;</span><br><span class="line">        res.lc=a.lc,res.rc=b.rc;</span><br><span class="line">        res.cnt=a.cnt+b.cnt;</span><br><span class="line">        <span class="keyword">if</span>(a.rc==b.lc&amp;&amp;a.rc) ++res.cnt;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> tag[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> P,DEP;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (x&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (x&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> siz)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tag[u]) <span class="keyword">return</span>;</span><br><span class="line">    tree[<span class="built_in">ls</span>(u)]=tree[<span class="built_in">rs</span>(u)]=&#123;tag[u],tag[u],(siz&gt;&gt;<span class="number">1</span>)<span class="number">-1</span>&#125;;</span><br><span class="line">    tag[<span class="built_in">ls</span>(u)]=tag[<span class="built_in">rs</span>(u)]=tag[u];</span><br><span class="line">    tag[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    l+=P<span class="number">-1</span>,r+=P<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=DEP;i;i--) <span class="built_in">push_down</span>(l&gt;&gt;i,<span class="number">1</span>&lt;&lt;i),<span class="built_in">push_down</span>(r&gt;&gt;i,<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    <span class="type">int</span> siz=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l^<span class="number">1</span>^r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(~l&amp;<span class="number">1</span>) tree[l^<span class="number">1</span>]=&#123;k,k,siz<span class="number">-1</span>&#125;,tag[l^<span class="number">1</span>]=k;</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) tree[r^<span class="number">1</span>]=&#123;k,k,siz<span class="number">-1</span>&#125;,tag[r^<span class="number">1</span>]=k;</span><br><span class="line">        l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>,siz&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        tree[l]=tree[<span class="built_in">ls</span>(l)]+tree[<span class="built_in">rs</span>(l)];</span><br><span class="line">        tree[r]=tree[<span class="built_in">ls</span>(r)]+tree[<span class="built_in">rs</span>(r)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(l&gt;&gt;=<span class="number">1</span>;l;l&gt;&gt;=<span class="number">1</span>) tree[l]=tree[<span class="built_in">ls</span>(l)]+tree[<span class="built_in">rs</span>(l)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> node <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    node resl=&#123;<span class="number">-1</span>&#125;,resr=&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">    l+=P<span class="number">-1</span>,r+=P<span class="number">+1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=DEP;i;i--) <span class="built_in">push_down</span>(l&gt;&gt;i,<span class="number">1</span>&lt;&lt;i),<span class="built_in">push_down</span>(r&gt;&gt;i,<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    <span class="keyword">while</span>(l^<span class="number">1</span>^r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(~l&amp;<span class="number">1</span>) resl=resl+tree[l^<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) resr=tree[r^<span class="number">1</span>]+resr;</span><br><span class="line">        l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resl+resr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">modify</span>(dfn[top[x]],dfn[x],k);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="built_in">modify</span>(dfn[x],dfn[y],k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans=<span class="number">0</span>,c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])&#123;</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">            <span class="built_in">swap</span>(c1,c2);</span><br><span class="line">        &#125;</span><br><span class="line">        node res=<span class="built_in">query</span>(dfn[top[x]],dfn[x]);</span><br><span class="line">        ans+=res.cnt;</span><br><span class="line">        <span class="keyword">if</span>(res.rc==c1&amp;&amp;c1) ++ans;</span><br><span class="line">        c1=res.lc;</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y])&#123;</span><br><span class="line">        <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="built_in">swap</span>(c1,c2);</span><br><span class="line">    &#125;</span><br><span class="line">    node res=<span class="built_in">query</span>(dfn[x],dfn[y]);</span><br><span class="line">    ans+=res.cnt;</span><br><span class="line">    <span class="keyword">if</span>(res.rc==c2&amp;&amp;c2) ++ans;</span><br><span class="line">    <span class="keyword">if</span>(res.lc==c1&amp;&amp;c1) ++ans;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt,op,a,b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        dfncnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) e[i].<span class="built_in">clear</span>();</span><br><span class="line">        <span class="built_in">read</span>(n,m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(u,v);</span><br><span class="line">            e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">            e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">memset</span>(tree,<span class="number">0</span>,<span class="built_in">sizeof</span>(node)*(n*<span class="number">4</span><span class="number">+10</span>));</span><br><span class="line">        <span class="built_in">memset</span>(tag,<span class="number">0</span>,<span class="built_in">sizeof</span>(<span class="type">int</span>)*(n*<span class="number">4</span><span class="number">+10</span>));</span><br><span class="line">        P=<span class="number">1</span>,DEP=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(P&lt;=n<span class="number">+1</span>) P&lt;&lt;=<span class="number">1</span>,++DEP;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="built_in">read</span>(op,a,b);</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="number">1</span>) <span class="built_in">change</span>(a,b,++cnt);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">ask</span>(a,b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="十二省联考-2019-春节十二响"><a href="#十二省联考-2019-春节十二响" class="headerlink" title="[十二省联考 2019] 春节十二响"></a><a href="https://www.luogu.com.cn/problem/P5290">[十二省联考 2019] 春节十二响</a></h3><p>贪心策略：令两条链上各自权值最大的比较，次大的比较……则可以在每个节点开一个堆，启发式合并。不同于可并堆，节点 $u$，$v$ 的堆合并后的大小为 $\max(size_u,size_v)$ 而非 $size_u+size_v$，时间复杂度为 $O(n\log n)$。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m[N];</span><br><span class="line">ll ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; e[N];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">    <span class="keyword">if</span>(q[x].<span class="built_in">size</span>()&lt;q[y].<span class="built_in">size</span>()) <span class="built_in">swap</span>(q[x],q[y]);</span><br><span class="line">    <span class="keyword">while</span>(q[y].<span class="built_in">size</span>())&#123;</span><br><span class="line">        temp.<span class="built_in">push_back</span>(<span class="built_in">max</span>(q[x].<span class="built_in">top</span>(),q[y].<span class="built_in">top</span>()));</span><br><span class="line">        q[x].<span class="built_in">pop</span>(),q[y].<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k:temp) q[x].<span class="built_in">push</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:e[u])&#123;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">        <span class="built_in">merge</span>(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    q[u].<span class="built_in">push</span>(m[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">read</span>(m[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>,f;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(f),e[f].<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q[<span class="number">1</span>].<span class="built_in">empty</span>()) ans+=q[<span class="number">1</span>].<span class="built_in">top</span>(),q[<span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day9"><a href="#Day9" class="headerlink" title="Day9"></a>Day9</h1><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h3 id="「TAOI-2」喵了个喵-Ⅳ"><a href="#「TAOI-2」喵了个喵-Ⅳ" class="headerlink" title="「TAOI-2」喵了个喵 Ⅳ"></a><a href="https://www.luogu.com.cn/problem/P9575">「TAOI-2」喵了个喵 Ⅳ</a></h3><p>神秘题。$n$ 为偶数时显然。$n$ 为奇数时先求出所有数的最大公约数 $d$，此时取 $x=2$，将所有数都约去 $d$，此时若有奇数个奇数，则会有偶数个偶数，必然无解，反之则可以按照奇偶容易地构造一组解。最后答案为 $2d$。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,a[N],d,cntodd,cnteven;</span><br><span class="line"><span class="type">bool</span> ans[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(a[i]);</span><br><span class="line">            d=__gcd(d,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            a[i]/=d;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>) ++cntodd;</span><br><span class="line">            <span class="keyword">else</span> ++cnteven;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cntodd&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,cnt=<span class="number">0</span>;i&lt;=n&amp;&amp;cnt&lt;cntodd/<span class="number">2</span><span class="number">-1</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]&amp;<span class="number">1</span>) ans[i]=<span class="number">1</span>,++cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,cnt=<span class="number">0</span>;i&lt;=n&amp;&amp;cnt&lt;(cnteven<span class="number">+1</span>)/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(~a[i]&amp;<span class="number">1</span>) ans[i]=<span class="number">1</span>,++cnt;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="number">2</span>*d);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n/<span class="number">2</span>;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="CTSC2017-吉夫特"><a href="#CTSC2017-吉夫特" class="headerlink" title="[CTSC2017] 吉夫特"></a><a href="https://www.luogu.com.cn/problem/P3773">[CTSC2017] 吉夫特</a></h3><p>这题的转化真是神了。发现题目中 $\bmod 2$ 很特殊，$\dbinom{a<em>{b_1}}{a</em>{b<em>2}} \times \dbinom{a</em>{b<em>2}}{a</em>{b<em>3}} \times \cdots \times \dbinom{a</em>{b<em>{k-1}}}{a</em>{b<em>k}} \bmod 2 &gt;0$ 成立当且仅当对于任意 $k&gt;1$，$\dbinom{a</em>{b<em>{k-1}}}{a</em>{b_k}}\bmod 2=1$，我们尝试使用 Lucas 定理展开  </p>
<script type="math/tex; mode=display">\binom{a_{b_{k-1}}}{a_{b_k}}\equiv \binom{\lfloor a_{b_{k-1}}/2\rfloor}{\lfloor a_{b_k}/2\rfloor}\binom{a_{b_{k-1}}\bmod 2}{a_{b_k}\bmod 2}\pmod 2</script><p>持续展开，不难发现其等于两数二进制拆分后每一位的组合数相乘，又因为  </p>
<script type="math/tex; mode=display">\binom{1}{1}=\binom{1}{0}=\binom{0}{0}=1</script><script type="math/tex; mode=display">\binom{0}{1}=0</script><p>所以 $\dbinom{a<em>{b</em>{k-1}}}{a<em>{b_k}}\bmod 2=1$ 当且仅当 $a</em>{b<em>k}$ 在二进制下是 $a</em>{b<em>{k-1}}$ 的子集，即 $a</em>{b<em>{k-1}} \operatorname{bitand} a</em>{b<em>k}=a</em>{b<em>k}$。则我们可以推出 DP 方程，设 $dp</em>{i}$ 表示以 $i$ 为结尾的子序列方案数：  </p>
<script type="math/tex; mode=display">dp_{a_i}=\sum_{a_i\in a_j\land j<i}(dp_{a_j}+1)</script><p>$O(3^{\log{\max(a_i)}})$ 子集枚举即可。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">1000000007</span>,N=<span class="number">233350</span>;</span><br><span class="line"><span class="type">int</span> n,a,dp[N],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> s=(a<span class="number">-1</span>)&amp;a;s;s=(s<span class="number">-1</span>)&amp;a)</span><br><span class="line">            dp[s]=(dp[s]+dp[a]<span class="number">+1</span>)%mod;</span><br><span class="line">        ans=(ans+dp[a])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h1><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><h3 id="USACO07NOV-Cow-Relays-G"><a href="#USACO07NOV-Cow-Relays-G" class="headerlink" title="[USACO07NOV] Cow Relays G"></a><a href="https://www.luogu.com.cn/problem/P2886">[USACO07NOV] Cow Relays G</a></h3><p>我们使用 $\min$ 和 $+$ 代替原矩阵乘法中的 $+$ 和 $\times$，也就是  </p>
<script type="math/tex; mode=display">C_{i,j}=\min(A_{i,k}+B_{k,j})</script><p>设 $A<em>{i,j}$ 表示 $i$ 到 $j$ 的最短路，则走 $n$ 步后的最短路即为 $A</em>{i,j}^n$。<br>设离散化后点有 $m$ 个，时间复杂度 $O(m^3\log n)$。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1010</span>,M=<span class="number">210</span>;</span><br><span class="line"><span class="type">int</span> n,t,s,e,a[N],cnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;<span class="type">int</span> u,v,w;&#125;edge[M];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span>&#123;</span><br><span class="line">    <span class="type">int</span> x[M][M];</span><br><span class="line">    <span class="built_in">Matrix</span>()&#123;<span class="built_in">memset</span>(x,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(x));&#125;</span><br><span class="line">    Matrix <span class="keyword">operator</span>*(<span class="type">const</span> Matrix &amp;a)<span class="type">const</span>&#123;</span><br><span class="line">        Matrix res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=cnt;k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">                    res.x[i][j]=<span class="built_in">min</span>(res.x[i][j],x[i][k]+a.x[k][j]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;b;</span><br><span class="line"><span class="function">Matrix <span class="title">qpow</span><span class="params">(Matrix a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    Matrix res=a;</span><br><span class="line">    --b;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,t,s,e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(w,u,v);</span><br><span class="line">        <span class="keyword">if</span>(!a[u]) a[u]=++cnt;</span><br><span class="line">        <span class="keyword">if</span>(!a[v]) a[v]=++cnt;</span><br><span class="line">        b.x[a[u]][a[v]]=b.x[a[v]][a[u]]=w;</span><br><span class="line">    &#125;</span><br><span class="line">    b=<span class="built_in">qpow</span>(b,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b.x[a[s]][a[e]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="【模板】矩阵求逆"><a href="#【模板】矩阵求逆" class="headerlink" title="【模板】矩阵求逆"></a><a href="https://www.luogu.com.cn/problem/P4783">【模板】矩阵求逆</a></h3><p>本题中的矩阵均为方阵。<br>矩阵的逆：在模 $p$ 意义下，若 $B\times A=A\times B=I$，则 $B$ 称为模 $p$ 意义下 $A$ 的逆矩阵，记作 $A^{-1}$。模 $p$ 意义下,一个矩阵若有逆矩阵，则必然只有一个逆矩阵。<br>矩阵的逆可以用高斯-约旦消元求出。原理：使用初等行变换将矩阵 $A$ 转化为单位矩阵 $I$，同时对一个初始的单位矩阵 $I$ 进行相同的初等行变换，最终得到的就是逆矩阵 $A^{-1}$。<br>例如，我们构造原矩阵 $[A\mid I]$，进行一系列初等行变换后，得到 $[I\mid A^{-1}]$。我们发现，高斯-约旦消元的过程就是将矩阵的左半部分变为单位矩阵的过程，非常适合求解矩阵的逆。<br>无解判断：若消元过程中，主元与 $p$ 不互质则无解。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">1e9</span><span class="number">+7</span>,N=<span class="number">410</span>;</span><br><span class="line"><span class="type">int</span> n,a[N][N*<span class="number">2</span>];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">read</span>(a[i][j]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i][i+n]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,cur,line=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cur=line;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=line<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[j][i]&gt;a[cur][i])</span><br><span class="line">                cur=j;</span><br><span class="line">        <span class="keyword">if</span>(__gcd(a[cur][i],mod)!=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No Solution&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll inv=<span class="built_in">qpow</span>(a[cur][i],mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=(n&lt;&lt;<span class="number">1</span>);j++)</span><br><span class="line">            <span class="built_in">swap</span>(a[cur][j],a[line][j]),a[line][j]=a[line][j]*inv%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(j!=line)&#123;</span><br><span class="line">                ll temp=a[j][i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=(n&lt;&lt;<span class="number">1</span>);k++)</span><br><span class="line">                    a[j][k]=((a[j][k]-a[line][k]*temp)%mod+mod)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        ++line;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i][j+n]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day11-12"><a href="#Day11-12" class="headerlink" title="Day11/12"></a>Day11/12</h1><h2 id="离散与组合数学"><a href="#离散与组合数学" class="headerlink" title="离散与组合数学"></a>离散与组合数学</h2><h3 id="HAOI2008-硬币购物"><a href="#HAOI2008-硬币购物" class="headerlink" title="[HAOI2008] 硬币购物"></a><a href="https://www.luogu.com.cn/problem/P1450">[HAOI2008] 硬币购物</a></h3><p>背包+容斥。首先求出没有任何限制下每种价值的方案数，设 $dp_s$ 表示价值为 $s$ 的方案数。子集枚举计算哪些硬币超出限制，若钦定第 $i$ 中硬币超出限制，则该硬币至少总价值为 $c_i\times (d_i+1)$，容斥计算即可。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,c[<span class="number">4</span>],d[<span class="number">4</span>],s;</span><br><span class="line">ll dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(c[<span class="number">0</span>],c[<span class="number">1</span>],c[<span class="number">2</span>],c[<span class="number">3</span>],n);</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=c[i];j&lt;=<span class="number">1e5</span>;j++)</span><br><span class="line">            dp[j]+=dp[j-c[i]];</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">read</span>(d[<span class="number">0</span>],d[<span class="number">1</span>],d[<span class="number">2</span>],d[<span class="number">3</span>],s);</span><br><span class="line">        ll ans=dp[s];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;<span class="number">4</span>);i++)&#123;</span><br><span class="line">            ll sum=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">                <span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>) sum+=c[j]*(d[j]<span class="number">+1ll</span>),++cnt;</span><br><span class="line">            <span class="type">int</span> k=cnt&amp;<span class="number">1</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(s-sum&lt;<span class="number">0</span>||sum==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ans+=k*dp[s-sum];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="Devu-and-Flowers"><a href="#Devu-and-Flowers" class="headerlink" title="Devu and Flowers"></a><a href="https://codeforces.com/problemset/problem/451/E">Devu and Flowers</a></h3><p>在无限制时，通过隔板可以得到答案为 $\dbinom{n+s-1}{n-1}$，若加上限制则考虑容斥。枚举子集，则状态 $S$ 中所有子集元素均不合法的方案数为 $\dbinom{s-\sum_{i\in S}f_i-|S|-1}{n-1}$。这里不方便直接预处理阶乘算组合数，但是注意到 $\dbinom{n}{m}$ 中，$n$ 和 $m$ 相差不会太大，所以可以直接通分后暴力计算。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">25</span>,mod=<span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b=mod<span class="number">-2</span>)</span></span>&#123;</span><br><span class="line">    a%=mod;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">ll s,f[N],inv[N],ans,fact[N];</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll n,<span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>||m&lt;<span class="number">0</span>||n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i=n-m<span class="number">+1</span>;i&lt;=n;i++)</span><br><span class="line">        res=res*(i%mod)%mod;</span><br><span class="line">    <span class="keyword">return</span> res*inv[m]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,s);</span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fact[i]=fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[n]=<span class="built_in">qpow</span>(fact[n]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) inv[i]=inv[i<span class="number">+1</span>]*(i<span class="number">+1</span>)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">read</span>(f[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);i++)&#123;</span><br><span class="line">        <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        ll sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="keyword">if</span>(i&gt;&gt;j&amp;<span class="number">1</span>)</span><br><span class="line">                ++cnt,sum+=f[j];</span><br><span class="line">        <span class="type">int</span> k=cnt&amp;<span class="number">1</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">        ans=(ans+k*<span class="built_in">C</span>(s-sum-cnt+n<span class="number">-1</span>,n<span class="number">-1</span>)%mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,(ans+mod)%mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="CSP-S2019-江西-多叉堆"><a href="#CSP-S2019-江西-多叉堆" class="headerlink" title="[CSP-S2019 江西] 多叉堆"></a><a href="https://www.luogu.com.cn/problem/P5689">[CSP-S2019 江西] 多叉堆</a></h3><p>并查集+组合。考虑合并过程。根一定是 $0$，设合并前的大小为 $size_x$ 和 $size_y$，方案数为 $cnt_x$ 和 $cnt_y$，由于子树之间互不干扰，所以</p>
<script type="math/tex; mode=display">cnt_{sum}=cnt_x\cdot cnt_y\cdot \binom{size_x+size_y-1}{size_x}</script><details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> mod=<span class="number">1e9</span><span class="number">+7</span>,N=<span class="number">3e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b=mod<span class="number">-2</span>)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    a%=mod;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,q,fact[N],inv[N],siz[N],fa[N],cnt[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=<span class="built_in">find</span>(fa[x]);&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;<span class="keyword">return</span> (ll)fact[n]*inv[m]%mod*inv[n-m]%mod;&#125;</span><br><span class="line"><span class="type">int</span> op,x,y,ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,q);</span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fact[i]=(ll)fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv[n]=<span class="built_in">qpow</span>(fact[n]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) inv[i]=(ll)inv[i<span class="number">+1</span>]*(i<span class="number">+1</span>)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        fa[i]=i;</span><br><span class="line">        siz[i]=<span class="number">1</span>;</span><br><span class="line">        cnt[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="built_in">read</span>(op,x);</span><br><span class="line">        x=<span class="built_in">find</span>((x+ans)%n<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">read</span>(y);</span><br><span class="line">            y=<span class="built_in">find</span>((y+ans)%n<span class="number">+1</span>);</span><br><span class="line">            fa[x]=y;</span><br><span class="line">            siz[y]+=siz[x];</span><br><span class="line">            cnt[y]=(ll)cnt[y]*cnt[x]%mod*<span class="built_in">C</span>(siz[y]<span class="number">-1</span>,siz[x])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans=cnt[x];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="CEOI-2016-kangaroo"><a href="#CEOI-2016-kangaroo" class="headerlink" title="[CEOI 2016] kangaroo"></a><a href="https://www.luogu.com.cn/problem/P5999">[CEOI 2016] kangaroo</a></h3><p>连续段 DP，一种很强的东西。$dp_{i,j}$ 表示考虑放前 $i$ 个数，构成 $j$ 个合法连续段的方案数。在加入一个数时，可以有以下几种情况：  </p>
<ul>
<li>并入某一个块，$dp_{i-1,j}\times j$ 种情况。  </li>
<li>自成一个新块，$dp_{i-1,j-1}\times j$ 种情况。  </li>
<li>将原来的两个块连接，合并成一个块，$dp_{i-1,j+1}\times j$ 种情况。<br>特判 $s$ 和 $t$ 的限制。<br><details><summary>code</summary>

</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e3</span><span class="number">+10</span>,mod=<span class="number">1e9</span><span class="number">+7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,s,t,dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,s,t);dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==s||i==t) dp[i][j]=(dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i][j]=(ll)(j-(i&gt;s)-(i&gt;t))*dp[i<span class="number">-1</span>][j<span class="number">-1</span>]%mod;</span><br><span class="line">                dp[i][j]=(dp[i][j]+(ll)dp[i<span class="number">-1</span>][j<span class="number">+1</span>]*j)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dp[n][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&lt;/details&gt;</p>
<h3 id="CSP-S2019-Emiya-家今天的饭"><a href="#CSP-S2019-Emiya-家今天的饭" class="headerlink" title="[CSP-S2019] Emiya 家今天的饭"></a><a href="https://www.luogu.com.cn/problem/P5664">[CSP-S2019] Emiya 家今天的饭</a></h3><p>考虑使用总方案数减不合法方案数得到答案。总方案数为</p>
<script type="math/tex; mode=display">\prod_{i=1}^n\left(1+
\sum_{j=1}^ma_{i,j}\right)-1</script><p>由于超过 $\lfloor\dfrac{k}{2}\rfloor$ 的食材最多只可能有一个，所以考虑直接枚举是哪一个食材超限。$dp_{i,j}$ 表示前 $i$ 种烹饪方案选菜后，选择的菜品数与已选的总数之差为 $j$，转移见代码</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">110</span>,M=<span class="number">2010</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">int</span> n,m,a[N][M],sum[N],dp[N][N&lt;&lt;<span class="number">1</span>];</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m);</span><br><span class="line">    ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(a[i][j]);</span><br><span class="line">            sum[i]=(sum[i]+a[i][j])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=ans*(sum[i]<span class="number">+1</span>)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=(ans<span class="number">-1</span>+mod)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">        dp[<span class="number">0</span>][n]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=n-j;k&lt;=n+j;k++)</span><br><span class="line">                dp[j][k]=(dp[j<span class="number">-1</span>][k]+(ll)dp[j<span class="number">-1</span>][k<span class="number">-1</span>]*a[j][i]%mod+(ll)dp[j<span class="number">-1</span>][k<span class="number">+1</span>]*(sum[j]-a[j][i]+mod)%mod)%mod;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            ans=(ans-dp[n][j+n]+mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day13"><a href="#Day13" class="headerlink" title="Day13"></a>Day13</h1><p>摆摆摆。</p>
<h1 id="Day14-15"><a href="#Day14-15" class="headerlink" title="Day14/15"></a>Day14/15</h1><h2 id="单调队列优化-DP"><a href="#单调队列优化-DP" class="headerlink" title="单调队列优化 DP"></a>单调队列优化 DP</h2><p><del>没错又是我。</del>   </p>
<h3 id="HAOI2007-修筑绿化带"><a href="#HAOI2007-修筑绿化带" class="headerlink" title="[HAOI2007] 修筑绿化带"></a><a href="https://www.luogu.com.cn/problem/P2219">[HAOI2007] 修筑绿化带</a></h3><p>我们可以将所有 $C\times D$ 的矩形权值和缩为一个点记录在二维平面上（例如记录在 $C\times D$ 矩形的右下角），那么题目就是对于每一个 $A\times B$，在二维平面上取一个矩形内的最小值，这可以使用单调队列。具体地，按行扫一遍，记录答案，然后再按列扫一遍即可。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,m,a,b,c,d,x[N][N],sum[N][N],l,r,minn[N][N],ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> val,id;&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">val</span><span class="params">(<span class="type">int</span> t1,<span class="type">int</span> t2,<span class="type">int</span> t3,<span class="type">int</span> t4)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[t3][t4]-sum[t1<span class="number">-1</span>][t4]-sum[t3][t2<span class="number">-1</span>]+sum[t1<span class="number">-1</span>][t2<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,a,b,c,d);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="built_in">read</span>(x[i][j]);</span><br><span class="line">            sum[i][j]=sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>]+x[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=c;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=d;j&lt;=m;j++)</span><br><span class="line">            minn[i][j]=<span class="built_in">val</span>(i-c<span class="number">+1</span>,j-d<span class="number">+1</span>,i,j);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&gt;=minn[i][j]) --r;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;j-q[l].id&gt;=b-d<span class="number">-1</span>) ++l;</span><br><span class="line">            q[++r]=&#123;minn[i][j],j&#125;;</span><br><span class="line">            minn[i][j]=q[l].val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&gt;=minn[j][i]) --r;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;j-q[l].id&gt;=a-c<span class="number">-1</span>) ++l;</span><br><span class="line">            q[++r]=&#123;minn[j][i],j&#125;;</span><br><span class="line">            minn[j][i]=q[l].val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=b;j&lt;=m;j++)</span><br><span class="line">            ans=<span class="built_in">max</span>(ans,<span class="built_in">val</span>(i-a<span class="number">+1</span>,j-b<span class="number">+1</span>,i,j)-minn[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="HAOI2007-理想的正方形"><a href="#HAOI2007-理想的正方形" class="headerlink" title="[HAOI2007] 理想的正方形"></a><a href="https://www.luogu.com.cn/problem/P2216">[HAOI2007] 理想的正方形</a></h3><details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,m,a[N][N],minn[N][N],maxn[N][N],l,r,x,ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;<span class="type">int</span> val,id;&#125;q[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,m,x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        <span class="built_in">read</span>(a[i][j]),minn[i][j]=maxn[i][j]=a[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;j-q[l].id<span class="number">+1</span>&gt;x) ++l;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&gt;minn[i][j]) --r;</span><br><span class="line">            q[++r]=&#123;minn[i][j],j&#125;;</span><br><span class="line">            minn[i][j]=q[l].val;</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;j-q[l].id<span class="number">+1</span>&gt;x) ++l;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&lt;maxn[i][j]) --r;</span><br><span class="line">            q[++r]=&#123;maxn[i][j],j&#125;;</span><br><span class="line">            maxn[i][j]=q[l].val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;j-q[l].id<span class="number">+1</span>&gt;x) ++l;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&gt;minn[j][i]) --r;</span><br><span class="line">            q[++r]=&#123;minn[j][i],j&#125;;</span><br><span class="line">            minn[j][i]=q[l].val;</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;j-q[l].id<span class="number">+1</span>&gt;x) ++l;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;=r&amp;&amp;q[r].val&lt;maxn[j][i]) --r;</span><br><span class="line">            q[++r]=&#123;maxn[j][i],j&#125;;</span><br><span class="line">            maxn[j][i]=q[l].val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=x;j&lt;=m;j++)</span><br><span class="line">            ans=<span class="built_in">min</span>(ans,maxn[i][j]-minn[i][j]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="斜率优化-DP"><a href="#斜率优化-DP" class="headerlink" title="斜率优化 DP"></a>斜率优化 DP</h2><p>给定一个长为 $n$ 的序列，每个位置 $i$ 有 $a<em>i,b_i$，$a_i$ 单调递增。<br>对每个位置 $i$ 求 $\max</em>{j&lt;i}(a_jc_i+b_j)$。<br>当 $c_i$ 单调时，显然可以使用单调队列 $O(n)$ 解决。<br>对于每一个 $a_i,b_i$，都对应一条直线 $y=a_ix+b_i$，直接使用单调队列维护一个上凸壳。  </p>
<h3 id="HNOI2008-玩具装箱"><a href="#HNOI2008-玩具装箱" class="headerlink" title="[HNOI2008] 玩具装箱"></a><a href="https://www.luogu.com.cn/problem/P3195">[HNOI2008] 玩具装箱</a></h3><p>设 $dp_i$ 表示考虑前 $i$ 个玩具时的最小总费用，设 $sum_i$ 表示 $C_i$ 的前缀和，容易得到状态转移方程</p>
<script type="math/tex; mode=display">dp_i=\min_{j=0}^{i-1}(dp_j+((sum_i-sum_j)+(i-j-1)-L)^2)</script><p>设 $s_i=sum_i+i,L’=L+1$，方程改写为</p>
<script type="math/tex; mode=display">\begin{aligned}
dp_i&=\min_{j=0}^{i-1}(dp_j+(s_i-s_j-L')^2)\\
&=s_i^2-2L's_i+\min_{j=0}^{i-1}(-2s_is_j+dp_j+s_j^2+2L's_j)
\end{aligned}</script><p>容易发现，斜率 $a_j=-2s_j$，截距 $b_j=dp_j+s_j^2+2L’s_j$，这样就可以使用单调队列优化了。时间复杂度 $O(n)$。  </p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">5e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,L,c[N],l,r,q[N];</span><br><span class="line">ll sum[N],dp[N],s[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">X</span><span class="params">(<span class="type">int</span> j)</span></span>&#123;<span class="keyword">return</span> s[j];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Y</span><span class="params">(<span class="type">int</span> j)</span></span>&#123;<span class="keyword">return</span> dp[j]+s[j]*s[j]<span class="number">+2</span>*(L<span class="number">+1</span>)*s[j];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">slope</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">double</span>)(<span class="built_in">Y</span>(j)-<span class="built_in">Y</span>(i))/(<span class="built_in">X</span>(j)-<span class="built_in">X</span>(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n,L);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">read</span>(c[i]),sum[i]=sum[i<span class="number">-1</span>]+c[i],s[i]=sum[i]+i;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line">    q[++r]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r&amp;&amp;<span class="built_in">slope</span>(q[l],q[l<span class="number">+1</span>])&lt;=<span class="number">2</span>*s[i]) ++l;</span><br><span class="line">        <span class="type">int</span> j=q[l];</span><br><span class="line">        dp[i]=dp[j]+(s[i]-s[j]-(L<span class="number">+1</span>))*(s[i]-s[j]-(L<span class="number">+1</span>));</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r&amp;&amp;<span class="built_in">slope</span>(q[r<span class="number">-1</span>],q[r])&gt;=<span class="built_in">slope</span>(q[r<span class="number">-1</span>],i)) --r;</span><br><span class="line">        q[++r]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,dp[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h2 id="数位-DP"><a href="#数位-DP" class="headerlink" title="数位 DP"></a>数位 DP</h2><h3 id="SCOI2009-windy-数（加强版）"><a href="#SCOI2009-windy-数（加强版）" class="headerlink" title="[SCOI2009] windy 数（加强版）"></a><a href="https://www.luogu.com.cn/problem/P13085">[SCOI2009] windy 数（加强版）</a></h3><p>$dp_{i,j,0/1}$ 表示前 $i$ 位数（高位），第 $i$ 位为 $j$，是/否被最大限制时的方案数。其中 $j=10$ 表示高位前导 $0$。</p>
<details>
<summary>code</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll dp[<span class="number">20</span>][<span class="number">11</span>][<span class="number">2</span>],a,b;</span><br><span class="line">string s;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="type">int</span> pos,<span class="type">int</span> pre,<span class="type">bool</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos==(<span class="type">int</span>)s.<span class="built_in">length</span>()) <span class="keyword">return</span> (pre!=<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span>(dp[pos][pre][limit]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[pos][pre][limit];</span><br><span class="line">    <span class="type">int</span> up=limit?s[pos]-<span class="string">&#x27;0&#x27;</span>:<span class="number">9</span>;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=up;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre==<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>) res+=<span class="built_in">dfs</span>(pos<span class="number">+1</span>,<span class="number">10</span>,limit&amp;&amp;(i==up));</span><br><span class="line">            <span class="keyword">else</span> res+=<span class="built_in">dfs</span>(pos<span class="number">+1</span>,i,limit&amp;&amp;(i==up));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(i-pre)&gt;=<span class="number">2</span>)</span><br><span class="line">            res+=<span class="built_in">dfs</span>(pos<span class="number">+1</span>,i,limit&amp;&amp;(i==up));</span><br><span class="line">    &#125;</span><br><span class="line">    dp[pos][pre][limit]=res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">    s=<span class="built_in">to_string</span>(x);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">solve</span>(b)-<span class="built_in">solve</span>(a<span class="number">-1</span>)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<h1 id="Day16-17"><a href="#Day16-17" class="headerlink" title="Day16/17"></a>Day16/17</h1><h2 id="思维技巧"><a href="#思维技巧" class="headerlink" title="思维技巧"></a>思维技巧</h2><p>qmd 学长真的很强啊 orz。<br>讲了一种很强的思维方式：<strong>观察终态</strong>。<br>终态一般代指某个函数/解的形态。  </p>
<ul>
<li><p>一些题目中需要观察解长什么样子，<strong>寻找解可行的必要条件</strong>，并尝试证明它们是充要的。这种思路常用于无法通过简单方式描述解的场合。  </p>
</li>
<li><p>另一些题目中需要调整，<strong>找到并剔除可能出现的不优的结构</strong>。这种思路常用于解集过于庞大，合法解缺少特殊性的场合。  </p>
</li>
<li><p>还有一些题目中需要<strong>观察解的上下界</strong>。应用场合为<strong>最优化或构造</strong>问题。  </p>
</li>
</ul>
<h3 id="LIS-on-Tree-2"><a href="#LIS-on-Tree-2" class="headerlink" title="LIS on Tree 2"></a><a href="https://atcoder.jp/contests/arc175/tasks/arc175_d">LIS on Tree 2</a></h3><p>首先排列是假的，我们直接考虑 dfs 序。LIS 难以以较低复杂度求出，我们重点关注 $f(i)$。一个重要的限制是</p>
<script type="math/tex; mode=display">f(fa_i)\le f(i)\le f(fa_i)+1,</script><script type="math/tex; mode=display">f(1)=1,</script><p>这样，我们就可以将树划分为若干连通块，每个块内的点对答案贡献相同。构造连通块的方式就是将连通块内的 dfs 序反转，这样就只保留了连通块根部的贡献。这样问题就转化为选择一些子树，使得它们的 $size$ 之和等于 $K$。那么，按照 $size$ 从大到小贪心地选是正确的，证明考虑剥叶子。这主要运用了第一个思想。  </p>
<p>另一种方法叫做<strong>规约</strong>。</p>
<ul>
<li><p>首先我们需要解决一个问题，称为问题 1；  </p>
</li>
<li><p>再加如一个问题 2；  </p>
</li>
<li><p>若任何能解决问题 1 的算法都能解决问题 2，则说明问题 2 是<strong>不强于</strong>问题 1 的；</p>
</li>
</ul>
<p>以上就是规约的步骤。容易发现，它实质上是对问题的转化。  </p>
<h3 id="Delete-AAB-or-BAA"><a href="#Delete-AAB-or-BAA" class="headerlink" title="Delete AAB or BAA"></a><a href="https://atcoder.jp/contests/agc066/tasks/agc066_c">Delete AAB or BAA</a></h3><p>规约：考虑将原问题转化为：给一个只含 <code>A</code> 和 <code>B</code> 的串，按照 <code>AAB</code> 或 <code>BAA</code> 的形式删除，问能否删成空串。尝试观察终态，发现：  </p>
<ul>
<li><p>一个子串能被删空的必要条件是 <code>A</code> 的数量是 <code>B</code> 数量的 $2$ 倍；  </p>
</li>
<li><p>若一个串被切成两个子串，且这两个子串能被删空，则它也必然能被删空；  </p>
</li>
</ul>
<p>根据观察 2，我们考虑不能被断开但是能被删空的串 <code>ABAAAB</code> 如何描述。<br>结论：  </p>
<ul>
<li>符合观察 1，且串首位不同的串是可被删空的串。  </li>
</ul>
<p>接下来研究原问题：<br>约定：$[l,r]$ 表示 $S$ 从 $S_l$ 到 $S_r$ 之间含 $S_l,S_r$ 的子串。<br>考虑 dp。设 $f_i$ 表示 $[1,i]$ 中最多执行的操作数。转移：</p>
<script type="math/tex; mode=display">f_i=\max(f_{i-1},\max_{i\le j\le \lfloor i/3\rfloor \land [i-3j+1,i] 能被删空}f_{i-3j}+j)</script>]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
  <entry>
    <title>树链剖分</title>
    <url>/2025/07/04/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/</url>
    <content><![CDATA[<p>我们发现：在树上维护一些信息不方便我们套用一些数据结构，但树链剖分可以将树分割为若干条链。树链剖分的方式有很多种，在算法竞赛中，应用最广泛的是重链剖分。<br>一般使用线段树维护。<br>定义：<br>重子节点为当前节点的所有儿子中子树最大的子节点，从这个节点到重子节点的边叫做重边，重边相连构成重链。与之对应地，有轻子节点，轻边。<br><img src="https://github.com/headless-piston/blog_images/blob/main/heavy-light%20decomposition.png?raw=true" alt="image"></p>
<p>树链剖分的实现使用了 2 遍 dfs，分别记录了不同信息。</p>
<h3 id="dfs1"><a href="#dfs1" class="headerlink" title="dfs1"></a>dfs1</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">	dep[u]=dep[f]<span class="number">+1</span>;<span class="comment">//深度 </span></span><br><span class="line">	siz[u]=<span class="number">1</span>;<span class="comment">//子树大小 </span></span><br><span class="line">	fa[u]=f;<span class="comment">//父节点 </span></span><br><span class="line">	<span class="type">int</span> maxson=<span class="number">-1</span>;<span class="comment">//子节点中最大的siz，也就是重儿子所对的siz </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v!=f)&#123;</span><br><span class="line">			<span class="built_in">dfs1</span>(v,u);</span><br><span class="line">			siz[u]+=siz[v];</span><br><span class="line">			<span class="keyword">if</span>(siz[v]&gt;maxson)&#123;</span><br><span class="line">				son[u]=v;<span class="comment">//重儿子 </span></span><br><span class="line">				maxson=siz[v];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里，维护了每个节点的深度，父节点和子树大小最大的子节点。</p>
<h3 id="dfs2"><a href="#dfs2" class="headerlink" title="dfs2"></a>dfs2</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> topf)</span></span>&#123;</span><br><span class="line">	dfn[u]=++cnt;<span class="comment">//dfn序，也就是线段树上的编号 </span></span><br><span class="line">	top[u]=topf;<span class="comment">//当前树链的最顶端节点 </span></span><br><span class="line">	w1[cnt]=w[u];<span class="comment">//新的权值 </span></span><br><span class="line">	<span class="keyword">if</span>(!son[u])</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">dfs2</span>(son[u],topf);<span class="comment">//重儿子的处理 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(v!=fa[u]&amp;&amp;v!=son[u])<span class="comment">//轻儿子的处理 </span></span><br><span class="line">			<span class="built_in">dfs2</span>(v,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里，维护了每个节点的 dfn，每个节点所在重链的链顶和使用 dfn 编号的点权。<br>使用 dfn 的原因是 dfn 可以保证同一子树内的点在一个连续的区间内，方便使用数据结构进行维护。</p>
<h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>树链剖分完毕后，我们就可以借助数据结构求任意点 $x$ 的子树的相关信息。<br>例如，查询子树所有节点权值之和。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//维护区间和的线段树</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[x]+siz[x]<span class="number">-1</span>));</span><br></pre></td></tr></table></figure><br>可以证明，$x$ 的子树所对的区间是 $x$ 的 dfn 到 $x$ 的 dfn 加 $x$ 的子树大小减 $1$。</p>
<p>树链剖分还有一个强大的功能：求 LCA。<br>不断向上跳重链，当跳到同一条重链上时，深度较小的结点即为 LCA。<br>向上跳重链时需要先跳所在重链顶端深度较大的那个。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(top[u]!=top[v])&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[top[u]]&gt;dep[top[v]])</span><br><span class="line">			u=fa[top[u]];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			v=fa[top[v]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[u]&gt;dep[v]?v:u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>类似地，我们就可以对任意点 $x$ 到 $y$ 路径上的点权进行查询和修改。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">tree_sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="comment">//x到y路径上的和 </span></span><br><span class="line">	<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">			std::<span class="built_in">swap</span>(x,y);</span><br><span class="line">		ans=(ans+<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[x]],dfn[x]))%p;</span><br><span class="line">		x=fa[top[x]];<span class="comment">//跳到链顶的父节点 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">		std::<span class="built_in">swap</span>(x,y);</span><br><span class="line">	ans=(ans+<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[y]))%p;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tree_add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> k)</span></span>&#123;<span class="comment">//x到y最短路径上所有节点值加k </span></span><br><span class="line">	<span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">		<span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">			std::<span class="built_in">swap</span>(x,y);</span><br><span class="line">		<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[top[x]],dfn[x],k);</span><br><span class="line">		x=fa[top[x]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(dep[x]&gt;dep[y])</span><br><span class="line">		std::<span class="built_in">swap</span>(x,y);</span><br><span class="line">	<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[y],k);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>*注：对 $p$ 取模是题目要求。</p>
<p>如果边权下放点权维护边信息，不想累加 LCA 处的贡献，可以这么写：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])</span><br><span class="line">            <span class="built_in">swap</span>(x,y);</span><br><span class="line">        res+=<span class="built_in">query</span>(dfn[top[x]],dfn[x]);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[x]&gt;dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">if</span>(x!=y) res+=<span class="built_in">query</span>(dfn[x]<span class="number">+1</span>,dfn[y]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>树链剖分的复杂度为 $O(\log n)$。而且一般情况下跑不满且常数极小。</p>
<p><a href="https://www.luogu.com.cn/problem/P3384" title="模板">模板</a></p>
<p><a href="https://oi-wiki.org/graph/hld/" title="参考资料">参考资料</a></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>根号大杂烩</title>
    <url>/2025/07/21/%E6%A0%B9%E5%8F%B7%E5%A4%A7%E6%9D%82%E7%83%A9/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我今天就是死在这，调 $\log$ 调到红温爆炸，我也不会碰根号一下的！<br>……（学习根号之后）……<br>真香……  </p>
<h2 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h2><p>把一个数组简单地划分为几块，若操作范围覆盖整块则整体操作，反之则暴力操作。由均值不等式可证，块长取 $\sqrt{n}$ 可得到最优理论复杂度。<br>是一个度数 $\sqrt{n}$，只有三层的树。   ——lxl<br>由于可以暴力操作且具有简单的结构，它有着比树形数据结构更为灵活的优势。同时，它还具有常数小的优势。  </p>
<h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h2><p>以下是比较板的题：  </p>
<ul>
<li><p><a href="https://www.luogu.com.cn/problem/P3372">【模板】线段树 1</a>，跑的比递归式线段树快。  </p>
</li>
<li><p><a href="https://www.luogu.com.cn/problem/P2801">教主的魔法</a>，分块+二分答案，单次查询复杂度 $O(\sqrt{n}\log n)$。  </p>
</li>
<li><p><a href="https://www.luogu.com.cn/problem/P5356">[Ynoi Easy Round 2017] 由乃打扑克</a>，分块+二分答案+二分查找。  </p>
</li>
</ul>
<p>以下是比较有挑战的题：  </p>
<h3 id="SNOI2022-军队"><a href="#SNOI2022-军队" class="headerlink" title="[SNOI2022] 军队"></a><a href="https://www.luogu.com.cn/problem/P8360">[SNOI2022] 军队</a></h3><p>题意简述：区间相同颜色加，区间两种颜色合并，区间求和。<br>注意到块内的颜色数单调不增。因此我们每个块内维护一个森林，叶子节点即为每个城市，向上代表颜色。接下来详细讲解各种操作：  </p>
<ul>
<li><p>整块：  </p>
<ul>
<li>颜色加：直接在颜色节点打 $tag$。  </li>
<li>颜色合并：若两种颜色都存在则新建父节点，将两种颜色合并上去，否则直接改颜色。可以证明最多新建 $2$ 倍叶子节点数量的节点数。  </li>
</ul>
</li>
<li><p>散块：<br>全部依靠暴力重构操作。  </p>
<ul>
<li>颜色加：重构期间判断新颜色，直接加。  </li>
<li>颜色合并：重构期间记录新颜色，直接合并。  </li>
</ul>
</li>
</ul>
<p>如果重构部分写 pushdown 状物复杂度是线性的，如果从底加到顶要带个 $\log$。不过带 $\log$ 也能过。<br>可以离线后逐块处理实现线性空间。  </p>
<h3 id="Ynoi2018-五彩斑斓的世界"><a href="#Ynoi2018-五彩斑斓的世界" class="headerlink" title="[Ynoi2018] 五彩斑斓的世界"></a><a href="https://www.luogu.com.cn/problem/P4117">[Ynoi2018] 五彩斑斓的世界</a></h3><p>突刺贯穿的第二分块。<br>解法：分块+并查集。开一个值域大小的并查集，这样我们就可以 $O(1)$ 修改所有块内相同的值。同时通过维护 $siz$ 数组来快速查询某数出现的次数，且可以随并查集的合并而合并。<br>接下来进行复杂度分析。注意到，对于本题的修改操作，块内的最大值 $maxn$ 单调不增。$maxn$ 最大为 $10^5+1$，$m$ 最大为 $5\times 10^5$，可以视为均摊 $O(1)$。<br>对于整块的修改操作，我们分两种情况讨论：<br>当 $2x\ge maxn$ 时，令所有大于 $x$ 的数减去 $x$，此时暴力更新 $maxn$。<br>当 $2x&lt; maxn$ 时，令所有小于等于 $x$ 的数加上 $x$，再将块上的 $tag$ 加 $x$，表示真实值为整体减 $tag$。<br>对于散块，暴力拆散原来的并查集，直接修改并更新 $maxn$ 就好。<br>整块更新是均摊 $O(1)$，散块更新是均摊 $O(\sqrt n)$。<br>同上一道题，离线后逐块处理以实现线性空间。<br>以上方法无法正确处理 $a_i=0$ 的情况。注意到，修改操作不会产生新的 $0$，所以直接在一开始用前缀和处理掉 $0$ 的询问，之后就不用管了。  </p>
<h2 id="莫队"><a href="#莫队" class="headerlink" title="莫队"></a>莫队</h2><p>很神的技巧。对于一些题目，如果所求的东西难以用常规数据结构维护且可以离线，那就可以尝试莫队。我们可以来看模板题 <a href="https://www.luogu.com.cn/problem/P1494">[国家集训队] 小 Z 的袜子</a>。<br>考虑维护双指针 $l,r$ 表示当前考虑区间 $[l,r]$，我们可以容易地从 $[l-1,r],[l+1,r],[l,r-1],[l,r+1]$ 转移过来。那么在移动指针的同时 $O(1)$ 修改当前的每种颜色袜子数的平方和即可。设当前某颜色的袜子数为 $x_i$，答案就是  </p>
<script type="math/tex; mode=display">\frac{\sum x_i^2+\sum x_i}{(r-l+1)(r-l)}</script><p>现在考虑优化以减少指针移动次数。将询问离线，并将 $n$ 分块，以询问左端点所在块编号为第一关键字，右端点为第二关键字升序排序。这样做的时间复杂度是 $O(n\sqrt{m})$ 的。<br>时间复杂度证明：<br>序列长度为 $n$，询问次数为 $m$。<br>首先证明最优块长。设块长为 $len$，则总块数为 $\dfrac{n}{len}$，左指针共移动 $O(m\cdot len)$ 次，右指针共移动 $O(\dfrac{n^2}{len})$ 次。总共移动 $m\cdot len+\dfrac{n^2}{len}$ 次。由均值不等式，有</p>
<script type="math/tex; mode=display">m\cdot len+\frac{n^2}{len}\ge 2n\sqrt{m}</script><p>当且仅当 $m\cdot len=\dfrac{n^2}{len}$ 时等号成立，此时 $len=\dfrac{n}{\sqrt{m}}$。<br>代入，得</p>
<script type="math/tex; mode=display">m\cdot len+\frac{n^2}{len}=2n\sqrt{m}</script><p>故时间复杂度 $O(n\sqrt{m})$。<br>以下是一些莫队技巧  </p>
<h3 id="奇偶排序优化"><a href="#奇偶排序优化" class="headerlink" title="奇偶排序优化"></a>奇偶排序优化</h3><p>在排序右端点时，若当前左端点块编号为奇数则升序排序，反之则降序排序。  </p>
<h3 id="关于指针移动顺序"><a href="#关于指针移动顺序" class="headerlink" title="关于指针移动顺序"></a>关于指针移动顺序</h3><p>由于莫队经常要维护桶，在指针移动时若先执行 delete 操作，容易访问桶的负下标造成 RE，所以建议先写 add 操作再写 delete 操作。</p>
<h3 id="莫队-值域分块"><a href="#莫队-值域分块" class="headerlink" title="莫队+值域分块"></a>莫队+值域分块</h3><p>值域分块 $O(1)$ 单点修改的特性很适合莫队。<br>习题：  </p>
<ul>
<li><p><a href="https://www.luogu.com.cn/problem/P4396">[AHOI2013] 作业</a></p>
</li>
<li><p><a href="https://www.luogu.com.cn/problem/P12598">参数要吉祥</a></p>
</li>
</ul>
<h3 id="莫队-bitset"><a href="#莫队-bitset" class="headerlink" title="莫队+bitset"></a>莫队+bitset</h3><p>和值域分块类似，但是更好写一些。<br>习题：  </p>
<ul>
<li><p><a href="https://www.luogu.com.cn/problem/P4137">Rmq Problem / mex</a></p>
</li>
<li><p><a href="https://www.luogu.com.cn/problem/P3674">小清新人渣的本愿</a></p>
</li>
</ul>
<h3 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h3><p>模板题 <a href="https://www.luogu.com.cn/problem/P1903">[国家集训队] 数颜色 / 维护队列</a>。<br>现在仅 $l,r$ 不足以表达当前状态，需要加上时间维度，即 $l,r,t$。<br>现在排序以左端点所在块为第一关键字，右端点所在块为第二关键字，时间为第三关键字。设 $n,m,t$ 同阶，块长设为 $n^{2/3}$，可得到理论最优时间复杂度 $O(n^{5/3})$。详细证明及 $n,m,t$ 不同阶时的具体分析较为繁琐，可以看 <a href="https://oi-wiki.org/misc/modifiable-mo-algo/">OI Wiki</a> 中的证明。  </p>
<h3 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h3><p>把树拍到欧拉序上，记录 $vis$ 数组表示当前选/不选节点，每次访问到节点时反转 $vis$ 即可。  </p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>笛卡尔树分治</title>
    <url>/2025/08/22/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<p>模拟赛时碰到了，感觉这个东西很优美啊，学习一下。<br>经典应用就是与区间最值算贡献相关的一类问题。<br>我们以 <a href="https://codeforces.com/problemset/problem/1156/E">Special Segments of Permutation</a> 这道题为例讲解一下这种技巧。<br>首先，我们可以将所有区间分为以 $p<em>1$ 为最大值的区间、以 $p_2$ 为最大值的区间……我们可以在整个序列中划出极长的一段 $[l,r]$，这一段的最大值所处的位置为 $mid$，则可以递归到 $[l,mid-1]$ 和 $[mid+1,r]$ 两端解决子问题。我们发现，笛卡尔树的结构完美符合递归的要求。我们可以考虑当前分治区间 $[l,r]$，区间最大值位置是 $mid$，则只需在 $[l,mid]$ 和 $[mid,r]$ 各选取一个端点即可得到一个以 $p</em>{mid}$ 为最大值的区间。这个过程有点像 cdq 分治的思想，总结一下：  </p>
<ul>
<li><p>找到区间最大值所在位置 $mid$；  </p>
</li>
<li><p>处理跨越 $mid$ 的区间，此时处理的区间最大值一定是 $p_{mid}$；  </p>
</li>
<li><p>递归处理子区间 $[l,mid-1]$ 和 $[mid+1,r]$。  </p>
</li>
</ul>
<p>考虑时间复杂度问题。由于区间不是对半均分，所以我们采用启发式的思想，保证统计答案时<strong>只枚举短区间</strong>，时间复杂度 $O(n\log n)$，否则时间复杂度可能退化至 $O(n^2)$。以本题为例，由于 $p<em>i$ 各不相同，所以可以直接处理出每个值对应的位置，假设 $[l,mid]$ 这一段较短，那么在这个区间内枚举 $i$，每次查询 $p</em>{mid}-p_i$ 是否在区间 $[mid,r]$ 内即可。可以不显式建出笛卡尔树，保证递归结构正确即可。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="type">bool</span> f=<span class="number">0</span>;x=<span class="number">0</span>;<span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        x=(x&lt;&lt;<span class="number">1</span>)+(x&lt;&lt;<span class="number">3</span>)+(ch^<span class="number">48</span>);</span><br><span class="line">        ch=<span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f) x=~x<span class="number">+1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>...Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x,Args &amp;...args)</span></span>&#123;<span class="built_in">read</span>(x);<span class="built_in">read</span>(args...);&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">2e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,p[N],b[N],ans,P;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> pos,val;</span><br><span class="line">    <span class="keyword">friend</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;x,<span class="type">const</span> node &amp;y)&#123;</span><br><span class="line">        <span class="keyword">return</span> x.val&lt;y.val?y:x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    l+=P<span class="number">-1</span>,r+=P<span class="number">+1</span>;</span><br><span class="line">    node res=&#123;&#125;;</span><br><span class="line">    <span class="keyword">while</span>(l^<span class="number">1</span>^r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(~l&amp;<span class="number">1</span>) res=res+tree[l^<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(r&amp;<span class="number">1</span>) res=res+tree[r^<span class="number">1</span>];</span><br><span class="line">        l&gt;&gt;=<span class="number">1</span>,r&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid=<span class="built_in">query</span>(l,r);</span><br><span class="line">    <span class="built_in">solve</span>(l,mid<span class="number">-1</span>),<span class="built_in">solve</span>(mid<span class="number">+1</span>,r);</span><br><span class="line">    <span class="keyword">if</span>(mid-l&lt;r-mid)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=mid;i++)&#123;</span><br><span class="line">            <span class="type">int</span> pos=b[p[mid]-p[i]];</span><br><span class="line">            ans+=(pos&gt;=mid&amp;&amp;pos&lt;=r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=mid;i&lt;=r;i++)&#123;</span><br><span class="line">            <span class="type">int</span> pos=b[p[mid]-p[i]];</span><br><span class="line">            ans+=(pos&gt;=l&amp;&amp;pos&lt;=mid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    P=<span class="number">1</span>;<span class="keyword">while</span>(P&lt;=n<span class="number">+1</span>) P&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">read</span>(p[i]);</span><br><span class="line">        b[p[i]]=i;</span><br><span class="line">        tree[P+i]=&#123;i,p[i]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=P<span class="number">-1</span>;i;i--) tree[i]=tree[i&lt;&lt;<span class="number">1</span>]+tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">solve</span>(<span class="number">1</span>,n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>习题：  </p>
<ul>
<li><p><a href="https://www.luogu.com.cn/problem/P4755">Beautiful Pair</a>  </p>
</li>
<li><p><a href="https://www.luogu.com.cn/problem/CF1175F">The Number of Subpermutations</a>  </p>
</li>
<li><p><a href="https://www.luogu.com.cn/problem/P9607">[CERC2019] Be Geeks!</a>  </p>
</li>
</ul>
<p>感谢 <a href="https://www.cnblogs.com/Kenma">@<em>Kenma</em></a> 提供题目！  </p>
]]></content>
      <tags>
        <tag>其他技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>双语歌词修复器</title>
    <url>/2025/07/14/%E5%8F%8C%E8%AF%AD%E6%AD%8C%E8%AF%8D%E4%BF%AE%E5%A4%8D%E5%99%A8/</url>
    <content><![CDATA[<p>lyh 大爷给的音乐网站相当好用，但是上面的歌词下载下来全 tm 有问题啊。这严重影响了开摆的体验……</p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="lrc-文件"><a href="#lrc-文件" class="headerlink" title="lrc 文件"></a>lrc 文件</h4><p>歌词文件的扩展名一般为 <code>.lrc</code>，电脑中的 music player 如 PotPlayer 在播放某音乐时会自动在与音乐文件相同的路径下查找同名 lrc 文件。如果查到，就会在播放音乐时同步渲染出歌词。<br>你可以直接用记事本打开 lrc 文件，然后就会发现里面的内容大约为这个格式：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[11:45.14]Wha↗t↘ can I↗↘say~</span><br><span class="line">[19:19.81]Man↗ba↗ o↗ut~</span><br></pre></td></tr></table></figure><br><code>[]</code> 内的东西叫做时间戳，表示应该啥时候渲染出这一句歌词。而如果是中英双语的歌词，大概是这样的：<br><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[11:45.14]Wha↗t↘ can I↗↘say~</span><br><span class="line">[11:45.14]我能说什么</span><br><span class="line">[19:19.81]Man↗ba↗ o↗ut~</span><br><span class="line">[19:19.81]曼巴出来</span><br></pre></td></tr></table></figure><br>对应的中文翻译的时间戳应当与英文的一样。  </p>
<h4 id="中文的编码方式"><a href="#中文的编码方式" class="headerlink" title="中文的编码方式"></a>中文的编码方式</h4><p>我们知道英文可以用 ASCII 码，每个字符 $1$ 字节，然而中文的编码一般是每个字占 $2$ 字节甚至更多，正常程序中对中文字符串的某位进行处理可能导致表示同一个字的多字节中的其中一个改变，而其他的没变，最终变为乱码。  </p>
<h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>我们发现，从网站上下载下来的歌词文件长这样：  </p>
<details>
<summary>Take Me Hand-DAISHI DANCE&Cécile Corbel.lrc</summary>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[00:00.0]Take Me Hands - DAISHI DANCE/</span><br><span class="line">[00:23.83] </span><br><span class="line">[00:23.83]Lyrics by：Cecile Corbel</span><br><span class="line">[00:36.89] </span><br><span class="line">[00:36.89]Composed by：DAISHI DANCE/Tomoharu Moriya</span><br><span class="line">[00:59.59] </span><br><span class="line">[00:59.59]In my dreams</span><br><span class="line">[01:01.49]在我的梦里</span><br><span class="line">[01:01.49]I feel your light</span><br><span class="line">[01:03.38]我感受到了你的光芒</span><br><span class="line">[01:03.38]I feel love is born again</span><br><span class="line">[01:07.01]我感受到了爱的重生</span><br><span class="line">[01:07.01]Fireflies</span><br><span class="line">[01:09.020004]萤火虫</span><br><span class="line">[01:09.020004]In the moonlight</span><br><span class="line">[01:10.84]在月光下</span><br><span class="line">[01:10.84]Rising stars</span><br><span class="line">[01:14.479996]随着星星闪耀</span><br><span class="line">[01:14.479996]Remember</span><br><span class="line">[01:16.979996]记住</span><br><span class="line">[01:16.979996]The day</span><br><span class="line">[01:19.11]这个日子</span><br><span class="line">[01:19.11]I fell in love with you</span><br><span class="line">[01:22.03]我与你相爱</span><br><span class="line">[01:22.03]Darling won&#x27;t you break</span><br><span class="line">[01:26.12]亲爱的 你不会</span><br><span class="line">[01:26.12]My heart</span><br><span class="line">[01:29.979996]让我心碎</span><br><span class="line">[01:29.979996]Take my hand now</span><br><span class="line">[01:31.75]牵着我的手</span><br><span class="line">[01:31.75]Stay close to me</span><br><span class="line">[01:33.81]贴近我的心</span><br><span class="line">[01:33.81]Be my lover</span><br><span class="line">[01:35.68]做我的爱人</span><br><span class="line">[01:35.68]Won&#x27;t you let me go</span><br><span class="line">[01:37.53]你不会让我离开</span><br><span class="line">[01:37.53]Close your eyes now</span><br><span class="line">[01:39.5]现在 闭上你的双眼</span><br><span class="line">[01:39.5]And you will see</span><br><span class="line">[01:41.34]你将会看到</span><br><span class="line">[01:41.34]There&#x27;s a rainbow</span><br><span class="line">[01:43.21]有一道彩虹</span><br><span class="line">[01:43.21]For you and me</span><br><span class="line">[01:59.64]专属你我</span><br><span class="line">[01:59.64]As I wake up</span><br><span class="line">[02:01.58]当我醒来</span><br><span class="line">[02:01.58]I see your face</span><br><span class="line">[02:03.49]看着你的脸庞</span><br><span class="line">[02:03.49]I feel love is born again</span><br><span class="line">[02:07.02]我感受到了爱的重生</span><br><span class="line">[02:07.02]Cherry blossom</span><br><span class="line">[02:08.9]樱花烂漫</span><br><span class="line">[02:08.9]Flying birds</span><br><span class="line">[02:10.84]鸟儿飞翔</span><br><span class="line">[02:10.84]In the sky</span><br><span class="line">[02:14.64]在天空里</span><br><span class="line">[02:14.64]Can&#x27;t you see</span><br><span class="line">[02:16.85]你是否看得见</span><br><span class="line">[02:16.85]The sun</span><br><span class="line">[02:18.34]阳光</span><br><span class="line">[02:18.34]That is shining on the fields</span><br><span class="line">[02:22.12]照射着大地</span><br><span class="line">[02:22.12]Is it shining in</span><br><span class="line">[02:26.33]它是否照射进</span><br><span class="line">[02:26.33]Your heart</span><br><span class="line">[02:29.99]你的心里</span><br><span class="line">[02:29.99]Take my hand now</span><br><span class="line">[02:31.75]牵着我的手</span><br><span class="line">[02:31.75]Stay close to me</span><br><span class="line">[02:33.81]贴近我的心</span><br><span class="line">[02:33.81]Be my lover</span><br><span class="line">[02:35.68]做我的爱人</span><br><span class="line">[02:35.68]Won&#x27;t you let me go</span><br><span class="line">[02:37.54001]你不会让我离开</span><br><span class="line">[02:37.54001]Close your eyes now</span><br><span class="line">[02:39.52]现在 闭上你的双眼</span><br><span class="line">[02:39.52]And you will see</span><br><span class="line">[02:41.33]你将会看到</span><br><span class="line">[02:41.33]There&#x27;s a rainbow</span><br><span class="line">[02:43.20999]有一道彩虹</span><br><span class="line">[02:43.20999]For you and me</span><br><span class="line">[02:59.65]专属你我</span><br><span class="line">[02:59.65]And I dream of you</span><br><span class="line">[03:03.36]我都梦见你</span><br><span class="line">[03:03.36]Every night</span><br><span class="line">[03:06.95]在每一个夜晚</span><br><span class="line">[03:06.95]Cause&#x27;s there only you</span><br><span class="line">[03:10.9]因为 是否只有你</span><br><span class="line">[03:10.9]In my mind</span><br><span class="line">[03:14.49]在我的心里</span><br><span class="line">[03:14.49]Will you be</span><br><span class="line">[03:16.99]你会是</span><br><span class="line">[03:16.99]A stranger or a friend in my life</span><br><span class="line">[03:22.13]我生命中的陌生人 还是一个朋友</span><br><span class="line">[03:22.13]Darling won&#x27;t you break</span><br><span class="line">[03:25.9]亲爱的 你不会</span><br><span class="line">[03:25.9]My heart</span><br><span class="line">[03:29.99]让我心碎</span><br><span class="line">[03:29.99]Take my hand now</span><br><span class="line">[03:31.75]牵着我的手</span><br><span class="line">[03:31.75]Stay close to me</span><br><span class="line">[03:33.83]贴近我的心</span><br><span class="line">[03:33.83]Be my lover</span><br><span class="line">[03:35.67]做我的爱人</span><br><span class="line">[03:35.67]Won&#x27;t you let me go</span><br><span class="line">[03:37.52]你不会让我离开</span><br><span class="line">[03:37.52]Close your eyes now</span><br><span class="line">[03:39.47]现在 闭上你的双眼</span><br><span class="line">[03:39.47]And you will see</span><br><span class="line">[03:41.33]你将会看到</span><br><span class="line">[03:41.33]There&#x27;s a rainbow</span><br><span class="line">[03:43.2]有一道彩虹</span><br><span class="line">[03:43.2]For you and me</span><br><span class="line">[03:45.0]专属你我</span><br><span class="line">[03:45.0]Take my hand now</span><br><span class="line">[03:46.75]牵着我的手</span><br><span class="line">[03:46.75]Stay close to me</span><br><span class="line">[03:48.8]贴近我的心</span><br><span class="line">[03:48.8]Be my lover</span><br><span class="line">[03:50.67]做我的爱人</span><br><span class="line">[03:50.67]Won&#x27;t you let me go</span><br><span class="line">[03:52.52]你不会让我离开</span><br><span class="line">[03:52.52]Close your eyes now</span><br><span class="line">[03:54.51]现在 闭上你的双眼</span><br><span class="line">[03:54.51]And you will see</span><br><span class="line">[03:56.33]你将会看到</span><br><span class="line">[03:56.33]There&#x27;s a rainbow</span><br><span class="line">[03:58.19]有一道彩虹</span><br><span class="line">[03:58.19]For you and me</span><br><span class="line">[03:59.7]专属你我</span><br><span class="line">[03:59.7]Darling take my hand now</span><br><span class="line">[04:02.3]牵着我的手</span><br><span class="line">[04:02.3]Stay close to me</span><br><span class="line">[04:03.86]贴近我的心</span><br><span class="line">[04:03.86]Be my lover</span><br><span class="line">[04:05.93]做我的爱人</span><br><span class="line">[04:05.93]Won&#x27;t you let me go</span><br><span class="line">[04:07.35]不要放开我的手</span><br><span class="line">[04:07.35]Close your eyes now</span><br><span class="line">[04:08.76]现在 闭上你的双眼</span><br><span class="line">[04:08.76]And you will see</span><br><span class="line">[04:11.34]你将会看到</span><br><span class="line">[04:11.34]There&#x27;s a rainbow</span><br><span class="line">[04:13.19]有一道彩虹</span><br><span class="line">[04:13.19]For you and me</span><br><span class="line">[04:13.21]专属你我</span><br></pre></td></tr></table></figure>
</details>

<p>问题主要有两个：  </p>
<ol>
<li><p>全错位了，除了第一行，其他每行都应使用上一行的时间戳  </p>
</li>
<li><p>有的时间戳长的吓人，这样的时间戳会导致渲染错误。经我实测，删掉后面多余的部分对渲染没有影响，所以我们直接丢弃超出正常长度的部分就行。  </p>
</li>
</ol>
<p>所以我们编写程序对这种格式错误进行修复。<br>为了解决中文乱码问题，我们使用 <code>fstream</code> 而不是传统的 I/O 方式。  </p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">&quot;.lrc&quot;</span>,ios::binary)</span></span>;</span><br><span class="line">    <span class="function">ofstream <span class="title">out</span><span class="params">(<span class="string">&quot;fixed.lrc&quot;</span>,ios::binary)</span></span>;</span><br><span class="line">    out&lt;&lt;<span class="built_in">char</span>(<span class="number">0xEF</span>)&lt;&lt;<span class="built_in">char</span>(<span class="number">0xBB</span>)&lt;&lt;<span class="built_in">char</span>(<span class="number">0xBF</span>);<span class="comment">//防中文乱码</span></span><br><span class="line">    string line,last_time;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(in,line))&#123;</span><br><span class="line">        <span class="keyword">if</span>(line.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            out&lt;&lt;last_time&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> it=--line.<span class="built_in">end</span>();</span><br><span class="line">        <span class="keyword">while</span>(it!=line.<span class="built_in">begin</span>()&amp;&amp;*it==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            line.<span class="built_in">erase</span>(it--);<span class="comment">//去除行末空格</span></span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> pos=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(line[pos]==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">            s.<span class="built_in">push_back</span>(line[pos++]);</span><br><span class="line">            <span class="keyword">while</span>(pos&lt;(<span class="type">int</span>)line.<span class="built_in">length</span>()&amp;&amp;line[pos]!=<span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">                s.<span class="built_in">push_back</span>(line[pos++]);</span><br><span class="line">            <span class="keyword">if</span>(pos&lt;(<span class="type">int</span>)line.<span class="built_in">length</span>())</span><br><span class="line">                s.<span class="built_in">push_back</span>(line[pos++]);</span><br><span class="line">        &#125;<span class="comment">//截取时间戳</span></span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">length</span>()&gt;<span class="number">9</span>)</span><br><span class="line">            s.<span class="built_in">erase</span>(<span class="number">9</span>),s.<span class="built_in">push_back</span>(<span class="string">&#x27;]&#x27;</span>);<span class="comment">//限制时间戳长度</span></span><br><span class="line">        string content;</span><br><span class="line">        <span class="keyword">while</span>(pos&lt;(<span class="type">int</span>)line.<span class="built_in">length</span>())</span><br><span class="line">            content.<span class="built_in">push_back</span>(line[pos++]);</span><br><span class="line">        <span class="keyword">if</span>(f)&#123;<span class="comment">//第一行</span></span><br><span class="line">            out&lt;&lt;<span class="string">&quot;[00:00.0]&quot;</span>&lt;&lt;content&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            f=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!last_time.<span class="built_in">empty</span>()||!content.<span class="built_in">empty</span>())</span><br><span class="line">            out&lt;&lt;last_time&lt;&lt;content&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        last_time=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><p>创建 cpp 文件 <code>lrc_fix_tool.cpp</code> 并编译，将待修复歌词的文件名改为 <code>.lrc</code>（这个时候顺便复制原歌词文件名），与 <code>lrc_fix_tool.exe</code> 放在同一路径，运行程序，在相同路径下生成修复好的 <code>fixed.lrc</code>，这时再重命名回去就好啦。<br>经实测，刚才的问题歌词修改后为：</p>
<details>
<summary>Take Me Hand-DAISHI DANCE&Cécile Corbel.lrc</summary>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[00:00.0]Take Me Hands - DAISHI DANCE/</span><br><span class="line">[00:00.0]</span><br><span class="line">[00:23.83]Lyrics by：Cecile Corbel</span><br><span class="line">[00:23.83]</span><br><span class="line">[00:36.89]Composed by：DAISHI DANCE/Tomoharu Moriya</span><br><span class="line">[00:36.89]</span><br><span class="line">[00:59.59]In my dreams</span><br><span class="line">[00:59.59]在我的梦里</span><br><span class="line">[01:01.49]I feel your light</span><br><span class="line">[01:01.49]我感受到了你的光芒</span><br><span class="line">[01:03.38]I feel love is born again</span><br><span class="line">[01:03.38]我感受到了爱的重生</span><br><span class="line">[01:07.01]Fireflies</span><br><span class="line">[01:07.01]萤火虫</span><br><span class="line">[01:09.02]In the moonlight</span><br><span class="line">[01:09.02]在月光下</span><br><span class="line">[01:10.84]Rising stars</span><br><span class="line">[01:10.84]随着星星闪耀</span><br><span class="line">[01:14.47]Remember</span><br><span class="line">[01:14.47]记住</span><br><span class="line">[01:16.97]The day</span><br><span class="line">[01:16.97]这个日子</span><br><span class="line">[01:19.11]I fell in love with you</span><br><span class="line">[01:19.11]我与你相爱</span><br><span class="line">[01:22.03]Darling won&#x27;t you break</span><br><span class="line">[01:22.03]亲爱的 你不会</span><br><span class="line">[01:26.12]My heart</span><br><span class="line">[01:26.12]让我心碎</span><br><span class="line">[01:29.97]Take my hand now</span><br><span class="line">[01:29.97]牵着我的手</span><br><span class="line">[01:31.75]Stay close to me</span><br><span class="line">[01:31.75]贴近我的心</span><br><span class="line">[01:33.81]Be my lover</span><br><span class="line">[01:33.81]做我的爱人</span><br><span class="line">[01:35.68]Won&#x27;t you let me go</span><br><span class="line">[01:35.68]你不会让我离开</span><br><span class="line">[01:37.53]Close your eyes now</span><br><span class="line">[01:37.53]现在 闭上你的双眼</span><br><span class="line">[01:39.5]And you will see</span><br><span class="line">[01:39.5]你将会看到</span><br><span class="line">[01:41.34]There&#x27;s a rainbow</span><br><span class="line">[01:41.34]有一道彩虹</span><br><span class="line">[01:43.21]For you and me</span><br><span class="line">[01:43.21]专属你我</span><br><span class="line">[01:59.64]As I wake up</span><br><span class="line">[01:59.64]当我醒来</span><br><span class="line">[02:01.58]I see your face</span><br><span class="line">[02:01.58]看着你的脸庞</span><br><span class="line">[02:03.49]I feel love is born again</span><br><span class="line">[02:03.49]我感受到了爱的重生</span><br><span class="line">[02:07.02]Cherry blossom</span><br><span class="line">[02:07.02]樱花烂漫</span><br><span class="line">[02:08.9]Flying birds</span><br><span class="line">[02:08.9]鸟儿飞翔</span><br><span class="line">[02:10.84]In the sky</span><br><span class="line">[02:10.84]在天空里</span><br><span class="line">[02:14.64]Can&#x27;t you see</span><br><span class="line">[02:14.64]你是否看得见</span><br><span class="line">[02:16.85]The sun</span><br><span class="line">[02:16.85]阳光</span><br><span class="line">[02:18.34]That is shining on the fields</span><br><span class="line">[02:18.34]照射着大地</span><br><span class="line">[02:22.12]Is it shining in</span><br><span class="line">[02:22.12]它是否照射进</span><br><span class="line">[02:26.33]Your heart</span><br><span class="line">[02:26.33]你的心里</span><br><span class="line">[02:29.99]Take my hand now</span><br><span class="line">[02:29.99]牵着我的手</span><br><span class="line">[02:31.75]Stay close to me</span><br><span class="line">[02:31.75]贴近我的心</span><br><span class="line">[02:33.81]Be my lover</span><br><span class="line">[02:33.81]做我的爱人</span><br><span class="line">[02:35.68]Won&#x27;t you let me go</span><br><span class="line">[02:35.68]你不会让我离开</span><br><span class="line">[02:37.54]Close your eyes now</span><br><span class="line">[02:37.54]现在 闭上你的双眼</span><br><span class="line">[02:39.52]And you will see</span><br><span class="line">[02:39.52]你将会看到</span><br><span class="line">[02:41.33]There&#x27;s a rainbow</span><br><span class="line">[02:41.33]有一道彩虹</span><br><span class="line">[02:43.20]For you and me</span><br><span class="line">[02:43.20]专属你我</span><br><span class="line">[02:59.65]And I dream of you</span><br><span class="line">[02:59.65]我都梦见你</span><br><span class="line">[03:03.36]Every night</span><br><span class="line">[03:03.36]在每一个夜晚</span><br><span class="line">[03:06.95]Cause&#x27;s there only you</span><br><span class="line">[03:06.95]因为 是否只有你</span><br><span class="line">[03:10.9]In my mind</span><br><span class="line">[03:10.9]在我的心里</span><br><span class="line">[03:14.49]Will you be</span><br><span class="line">[03:14.49]你会是</span><br><span class="line">[03:16.99]A stranger or a friend in my life</span><br><span class="line">[03:16.99]我生命中的陌生人 还是一个朋友</span><br><span class="line">[03:22.13]Darling won&#x27;t you break</span><br><span class="line">[03:22.13]亲爱的 你不会</span><br><span class="line">[03:25.9]My heart</span><br><span class="line">[03:25.9]让我心碎</span><br><span class="line">[03:29.99]Take my hand now</span><br><span class="line">[03:29.99]牵着我的手</span><br><span class="line">[03:31.75]Stay close to me</span><br><span class="line">[03:31.75]贴近我的心</span><br><span class="line">[03:33.83]Be my lover</span><br><span class="line">[03:33.83]做我的爱人</span><br><span class="line">[03:35.67]Won&#x27;t you let me go</span><br><span class="line">[03:35.67]你不会让我离开</span><br><span class="line">[03:37.52]Close your eyes now</span><br><span class="line">[03:37.52]现在 闭上你的双眼</span><br><span class="line">[03:39.47]And you will see</span><br><span class="line">[03:39.47]你将会看到</span><br><span class="line">[03:41.33]There&#x27;s a rainbow</span><br><span class="line">[03:41.33]有一道彩虹</span><br><span class="line">[03:43.2]For you and me</span><br><span class="line">[03:43.2]专属你我</span><br><span class="line">[03:45.0]Take my hand now</span><br><span class="line">[03:45.0]牵着我的手</span><br><span class="line">[03:46.75]Stay close to me</span><br><span class="line">[03:46.75]贴近我的心</span><br><span class="line">[03:48.8]Be my lover</span><br><span class="line">[03:48.8]做我的爱人</span><br><span class="line">[03:50.67]Won&#x27;t you let me go</span><br><span class="line">[03:50.67]你不会让我离开</span><br><span class="line">[03:52.52]Close your eyes now</span><br><span class="line">[03:52.52]现在 闭上你的双眼</span><br><span class="line">[03:54.51]And you will see</span><br><span class="line">[03:54.51]你将会看到</span><br><span class="line">[03:56.33]There&#x27;s a rainbow</span><br><span class="line">[03:56.33]有一道彩虹</span><br><span class="line">[03:58.19]For you and me</span><br><span class="line">[03:58.19]专属你我</span><br><span class="line">[03:59.7]Darling take my hand now</span><br><span class="line">[03:59.7]牵着我的手</span><br><span class="line">[04:02.3]Stay close to me</span><br><span class="line">[04:02.3]贴近我的心</span><br><span class="line">[04:03.86]Be my lover</span><br><span class="line">[04:03.86]做我的爱人</span><br><span class="line">[04:05.93]Won&#x27;t you let me go</span><br><span class="line">[04:05.93]不要放开我的手</span><br><span class="line">[04:07.35]Close your eyes now</span><br><span class="line">[04:07.35]现在 闭上你的双眼</span><br><span class="line">[04:08.76]And you will see</span><br><span class="line">[04:08.76]你将会看到</span><br><span class="line">[04:11.34]There&#x27;s a rainbow</span><br><span class="line">[04:11.34]有一道彩虹</span><br><span class="line">[04:13.19]For you and me</span><br><span class="line">[04:13.19]专属你我</span><br></pre></td></tr></table></figure>
</details>

<p>打开 PotPlayer 播放，歌词正确渲染，问题解决。<br>如果是只有一种语言的歌词修个时间戳长度就好了。  </p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>感谢 <a href="https://www.luogu.com.cn/user/1389641"><em>Kenba</em></a> 提供“前置知识”部分的歌词。  </p>
<p><a href="https://www.cnblogs.com/Kenma"><em>Kenma</em></a> 说鲜花要有涩图，所以放一张：  </p>
<details>
<summary>作者：あめとゆき</summary>

![](https://github.com/headless-piston/blog_images/blob/main/%E3%81%82%E3%82%81%E3%81%A8%E3%82%86%E3%81%8D.jpg?raw=true)

</details>]]></content>
      <tags>
        <tag>鲜花</tag>
      </tags>
  </entry>
  <entry>
    <title>概率与期望</title>
    <url>/2025/07/04/%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9B/</url>
    <content><![CDATA[<p>引入：一个普通骰子，求投出点数的期望。</p>
<script type="math/tex; mode=display">E=\sum_i p_i w_i</script><p>其中，$p_i$ 表示事件 $i$ 发生的概率，$w_i$ 表示事件 $i$ 发生的收益，$E$ 为收益期望。<br>在这个题中，$E=\dfrac{1}{6}\times1+\dfrac{1}{6}\times2+\cdots+\dfrac{1}{6}\times6=3.5$。</p>
<h3 id="期望的线性性"><a href="#期望的线性性" class="headerlink" title="期望的线性性"></a>期望的线性性</h3><p>现有 $3$ 个骰子，求投一次这 $3$ 个骰子的点数之和的期望。对于本题，只要分别求出这 $3$ 个骰子的期望并加起来就可以了。这就是期望的线性性。</p>
<script type="math/tex; mode=display">E(x+y)=E(x)+E(y)</script><p>若 $x$ 和 $y$ 相互独立，则</p>
<script type="math/tex; mode=display">E(x)E(y)=E(xy)</script><p>对于常数 $k$ ，有</p>
<script type="math/tex; mode=display">E(kx)=kE(x)</script><h3 id="解题方式"><a href="#解题方式" class="headerlink" title="解题方式"></a>解题方式</h3><p>解决期望问题一般使用 DP 或高斯消元。</p>
<h3 id="例题-1"><a href="#例题-1" class="headerlink" title="例题 1"></a>例题 1</h3><p>现有 $1$ 个按钮，每按一次就会等概率返回 Yes 或 No，期望按多少次会返回 Yes？<br>答案为 $2$。<br>考虑第一次返回 Yes 的概率为 $\dfrac{1}{2}$，第二次返回 Yes 的概率为 $\dfrac{1}{4}$，第三次为 $\dfrac{1}{8}$……<br>则 $E=\dfrac{1}{2}\times 1+\dfrac{1}{4}\times 2+\dfrac{1}{8}\times 3+\cdots=2$。</p>
<h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题 2"></a>例题 2</h3><p>有 $n$ 种不同的邮票，想收集所有种类的邮票，每次只能买一张，且买到任何一种邮票是等概率的，为 $\dfrac{1}{n}$。每次购买花费 $1$ 元钱。现手中没有邮票，求买到所有种类邮票所花费钱数的期望。<br>考虑 DP。设 $f_x$ 表示已集齐 $x$ 张时的期望次数。对于第 $i$ 次购买，有 $\dfrac{i}{n}$ 的概率买重，$\dfrac{n-i}{n}$ 的概率不重。</p>
<script type="math/tex; mode=display">f_i=1+f_i\times \dfrac{i}{n}+f_{i+1}\times \dfrac{n-i}{n}</script><p>化简，得</p>
<script type="math/tex; mode=display">f_{i+1}=\dfrac{n}{n-i}-f_i</script><h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题 3"></a>例题 3</h3><p>有 $n$ 个奖品，$m$ 个人排队选礼物。对于每个人，他打开的盒子可能有礼物，也可能已经被之前的人取走。如果有礼物，取走礼物并放回盒子。求所有人期望取走多少个礼物。<br>考虑 DP。设 $f_i$ 表示前 $i$ 个人取走礼物个数的期望，则有</p>
<script type="math/tex; mode=display">f_1=1,f_i=f_{i-1}+\dfrac{n-f_{i-1}}{n}</script><p>或者考虑 $1$ 个礼物被拿走的概率，用 $n$ 乘上它即为答案。一个礼物被一个人拿走的概率为 $\dfrac{n-1}{n}$，进行 $m$ 轮，为 $(\dfrac{n-1}{n})^m$，则答案为 $n\times [1-{(\dfrac{n-1}{n})}^m]$。</p>
<h3 id="例题-4"><a href="#例题-4" class="headerlink" title="例题 4"></a><a href="https://www.luogu.com.cn/problem/P1654" title="例题 4">例题 4</a></h3><p>假设第 $i$ 位之前有 $q$ 个连续 $1$，则这个位置的贡献为 $(q+1)^3-q^3=3q^2+3q+1$。<br>所以我们需要维护 $q$ 和 $q^2$ 的期望。</p>
<script type="math/tex; mode=display">E_i(q)=p_i(E_{i-1}(q)+1)</script><script type="math/tex; mode=display">E_i(q^2)=p_i(E_{i-1}(q^2)+2E_{i-1}(q)+1)</script><p>总式子</p>
<script type="math/tex; mode=display">f_i=f_{i-1}+p_i(3E_{i-1}(q^2)+3E_{i-1}(q)+1)</script><p>已经很详细了就不放代码了。</p>
<h3 id="例题-5"><a href="#例题-5" class="headerlink" title="例题 5"></a><a href="https://www.luogu.com.cn/problem/P1850" title="例题 5">例题 5</a></h3><p>解决任意两个教室之间的体力消耗最小值，容易想到最短路算法，因本题需要多次查询不同两点间的最短路且 $v$ 较小，考虑使用 Floyd。<br>之后就是 DP，对每种情况进行分类讨论，设 $f<em>{i,j,0/1}$ 表示对于前 $i$ 门课，选择了 $j$ 门，最后选择的那门课否/是更换。$dis</em>{u,v}$ 表示 $u$ 和 $v$ 两点之间的最短路。<br>那么进行分类讨论<br>对于 $f<em>{i,j,0}$，若其之前的换了，则有 $f</em>{i-1,j,1}+k<em>{i-1}\times dis</em>{d<em>{i-1},c_i}$（换成功的期望）$+(1-k</em>{i-1})\times dis<em>{c</em>{i-1},c<em>i}$（换失败的期望），若之前的没换，则有 $f</em>{i-1,j,0}+dis<em>{c</em>{i-1},c<em>i}$（二者都不换）。<br>对于 $f</em>{i,j,1}$，情况复杂些</p>
<ul>
<li>之前的不换<ul>
<li>当前换成功 $k<em>i\times dis</em>{c_{i-1},d_i}$</li>
<li>当前换失败 $(1-k<em>i)\times dis</em>{c_{i-1},c_i}$</li>
</ul>
</li>
<li>之前的换<ul>
<li>之前与当前均成功 $k<em>{i-1}\times k_i\times dis</em>{d_{i-1},d_i}$</li>
<li>之前与当前均失败 $(1-k<em>{i-1})\times (1-k_i)\times dis</em>{c_{i-1},c_i}$</li>
<li>之前成功当前失败 $k<em>{i-1}\times (1-k_i)\times dis</em>{d_{i-1},c_i}$</li>
<li>之前失败当前成功 $(1-k<em>{i-1})\times k_i\times dis</em>{c_{i-1},d_i}$<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2010</span>,M=<span class="number">90010</span>;</span><br><span class="line"><span class="type">int</span> n,m,v,e;</span><br><span class="line"><span class="type">int</span> c[N],d[N],edge[<span class="number">310</span>][<span class="number">310</span>];</span><br><span class="line"><span class="type">double</span> k[N],dp[<span class="number">2010</span>][<span class="number">2010</span>][<span class="number">2</span>],ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(edge,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(edge));</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;v,&amp;e);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">			dp[i][j][<span class="number">0</span>]=dp[i][j][<span class="number">1</span>]=<span class="number">1145141919810</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,c+i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,d+i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,k+i);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=e;i++)&#123;</span><br><span class="line">		<span class="type">int</span> a,b,w;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;w);</span><br><span class="line">		edge[a][b]=<span class="built_in">min</span>(edge[a][b],w);</span><br><span class="line">		edge[b][a]=<span class="built_in">min</span>(edge[b][a],w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=v;i++)</span><br><span class="line">		edge[i][i]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> k1=<span class="number">1</span>;k1&lt;=v;k1++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=v;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=v;j++)</span><br><span class="line">				edge[i][j]=<span class="built_in">min</span>(edge[i][j],edge[i][k1]+edge[k1][j]);</span><br><span class="line">	dp[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>]=dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">			dp[i][j][<span class="number">0</span>]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j][<span class="number">1</span>]+k[i<span class="number">-1</span>]*edge[d[i<span class="number">-1</span>]][c[i]]+</span><br><span class="line">								(<span class="number">1</span>-k[i<span class="number">-1</span>])*edge[c[i<span class="number">-1</span>]][c[i]],</span><br><span class="line">							dp[i<span class="number">-1</span>][j][<span class="number">0</span>]+edge[c[i<span class="number">-1</span>]][c[i]]);</span><br><span class="line">			<span class="keyword">if</span>(j)&#123;</span><br><span class="line">				dp[i][j][<span class="number">1</span>]=<span class="built_in">min</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">1</span>]+k[i<span class="number">-1</span>]*k[i]*edge[d[i<span class="number">-1</span>]][d[i]]+</span><br><span class="line">									k[i<span class="number">-1</span>]*(<span class="number">1</span>-k[i])*edge[d[i<span class="number">-1</span>]][c[i]]+</span><br><span class="line">									(<span class="number">1</span>-k[i<span class="number">-1</span>])*k[i]*edge[c[i<span class="number">-1</span>]][d[i]]+</span><br><span class="line">									(<span class="number">1</span>-k[i<span class="number">-1</span>])*(<span class="number">1</span>-k[i])*edge[c[i<span class="number">-1</span>]][c[i]],</span><br><span class="line">								dp[i<span class="number">-1</span>][j<span class="number">-1</span>][<span class="number">0</span>]+k[i]*edge[c[i<span class="number">-1</span>]][d[i]]+</span><br><span class="line">									(<span class="number">1</span>-k[i])*edge[c[i<span class="number">-1</span>]][c[i]]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	ans=<span class="number">1145141919810</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">		ans=<span class="built_in">min</span>(ans,<span class="built_in">min</span>(dp[n][i][<span class="number">0</span>],dp[n][i][<span class="number">1</span>]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="例题-6"><a href="#例题-6" class="headerlink" title="例题 6"></a><a href="https://www.luogu.com.cn/problem/P1297" title="例题 6">例题 6</a></h3><p>考虑第 $i$ 道题和第 $i+1$ 道题。<br>若 $a<em>i=a</em>{i+1}$，则本题期望显然为 $\dfrac{1}{a<em>i}=\dfrac{1}{a</em>{i+1}}$。<br>若 $a<em>i&gt;a</em>{i+1}$，则 $a<em>i$ 的答案在 $a</em>{i+1}$ 范围内的概率为 $\dfrac{a<em>{i+1}}{a_i}$，期望为 $\dfrac{a</em>{i+1}}{a<em>i}\times \dfrac{1}{a</em>{i+1}}=\dfrac{1}{a<em>i}$。<br>若 $a_i&lt;a</em>{i+1}$，正确答案在 $a<em>{i}$ 范围内的概率为 $\dfrac{a_i}{a</em>{i+1}}$，期望为 $\dfrac{a<em>i}{a</em>{i+1}}\times \dfrac{1}{a<em>i}=\dfrac{1}{a</em>{i+1}}$。<br>综上，第 $i$ 道题的期望为 $\dfrac{1}{\max(a<em>i,a</em>{i+1})}$。求出每题期望累加即可。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>]=a[n];<span class="comment">//第一项的上一个是第n项</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	ans+=<span class="number">1.0</span>/<span class="built_in">max</span>(a[i<span class="number">-1</span>],a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf&quot;</span>,ans);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>珂朵莉树·颜色段均摊</title>
    <url>/2025/07/04/%E7%8F%82%E6%9C%B5%E8%8E%89%E6%A0%91%C2%B7%E9%A2%9C%E8%89%B2%E6%AE%B5%E5%9D%87%E6%91%8A/</url>
    <content><![CDATA[<p>这玩意名字也是真多，珂朵莉树，ODT（Old Driver Tree），颜色段均摊都是它。其实我觉得硬说这是一种数据结构（尤其是“树”）是不恰当的，这更多应该是一种技巧。<br>与线段树等传统数据结构的区别在于：它可以更方便地维护每个被覆盖区间的值。如模板题中的操作 4：求 $\sum_{i=l}^ra_i^x\bmod y$。<br>我很喜欢这个东西，它比线段树好写且在随机数据下表现十分优异。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>一般用 <code>std::set</code> 实现。似乎用链表可以省下一个 $\log$？不过能用到 ODT 的题应该不差这点时间。</p>
<h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="keyword">mutable</span> <span class="type">int</span> val;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> l,<span class="type">int</span> r=<span class="number">0</span>,<span class="type">int</span> val=<span class="number">0</span>):<span class="built_in">l</span>(l),<span class="built_in">r</span>(r),<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;x.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">set&lt;node&gt; odt;</span><br></pre></td></tr></table></figure>
<p>$l$ 和 $r$ 表示这一段的区间，$val$ 表示这一段的权值，使用 <code>mutable</code> 修饰是为了使得结构体或函数在被 <code>const</code> 修饰后仍能修改 $val$ 的值，这样，我们就可以直接修改在 <code>set</code> 内部的元素的 $val$。</p>
<h4 id="split"><a href="#split" class="headerlink" title="split"></a>split</h4><p>用于将一个区间为 $[l,r]$ 的区间分裂为 $[l,pos)$ 和 $[pos,r]$，并返回指向后者的迭代器的函数。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos&gt;n) <span class="keyword">return</span> odt.<span class="built_in">end</span>();</span><br><span class="line">    <span class="keyword">auto</span> it=odt.<span class="built_in">lower_bound</span>(<span class="built_in">node</span>(pos));</span><br><span class="line">    <span class="keyword">if</span>(it!=odt.<span class="built_in">end</span>()&amp;&amp;it-&gt;l==pos)</span><br><span class="line">        <span class="keyword">return</span> it;<span class="comment">//pos已是左端点，无需分割</span></span><br><span class="line">    it--;<span class="comment">//从上一个分割</span></span><br><span class="line">    <span class="type">int</span> l=it-&gt;l,r=it-&gt;r,val=it-&gt;val;</span><br><span class="line">    odt.<span class="built_in">erase</span>(it);<span class="comment">//删除原区间</span></span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(l,pos<span class="number">-1</span>,val));<span class="comment">//左区间</span></span><br><span class="line">    <span class="keyword">return</span> odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(pos,r,val)).first;<span class="comment">//右区间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>std::set::insert()</code> 返回一个 <code>std::pair&lt;iterator,bool&gt;</code>，表示插入元素的迭代器及插入是否成功。<br>现代编译器应当都可以将 <code>auto</code> 识别为 <code>std::set&lt;node&gt;::iterator</code>。</p>
<h4 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h4><p>用于区间赋值。同时也是时间复杂度的保证，以模板题为例，大约 $\dfrac{1}{4}$ 的操作调用了 <code>assign</code>，而这个操作可以大幅减小 <code>set</code> 的大小。<br><strong>特别注意：在截取 $[l,r]$ 时一定要先调用 <code>split(r+1)</code> 再调用 <code>split(l)</code>，否则可能导致 RE。</strong> 具体原因可以看<a href="https://oi-wiki.org/misc/odt/#assign-%E6%93%8D%E4%BD%9C" title="这里">这里</a>。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r<span class="number">+1</span>),itl=<span class="built_in">split</span>(l);<span class="comment">//截取[l,r]</span></span><br><span class="line">    odt.<span class="built_in">erase</span>(itl,itr);<span class="comment">//删除[l,r]</span></span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(l,r,val));<span class="comment">//插入新值</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a><a href="https://codeforces.com/problemset/problem/896/C" title="模板题">模板题</a></h3><p>对于 1 操作，3 操作和 4 操作，直接分离出对应区间后暴力求解。2 操作直接用 <code>assign</code>。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="keyword">mutable</span> ll val;</span><br><span class="line">    <span class="built_in">node</span>(<span class="type">int</span> l,<span class="type">int</span> r=<span class="number">0</span>,ll val=<span class="number">0</span>):<span class="built_in">l</span>(l),<span class="built_in">r</span>(r),<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> node &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> l&lt;x.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,<span class="type">int</span> b,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    a%=mod;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">            res=res*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;node&gt; odt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">split</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> it=odt.<span class="built_in">lower_bound</span>(<span class="built_in">node</span>(pos));</span><br><span class="line">    <span class="keyword">if</span>(it!=odt.<span class="built_in">end</span>()&amp;&amp;it-&gt;l==pos)</span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    it--;</span><br><span class="line">    <span class="type">int</span> l=it-&gt;l,r=it-&gt;r;</span><br><span class="line">    ll val=it-&gt;val;</span><br><span class="line">    odt.<span class="built_in">erase</span>(it);</span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(l,pos<span class="number">-1</span>,val));</span><br><span class="line">    <span class="keyword">return</span> odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(pos,r,val)).first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=(<span class="built_in">split</span>(r<span class="number">+1</span>)),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    odt.<span class="built_in">erase</span>(itl,itr);</span><br><span class="line">    odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(l,r,val));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r<span class="number">+1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    <span class="keyword">for</span>(;itl!=itr;itl++)</span><br><span class="line">        itl-&gt;val+=val;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">kth</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r<span class="number">+1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    vector&lt;pair&lt;ll,<span class="type">int</span>&gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span>(;itl!=itr;itl++)</span><br><span class="line">        b.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(itl-&gt;val,itl-&gt;r-itl-&gt;l<span class="number">+1</span>));</span><br><span class="line">    <span class="built_in">sort</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:b)&#123;</span><br><span class="line">        k-=t.second;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> t.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> mod)</span></span>&#123;</span><br><span class="line">    ll res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> itr=<span class="built_in">split</span>(r<span class="number">+1</span>),itl=<span class="built_in">split</span>(l);</span><br><span class="line">    <span class="keyword">for</span>(;itl!=itr;itl++)</span><br><span class="line">        res=(res+(<span class="built_in">qpow</span>(itl-&gt;val,x,mod)*(itl-&gt;r-itl-&gt;l<span class="number">+1</span>))%mod)%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> n,m,seed,vmax,a[N],op,x,y,l,r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rnd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret=seed;</span><br><span class="line">    seed=(seed*<span class="number">7ll</span><span class="number">+13</span>)%<span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;seed&gt;&gt;vmax;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        a[i]=(<span class="built_in">rnd</span>()%vmax)<span class="number">+1</span>;</span><br><span class="line">        odt.<span class="built_in">insert</span>(<span class="built_in">node</span>(i,i,a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        op=(<span class="built_in">rnd</span>()%<span class="number">4</span>)<span class="number">+1</span>;</span><br><span class="line">        l=(<span class="built_in">rnd</span>()%n)<span class="number">+1</span>;</span><br><span class="line">        r=(<span class="built_in">rnd</span>()%n)<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">            <span class="built_in">swap</span>(l,r);</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">            x=(<span class="built_in">rnd</span>()%(r-l<span class="number">+1</span>))<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            x=(<span class="built_in">rnd</span>()%vmax)<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">4</span>)</span><br><span class="line">            y=(<span class="built_in">rnd</span>()%vmax)<span class="number">+1</span>;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">add</span>(l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">assign</span>(l,r,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)</span><br><span class="line">            cout&lt;&lt;<span class="built_in">kth</span>(l,r,x)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout&lt;&lt;<span class="built_in">sum</span>(l,r,x,y)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><del>十年 OI 一场空，不开 long long 见祖宗。</del></p>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>我们可以从模板题中发现，这玩意除区间赋值外都需要暴力，所以是一种暴力数据结构。对于模板题，均摊时间复杂度 $O(m\log n)$。其时间复杂度保证完全依赖于 <code>assign</code>，所以仅适用于数据随机生成且带区间赋值操作的题。比如区间染色问题。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/EdisonBa/p/13509379.html">https://oi-wiki.org/misc/odt/</a></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>自我介绍</title>
    <url>/2025/07/04/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>HE 高二 OIer。没实力还爱狗叫。贺题解高手。文化课菜逼。<br><strong>我真不是二次元！</strong></p>
<hr>
<p>Welcome to my blog!<br>欢迎大家阅读文章，如文章有错误之处请联系我进行修正。</p>
]]></content>
  </entry>
  <entry>
    <title>线性代数入门</title>
    <url>/2025/07/04/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><h4 id="运算法则"><a href="#运算法则" class="headerlink" title="运算法则"></a>运算法则</h4><h5 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h5><p>两个矩阵 $A$ 和 $B$ 相加，要求它们的维度相同。结果矩阵 $C=A+B$ 的每个元素是 $A$ 和 $B$ 对应元素的和。$C<em>{i,j}=A</em>{i,j}+B_{i,j}$</p>
<h5 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h5><p>矩阵 $A$ 与标量 $k$ 相乘，结果矩阵 $B=kA$ 的每个元素是 $A$ 的对应元素乘以 $k$。$B<em>{i,j}=k\cdot A</em>{i,j}$</p>
<h5 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h5><p>矩阵 $A$ 与矩阵 $B$ 相乘，要求 $A$ 的列数等于 $B$ 的行数。结果矩阵 $C=AB$ 的每个元素是 $A$ 的行向量与 $B$ 的列向量的点积。$C<em>{i,j}=\sum</em>{k=1}^nA<em>{i,k}\cdot B</em>{k,j}$<br><strong>注意：矩阵乘法不满足交换律</strong></p>
<h4 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h4><p>其实和普通快速幂几乎一样。<br>我们要使用单位矩阵</p>
<script type="math/tex; mode=display">I=\begin{bmatrix}
1&0&\cdots&0\\
0&1&\cdots&0\\
\vdots&\vdots&\ddots&\vdots\\
0&0&\cdots&1
\end{bmatrix}</script><p>作为初始矩阵。因为它乘任何矩阵还得跟它乘的那个矩阵，类似于 $1$ 在普通快速幂中的作用。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line">	<span class="built_in">matrix</span>()&#123;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in">sizeof</span>(a));</span><br><span class="line">	&#125;</span><br><span class="line">	matrix <span class="keyword">operator</span>*(<span class="type">const</span> matrix &amp;b)<span class="type">const</span>&#123;</span><br><span class="line">		matrix res;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">					res.a[i][j]=(res.a[i][j]+a[i][k]*b.a[k][j]%mod)%mod;</span><br><span class="line">		<span class="keyword">return</span> res;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;ans,base,a;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		base.a[i][i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">matrix <span class="title">qpow</span><span class="params">(matrix a,<span class="type">long</span> <span class="type">long</span> b)</span></span>&#123;</span><br><span class="line">	matrix res=base;</span><br><span class="line">	<span class="keyword">while</span>(b)&#123;</span><br><span class="line">		<span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">			res=res*a;</span><br><span class="line">		a=a*a;</span><br><span class="line">		b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a.a[i][j]);</span><br><span class="line">	ans=<span class="built_in">qpow</span>(a,k);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans.a[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="矩阵加速线性递推"><a href="#矩阵加速线性递推" class="headerlink" title="矩阵加速线性递推"></a>矩阵加速线性递推</h4><p>例如斐波那契数列，$F<em>1=F_2=1$，$F_i=F</em>{i-1}+F_{i-2}$，矩阵递推形式为</p>
<script type="math/tex; mode=display">\begin{bmatrix}F_{n-1}&F_{n-2}\end{bmatrix}
\begin{bmatrix}1&1\\
1&0\end{bmatrix}=
\begin{bmatrix}F_n&F_{n-1}\end{bmatrix}</script><p>则 $F_n$ 就是 $\begin{bmatrix}1&amp;1\end{bmatrix}\begin{bmatrix}1&amp;1\1&amp;0\end{bmatrix}^{n-2}$ 的第一行第一列的元素。用矩阵快速幂即可。</p>
<h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><p>现有线性方程组</p>
<script type="math/tex; mode=display">\begin{cases}a_{1,1}x_1+a_{1,2}x_2+\cdots+a_{1,n}x_n=b_1\\
a_{2,1}x_1+a_{2,2}x_2+\cdots+a_{2,n}x_n=b_2\\
\cdots\\
a_{n,1}x_1+a_{n,2}x_2+\cdots+a_{n,n}x_n=b_n
\end{cases}</script><p>求解该方程组。<br>为了方便起见，我们用矩阵表示方程组：</p>
<script type="math/tex; mode=display">\left[\begin{matrix}a_{1,1}&a_{1,2}&a_{1,3}&\cdots&a_{1,n}\\
a_{2,1}&a_{2,2}&a_{2,3}&\cdots&a_{2,n}\\
a_{3,1}&a_{3,2}&a_{3,3}&\cdots&a_{3,n}\\
\vdots&\vdots&\vdots&\ddots&\vdots\\
a_{n,1}&a_{n,2}&a_{n,3}&\cdots&a_{n,n}
\end{matrix}\middle|
\begin{matrix}
b_{1}\\
b_{2}\\
b_{3}\\
\vdots\\
b_{n}
\end{matrix}\right]</script><p>首先消去除 $1$ 式以外所有式子中的 $x_1$，然后消去除 $1$ 式和 $2$ 式外所有式子中的 $x_2$……最后式子变为一个三角形的结构</p>
<script type="math/tex; mode=display">\left[\begin{matrix}a_{1,1}'&a_{1,2}'&a_{1,3}'&\cdots&a_{1,n}'\\
0&a_{2,2}'&a_{2,3}'&\cdots&a_{2,n}'\\
0&0&a_{3,3}'&\cdots&a_{3,n}'\\
\vdots&\vdots&\vdots&\ddots&\vdots\\
0&0&0&\cdots&a_{n,n}'
\end{matrix}\middle|
\begin{matrix}
b_{1}'\\
b_{2}'\\
b_{3}'\\
\vdots\\
b_{n}'
\end{matrix}\right]</script><p>之后再一点点代回求解，时间复杂度 $O(n^3)$。<br>对于无解的判断：某一行前 $n$ 个数均为 $0$，最后的结果却不为 $0$。<br>对于无数解的判断：某一行 $n+1$ 个数均为 $0$。<br><a href="https://www.luogu.com.cn/problem/P3389" title="模板">模板</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="type">int</span> r=i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[r][i])&lt;<span class="built_in">fabs</span>(matrix[j][i]))</span><br><span class="line">			r=j;<span class="comment">//寻找主元 </span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[r][i])&lt;eps)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;No Solution&quot;</span>);<span class="comment">//若主元为0，方程组无解或无穷多解 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i!=r)</span><br><span class="line">		<span class="built_in">swap</span>(matrix[i],matrix[r]);</span><br><span class="line">	<span class="type">double</span> div=matrix[i][i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n<span class="number">+1</span>;j++)</span><br><span class="line">		matrix[i][j]/=div;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">		div=matrix[j][i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=n<span class="number">+1</span>;k++)</span><br><span class="line">			matrix[j][k]-=matrix[i][k]*div;</span><br><span class="line">	&#125;<span class="comment">//消元</span></span><br><span class="line">&#125;</span><br><span class="line">ans[n]=matrix[n][n<span class="number">+1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i;i--)&#123;</span><br><span class="line">	ans[i]=matrix[i][n<span class="number">+1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">		ans[i]-=matrix[i][j]*ans[j];</span><br><span class="line">&#125;<span class="comment">//回代</span></span><br></pre></td></tr></table></figure><br><a href="https://www.luogu.com.cn/problem/P2455" title="加强版">加强版</a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="type">int</span> pivot=rank1<span class="number">+1</span>;<span class="comment">//rank1为矩阵的秩 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=rank1<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[pivot][i])&lt;<span class="built_in">fabs</span>(matrix[j][i]))</span><br><span class="line">			pivot=j;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[pivot][i])&lt;eps)</span><br><span class="line">		<span class="keyword">continue</span>;<span class="comment">//全为零</span></span><br><span class="line">	<span class="keyword">if</span>(pivot!=rank1<span class="number">+1</span>)</span><br><span class="line">		<span class="built_in">swap</span>(matrix[pivot],matrix[rank1<span class="number">+1</span>]);</span><br><span class="line">	<span class="type">double</span> div=matrix[rank1<span class="number">+1</span>][i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=n<span class="number">+1</span>;j++)</span><br><span class="line">		matrix[rank1<span class="number">+1</span>][j]/=div;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(j==rank1<span class="number">+1</span>||<span class="built_in">fabs</span>(matrix[j][i])&lt;eps)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		div=matrix[j][i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=n<span class="number">+1</span>;k++)</span><br><span class="line">			matrix[j][k]-=matrix[rank1<span class="number">+1</span>][k]*div;</span><br><span class="line">	&#125;<span class="comment">//消元</span></span><br><span class="line">	rank1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=rank1<span class="number">+1</span>;i&lt;=n;i++)</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">fabs</span>(matrix[i][n<span class="number">+1</span>])&gt;eps)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//无解</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">if</span>(rank1&lt;n)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//无数解</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i;i--)&#123;</span><br><span class="line">	ans[i]=matrix[i][n<span class="number">+1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">		ans[i]-=matrix[i][j]*ans[j];</span><br><span class="line">&#125;<span class="comment">//回代</span></span><br></pre></td></tr></table></figure></p>
<h3 id="高斯-约旦消元"><a href="#高斯-约旦消元" class="headerlink" title="高斯-约旦消元"></a>高斯-约旦消元</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,line=<span class="number">1</span>,cur;i&lt;=n;i++)&#123;</span><br><span class="line">    cur=line;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=line<span class="number">+1</span>;j&lt;=n;j++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[j][i])&gt;<span class="built_in">fabs</span>(a[cur][i]))</span><br><span class="line">            cur=j;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[cur][i])&lt;eps) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">double</span> temp=a[cur][i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n<span class="number">+1</span>;j++)</span><br><span class="line">        <span class="built_in">swap</span>(a[cur][j],a[line][j]),a[line][j]/=temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        <span class="keyword">if</span>(j!=line)&#123;</span><br><span class="line">            temp=a[j][i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n<span class="number">+1</span>;k++)</span><br><span class="line">                a[j][k]-=a[line][k]*temp;</span><br><span class="line">        &#125;</span><br><span class="line">    ++line;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h3><p>引入：有 $n$ 个数，选出其中任意一些数，求其异或和，一共有多少种可能的异或值。</p>
<h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ol>
<li>原序列里面的任意一个数都可以表示为线性基的一个子集的异或和。</li>
<li>线性基任意一个子集的异或和都不能等于 $0$。</li>
<li>线性基里面的数的个数唯一，并且在保持性质 1 的前提下，数的个数是最少的。<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LBase</span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> d[<span class="number">61</span>];</span><br><span class="line">	<span class="built_in">LBase</span>()&#123;</span><br><span class="line">		<span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">insert</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(x&amp;<span class="number">1ll</span>&lt;&lt;i)&#123;</span><br><span class="line">				<span class="keyword">if</span>(d[i])</span><br><span class="line">					x^=d[i];</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					d[i]=x;</span><br><span class="line">					<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query_max</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> x=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			<span class="keyword">if</span>(d[i]&amp;&amp;(x^d[i])&gt;x)</span><br><span class="line">				x^=d[i];</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">const</span> LBase &amp;a)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			<span class="keyword">if</span>(a.d[i])</span><br><span class="line">				<span class="built_in">insert</span>(a.d[i]);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树</title>
    <url>/2025/08/20/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<p>最近被各种乱七八糟的根号整的有点魔怔。重新系统总结一下线段树。  </p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>线段树是一种维护<strong>区间信息</strong>的数据结构，绝大多数区间信息（如区间和，区间最值）都可以使用线段树高效维护。<br>若区间的合并操作是 $O(1)$ 的，则线段树单点修改、区间查询操作是 $O(\log n)$ 的。<br>若是带懒标记的线段树，如果懒标记下放操作是 $O(1)$ 的，则线段树区间修改操作是 $O(\log n)$ 的。<br>构建线段树最重要的操作是合并左右两个区间，也就是 push up 操作。<br>线段树的空间复杂度问题：<br>设有 $n$ 个叶子节点，线段树的深度是 $\lceil\log n\rceil$，按照堆式存储（即 $2u$ 是 $u$ 的左儿子，$2u+1$ 是 $u$ 的右儿子）的方式，总节点个数 $2^{\lceil\log n\rceil+1}-1$，在 $n$ 为 $2$ 的整次幂加 $1$ 时取到最大值 $4n-5$。所以平时线段树一定要开 $4$ 倍空间。<br>$k$ 叉线段树的复杂度为 $O(k\log_kn)$，其有 $O(\log_kn)$ 层，每层要对 $k$ 个节点进行操作。<br>常数中等。涉及区间修改且满足交换律的操作可以使用标记永久化减小常数。如果使用 zkw 线段树避免递归操作可以显著减小常数。<br>练手题：  </p>
<ul>
<li><p><a href="https://www.luogu.com.cn/problem/P3372">【模板】线段树 1</a>，最简单最基础的线段树。  </p>
</li>
<li><p><a href="https://www.luogu.com.cn/problem/P3373">【模板】线段树 2</a>，多个懒标记且涉及运算顺序的问题。  </p>
</li>
<li><p><a href="https://www.luogu.com.cn/problem/P1471">方差</a>，很板的题。  </p>
</li>
</ul>
<h3 id="经典套路"><a href="#经典套路" class="headerlink" title="经典套路"></a>经典套路</h3><h4 id="跨区间问题"><a href="#跨区间问题" class="headerlink" title="跨区间问题"></a>跨区间问题</h4><h5 id="小白逛公园"><a href="#小白逛公园" class="headerlink" title="小白逛公园"></a><a href="https://www.luogu.com.cn/problem/P4513">小白逛公园</a></h5><p>单点修改、区间最大子段和。<br>考虑如何合并两个区间。<br>新区间的最大子段和可能是左区间的最大子段和、右区间的最大子段和、左区间强制包含右端点的最大子段和加上右区间强制包含左端点的最大子段和。<br>区间强制包含左右端点的最大子段和可以通过区间和辅助维护。<br>总结一下，一个节点内需要维护：区间和、区间最大子段和、区间强制包含左端点的最大子段和、区间强制包含右端点的最大子段和。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum,maxn,maxl,maxr;</span><br><span class="line">    <span class="keyword">friend</span> node <span class="keyword">operator</span>+(<span class="type">const</span> node &amp;x,<span class="type">const</span> node &amp;y)&#123;</span><br><span class="line">        node res;</span><br><span class="line">        res.sum=x.sum+y.sum;</span><br><span class="line">        res.maxn=<span class="built_in">max</span>(&#123;x.maxn,y.maxn,x.maxr+y.maxl&#125;);</span><br><span class="line">        res.maxl=<span class="built_in">max</span>(x.maxl,x.sum+y.maxl);</span><br><span class="line">        res.maxr=<span class="built_in">max</span>(y.maxr,y.sum+x.maxr);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>trick：像这一类区间合并较为复杂的线段树，可以考虑将 <code>+</code> 重载，这样合并两个区间就更为方便了。<br><strong>一定注意，这里的合并没有交换律。</strong><br>习题：<br><a href="https://www.luogu.com.cn/problem/P2572">[SCOI2010] 序列操作</a>。  </p>
<h4 id="维护其他有结合律的信息"><a href="#维护其他有结合律的信息" class="headerlink" title="维护其他有结合律的信息"></a>维护其他有结合律的信息</h4><h5 id="国家集训队-等差子序列"><a href="#国家集训队-等差子序列" class="headerlink" title="[国家集训队] 等差子序列"></a><a href="https://www.luogu.com.cn/problem/P2757">[国家集训队] 等差子序列</a></h5><p>线段树维护哈希。  </p>
<h5 id="THUSC-2017-大魔法师"><a href="#THUSC-2017-大魔法师" class="headerlink" title="[THUSC 2017] 大魔法师"></a><a href="https://www.luogu.com.cn/problem/P7453">[THUSC 2017] 大魔法师</a></h5><p>线段树维护矩阵。常数较大。  </p>
<h4 id="势能分析"><a href="#势能分析" class="headerlink" title="势能分析"></a>势能分析</h4><p>一类题目看似操作复杂度很高，但是可以通过势能分析证明其复杂度是可接受的。  </p>
<h5 id="上帝造题的七分钟-2-花神游历各国"><a href="#上帝造题的七分钟-2-花神游历各国" class="headerlink" title="上帝造题的七分钟 2 / 花神游历各国"></a><a href="https://www.luogu.com.cn/problem/P4145">上帝造题的七分钟 2 / 花神游历各国</a></h5><p>区间开方是非常难以维护的操作，但是注意到一个数 $x$ 最多进行 $O(\log \log x)$ 次操作就可以变为 $1$，之后的操作不会使数变得更小。所以我们可以在每个节点维护一个 $tag$，若当前区间内所有数均为 $1$，那么直接返回。<br>所以总体时间复杂度为 $O(n\log \log V)$。  </p>
<h4 id="线段树优化建图"><a href="#线段树优化建图" class="headerlink" title="线段树优化建图"></a>线段树优化建图</h4><p>有时候需要在一个点和一个区间之间连边。这时可以利用线段树的区间性质，降低空间复杂度。  </p>
<h2 id="权值线段树"><a href="#权值线段树" class="headerlink" title="权值线段树"></a>权值线段树</h2><p>通俗的理解就是在桶数组上开线段树。可以高效查询第 $k$ 小等信息。  </p>
<h2 id="动态开点线段树"><a href="#动态开点线段树" class="headerlink" title="动态开点线段树"></a>动态开点线段树</h2><p>不再采用堆式存储，只在需要时，也就是第一次访问时创建节点。每个节点维护两个指针 $ls$ 和 $rs$，表示当前节点的左右儿子。此时线段树最多只会创建 $2n-1$ 个节点。不会像普通的堆式存储线段树一样存在空间浪费。<br>常数较大。<br>若需要区间修改，最好使用标记永久化以防止空间复杂度过大。  </p>
<h2 id="可持久化线段树"><a href="#可持久化线段树" class="headerlink" title="可持久化线段树"></a>可持久化线段树</h2><h3 id="可持久化数组"><a href="#可持久化数组" class="headerlink" title="可持久化数组"></a>可持久化数组</h3><p>开一个 $root$ 数组，表示不同的版本。线段树的叶子节点即为我们可持久化的数组。上层的节点仅为了维持线段树的结构而存在。由于单点修改最多创建 $O(\log n)$ 个节点，所以使用动态开点可以使得空间复杂度变得可接受。<br>可以使用可持久化数组实现可持久化并查集。注意不可使用路径压缩，否则会因为修改操作过多、创建过多新版本导致空间爆炸。<br>常数较大。  </p>
<h3 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h3><p>即可持久化权值线段树。可以解决的经典问题是静态区间第 $k$ 小问题。利用前缀和/差分思想进行主席树上二分。<br>常数较大。  </p>
<h2 id="线段树合并"><a href="#线段树合并" class="headerlink" title="线段树合并"></a>线段树合并</h2><p>可以处理类似主席树能处理的问题。还能处理一类树上问题。<br>常数较大。  </p>
<h2 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h2><p>用于维护多维信息。常数巨大。  </p>
<h2 id="李超线段树"><a href="#李超线段树" class="headerlink" title="李超线段树"></a>李超线段树</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>我们以<a href="https://www.luogu.com.cn/problem/P4097">模板题</a>为例讲解李超线段树工作原理。<br>首先我们有一个基于值域的线段树。<br>称一个线段在区间 $[l,r]$ 中最优当且仅当该线段完全覆盖 $[l,r]$ 且在 $mid$ 处的值为所有线段最大。<br>线段树上每个节点保存对应区间的最优线段。<strong>注意：区间的线段不能保证对于区间内所有点都取到最优。</strong><br>考虑在一个区间插入一个线段 $f$，若原区间有最优线段，设其为 $f’$：  </p>
<ul>
<li><p>若区间内原本没有线段，则直接令 $f$ 成为最优线段；  </p>
</li>
<li><p>若 $f$ 完全位于 $f’$ 上方（即“$f$ 严格优于 $f’$”），直接替换掉；  </p>
</li>
<li><p>反之，$f$ 不可能再成为最优线段，停止递归；  </p>
</li>
<li><p>若 $f$ 部分优于 $f’$，则二者交点必然在区间内。按区间 $mid$ 分开，则此时必然是：</p>
<ul>
<li><p>一个子区间内存在“严格优于”的关系；  </p>
</li>
<li><p>另一个子区间内是二者交点。递归更新。  </p>
</li>
</ul>
</li>
</ul>
<p>对于第 3 种情况，不是区间最优线段的线段也有可能成为这个区间的答案。  </p>
<p>单次查询操作时间复杂度 $O(\log n)$，全局修改时间复杂度 $O(\log n)$，区间修改时间复杂度 $O(\log^2n)$。李超线段树的常数较小。  </p>
<h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Abs</span><span class="params">(<span class="type">const</span> T &amp;x)</span></span>&#123;<span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">double</span> eps=<span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line">    <span class="type">double</span> k,b;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">Y</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="keyword">return</span> x*k+b;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segmenttree</span>&#123;</span><br><span class="line">    <span class="type">bool</span> flag;</span><br><span class="line">    line L;</span><br><span class="line">&#125;tree[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls (u&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs (u&lt;&lt;1|1)</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x,<span class="type">int</span> y,line p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;y&gt;=r)&#123;</span><br><span class="line">        <span class="type">double</span> ly1=tree[u].L.<span class="built_in">Y</span>(l),ry1=tree[u].L.<span class="built_in">Y</span>(r);</span><br><span class="line">        <span class="type">double</span> ly2=p.<span class="built_in">Y</span>(l),ry2=p.<span class="built_in">Y</span>(r);</span><br><span class="line">        <span class="keyword">if</span>(!tree[u].flag) tree[u].L=p,tree[u].flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ly2-ly1&gt;eps&amp;&amp;ry2-ry1&gt;eps) tree[u].L=p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ly2-ly1&gt;eps||ry2-ry1&gt;eps)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="type">double</span> midy1=tree[u].L.<span class="built_in">Y</span>(mid);</span><br><span class="line">            <span class="type">double</span> midy2=p.<span class="built_in">Y</span>(mid);</span><br><span class="line">            <span class="keyword">if</span>(midy2-midy1&gt;eps) <span class="built_in">swap</span>(tree[u].L,p);</span><br><span class="line">            <span class="keyword">if</span>(p.<span class="built_in">Y</span>(l)&gt;tree[u].L.<span class="built_in">Y</span>(l)) <span class="built_in">modify</span>(ls,l,mid,x,y,p);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) <span class="built_in">modify</span>(ls,l,mid,x,y,p);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) <span class="built_in">modify</span>(rs,mid<span class="number">+1</span>,r,x,y,p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Res</span>&#123;<span class="type">double</span> y;<span class="type">int</span> id;&#125;;</span><br><span class="line"><span class="function">Res <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    Res res=&#123;tree[u].L.<span class="built_in">Y</span>(x),tree[u].L.id&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)&#123;</span><br><span class="line">        Res resl=<span class="built_in">query</span>(ls,l,mid,x);</span><br><span class="line">        <span class="keyword">if</span>(resl.y&gt;res.y||(<span class="built_in">Abs</span>(resl.y-res.y)&lt;eps&amp;&amp;resl.id&lt;res.id))</span><br><span class="line">            res=resl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        Res resr=<span class="built_in">query</span>(rs,mid<span class="number">+1</span>,r,x);</span><br><span class="line">        <span class="keyword">if</span>(resr.y&gt;res.y||(<span class="built_in">Abs</span>(resr.y-res.y)&lt;eps&amp;&amp;resr.id&lt;res.id))</span><br><span class="line">            res=resr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Segment-Tree-Beats"><a href="#Segment-Tree-Beats" class="headerlink" title="Segment Tree Beats"></a>Segment Tree Beats</h2><p>没用。学了考场上也调不出来。  </p>
<hr>
<p>参考资料：</p>
<p><a href="https://oi-wiki.org/ds/seg/">https://oi-wiki.org/ds/seg/</a></p>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>近期安排</title>
    <url>/2025/07/21/%E8%BF%91%E6%9C%9F%E5%AE%89%E6%8E%92/</url>
    <content><![CDATA[<p>暑假集训的题看着写吧……其实可做的已经写的差不多了。<br>决定折腾折腾博客，删一些之前的劣质文章。  </p>
]]></content>
  </entry>
  <entry>
    <title>网络流</title>
    <url>/2025/07/04/%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
    <content><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>网络是有向图的一种，不同于其他有向图，一个网络有两个特殊的点<strong>源点（一般记作 $s$）</strong>和<strong>汇点（一般记作 $t$）</strong>，顾名思义，源点只有出边而汇点只有入边。同时，每条边有边权 $c$，表示<strong>容量</strong>，同时还映射一个值 $flow$，叫做<strong>流量</strong>。一种容易的理解方式是将边想象成不同大小的管道。值得注意的是，流量可以为负，这一般表示反向流动以及在一些算法中对先前流量分配的“撤销”。<br>残量网络：将容量已满的边删去，剩下的边构成的图就是残量网络。<br>增广路：从源点到汇点的一条路径，其中每条边都有剩余容量。  </p>
<h3 id="最大流问题"><a href="#最大流问题" class="headerlink" title="最大流问题"></a>最大流问题</h3><p>对于一个网络，找到最大的流量。  </p>
<h3 id="最小割问题"><a href="#最小割问题" class="headerlink" title="最小割问题"></a>最小割问题</h3><p>我们将网络上的一些边进行分割，使之分为两部分，一部分包含 $s$，另一部分包含 $t$，所有切割的边的容量和叫做网络的最小割。<br>例：现有网络</p>
<p><img src="https://github.com/headless-piston/blog_images/blob/main/network-flows_1.png?raw=true" alt="image"></p>
<p>其最小割为</p>
<p><img src="https://github.com/headless-piston/blog_images/blob/main/network-flows_2.png?raw=true" alt="image"></p>
<p>即 $3=2+1$。  </p>
<h3 id="最大流最小割定理"><a href="#最大流最小割定理" class="headerlink" title="最大流最小割定理"></a>最大流最小割定理</h3><p>对于一个网络，最大流总等于最小割。这个定理看似显然，实则并不好证。<a href="https://oi-wiki.org/graph/flow/max-flow/#%E6%9C%80%E5%A4%A7%E6%B5%81%E6%9C%80%E5%B0%8F%E5%89%B2%E5%AE%9A%E7%90%86" title="证明">证明</a>。</p>
<hr>
<p>接下来以<a href="https://www.luogu.com.cn/problem/P3376" title="最大流模板题">最大流模板题</a>为例讲解一些算法。  </p>
<h3 id="Edmonds-Karp-算法"><a href="#Edmonds-Karp-算法" class="headerlink" title="Edmonds-Karp 算法"></a>Edmonds-Karp 算法</h3><p>流程：</p>
<ul>
<li>从 $s$ 出发进行 BFS 尝试走到 $t$，即寻找增广路。</li>
<li>找到增广路后计算增广路上剩余容量的最小值 $f$，给增广路上每条边加上 $f$ 容量，并将它们的反向边退掉 $f$ 容量。</li>
<li>在新图上重复以上操作直到增广路不存在。</li>
</ul>
<p>时间复杂度 $O(nm^2)$。<br>关于反向边，有个小技巧，就是直接将正反两边的编号设为 $2n$ 和 $2n+1$，这样可以通过异或 $1$ 的操作快速完成正反边的转换。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">210</span>,M=<span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> head[N],tot=<span class="number">1</span>;<span class="comment">//因为要异或1所以初始化为1</span></span><br><span class="line"><span class="type">int</span> n,m,s,t;</span><br><span class="line"><span class="type">int</span> pre[N];<span class="comment">//路径的前驱节点</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> flow[N];<span class="comment">//各边剩余容量最小值</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> c;<span class="comment">//剩余容量</span></span><br><span class="line">&#125;e[M*<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> flag[N][N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">long</span> <span class="type">long</span> c)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].c=c;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	head[u]=tot;<span class="comment">//正向边</span></span><br><span class="line">	e[++tot].to=u;</span><br><span class="line">	e[tot].c=<span class="number">0</span>;</span><br><span class="line">	e[tot].nxt=head[v];</span><br><span class="line">	head[v]=tot;<span class="comment">//反向边</span></span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="built_in">sizeof</span>(pre));</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(s);</span><br><span class="line">	pre[s]=s;</span><br><span class="line">	flow[s]=inf;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(e[i].c==<span class="number">0</span>||pre[v])</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			flow[v]=<span class="built_in">min</span>(flow[u],e[i].c);</span><br><span class="line">			pre[v]=i;</span><br><span class="line">			q.<span class="built_in">push</span>(v);</span><br><span class="line">			<span class="keyword">if</span>(v==t)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> u,v;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> w;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">		<span class="keyword">if</span>(!flag[u][v])&#123;<span class="comment">//去重边</span></span><br><span class="line">			<span class="built_in">add_edge</span>(u,v,w);</span><br><span class="line">			flag[u][v]=tot;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			e[flag[u][v]^<span class="number">1</span>].c+=w;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> u=t;u!=s;u=e[pre[u]^<span class="number">1</span>].to)&#123;</span><br><span class="line">			e[pre[u]].c-=flow[t];</span><br><span class="line">			e[pre[u]^<span class="number">1</span>].c+=flow[t];</span><br><span class="line">		&#125;</span><br><span class="line">		ans+=flow[t];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Dinic-算法"><a href="#Dinic-算法" class="headerlink" title="Dinic 算法"></a>Dinic 算法</h3><p>个人认为这个更难理解一些。<br>流程：  </p>
<ul>
<li>在残量网络中进行 BFS 构建分层图。  </li>
<li>使用 DFS，每次找到 $t$ 后直接回溯更新边权。  </li>
</ul>
<p>使用分层图的原因是因为分层图是 DAG，进行 DFS 时不会走回头路或环路，保证了算法的正确性和高效性。<br>时间复杂度 $O(n^2m)$，优于 Edmonds-Karp 算法。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">210</span>,M=<span class="number">5010</span>;</span><br><span class="line"><span class="type">int</span> n,m,s,t,tot=<span class="number">1</span>,head[N];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> c;</span><br><span class="line">&#125;e[M*<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">long</span> <span class="type">long</span> c)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].c=c;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	head[u]=tot;</span><br><span class="line">	e[++tot].to=u;</span><br><span class="line">	e[tot].c=<span class="number">0</span>;</span><br><span class="line">	e[tot].nxt=head[v];</span><br><span class="line">	head[v]=tot;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> level[N];<span class="comment">//层级</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(level,<span class="number">-1</span>,<span class="built_in">sizeof</span>(level));</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(s);</span><br><span class="line">	level[s]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to;</span><br><span class="line">			<span class="keyword">if</span>(e[i].c==<span class="number">0</span>||level[v]!=<span class="number">-1</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			level[v]=level[u]<span class="number">+1</span>;</span><br><span class="line">			q.<span class="built_in">push</span>(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> level[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">long</span> <span class="type">long</span> flow)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u==t)</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(e[i].c==<span class="number">0</span>||level[v]!=level[u]<span class="number">+1</span>)<span class="comment">//按层dfs</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> temp=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(flow-res,e[i].c));</span><br><span class="line">		e[i].c-=temp;</span><br><span class="line">		e[i^<span class="number">1</span>].c+=temp;</span><br><span class="line">		res+=temp;</span><br><span class="line">		<span class="keyword">if</span>(res==flow)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(res==<span class="number">0</span>)</span><br><span class="line">		level[u]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;n,&amp;m,&amp;s,&amp;t);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> u,v,w;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">		<span class="built_in">add_edge</span>(u,v,w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line">		ans+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>优化：当前弧优化。减少 DFS 对边的重复检查。若某边剩余容量已为 $0$，则不再处理这条边。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="type">int</span> cur[N];<span class="comment">//当前弧优化</span></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">long</span> <span class="type">long</span> flow)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u==t)</span><br><span class="line">		<span class="keyword">return</span> flow;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> res=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=cur[u];i;i=e[i].nxt)&#123;</span><br><span class="line">		cur[u]=i;<span class="comment">//当前弧优化</span></span><br><span class="line">		<span class="type">int</span> v=e[i].to;</span><br><span class="line">		<span class="keyword">if</span>(e[i].c==<span class="number">0</span>||level[v]!=level[u]<span class="number">+1</span>)<span class="comment">//按层dfs</span></span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="type">long</span> <span class="type">long</span> temp=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(flow-res,e[i].c));</span><br><span class="line">		e[i].c-=temp;</span><br><span class="line">		e[i^<span class="number">1</span>].c+=temp;</span><br><span class="line">		res+=temp;</span><br><span class="line">		<span class="keyword">if</span>(res==flow)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(res==<span class="number">0</span>)</span><br><span class="line">		level[u]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">	<span class="built_in">memcpy</span>(cur,head,<span class="built_in">sizeof</span>(head));<span class="comment">//重置当前弧</span></span><br><span class="line">	ans+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></p>
<h3 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h3><p>费用流定义：对于一个网络的每条边，我们再加一个边权称为一个单位流量的费用，记作 $w(u,v)$，则这条边的费用为 $f(u,v)\times w(u,v)$。与上文中提到的反向边回退流量相同，费用也可以这样操作。<br>与普通最大流问题不同，最小费用最大流的求解过程不用 BFS 而用最短路算法寻找增广路，这样就保证了最小费用。<br>这里给出 Edmonds-Karp + SPFA 的做法。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e3</span><span class="number">+10</span>,M=<span class="number">5e4</span><span class="number">+10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt,c,w;</span><br><span class="line">&#125;e[M*<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> tot=<span class="number">1</span>,head[N],n,m,s,t;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	e[tot].c=c;</span><br><span class="line">	e[tot].w=w;</span><br><span class="line">	head[u]=tot;</span><br><span class="line">	e[++tot].to=u;</span><br><span class="line">	e[tot].nxt=head[v];</span><br><span class="line">	e[tot].c=<span class="number">0</span>;</span><br><span class="line">	e[tot].w=-w;</span><br><span class="line">	head[v]=tot;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> min_flow[N],dis[N],pre[N],flow,cost;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">	<span class="built_in">memset</span>(min_flow,<span class="number">0</span>,<span class="built_in">sizeof</span>(min_flow));</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">	q.<span class="built_in">push</span>(s);</span><br><span class="line">	vis[s]=<span class="number">1</span>;</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	min_flow[s]=<span class="number">2e9</span>;</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		vis[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to,c=e[i].c,w=e[i].w;</span><br><span class="line">			<span class="keyword">if</span>(c&amp;&amp;dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">				dis[v]=dis[u]+w;</span><br><span class="line">				pre[v]=i;</span><br><span class="line">				min_flow[v]=<span class="built_in">min</span>(min_flow[u],c);</span><br><span class="line">				<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">					vis[v]=<span class="number">1</span>;</span><br><span class="line">					q.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> min_flow[t]&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> u,v,c,w;</span><br><span class="line">		cin&gt;&gt;u&gt;&gt;v&gt;&gt;c&gt;&gt;w;</span><br><span class="line">		<span class="built_in">add_edge</span>(u,v,c,w);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">spfa</span>())&#123;</span><br><span class="line">		<span class="type">int</span> minf=min_flow[t];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=t;i!=s;i=e[pre[i]^<span class="number">1</span>].to)&#123;</span><br><span class="line">			e[pre[i]].c-=minf;</span><br><span class="line">			e[pre[i]^<span class="number">1</span>].c+=minf;</span><br><span class="line">		&#125;</span><br><span class="line">		flow+=minf;</span><br><span class="line">		cost+=minf*dis[t];</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;flow&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;cost;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="网络流建模"><a href="#网络流建模" class="headerlink" title="网络流建模"></a>网络流建模</h3><p><a href="https://www.luogu.com.cn/problem/P3356" title="例题">例题</a></p>
<p>考虑拆点。将点 $(x,y)$ 拆为 $(x,y)_1$ 和 $(x,y)_2$。<br>对于 $0$（平坦无障碍），建 $(x,y)_1\to(x,y)_2$，容量 $inf$，费用 $0$，表示可以无限通过但无收益。同时，建 $(x,y)_2\to(x+1,y)_1$ 和 $(x,y)_2\to(x,y+1)_1$，容量与费用同上，表示向南和向东走。<br>对于 $1$（障碍），不建立节点。<br>对于 $2$（石块），先建 $0$（平坦无障碍）的 $3$ 条边，然后再建一条 $(x,y)_1\to(x,y)_2$，容量 $1$，费用 $1$，表示只能走 $1$ 次且贡献为 $1$。<br>然后跑最大费用最大流就可以了。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 2e9</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">35</span>*<span class="number">35</span>*<span class="number">2</span><span class="number">+10</span>,M=<span class="number">1e5</span><span class="number">+10</span>;</span><br><span class="line"><span class="type">int</span> p,q,nodecnt,node[N][N],tot=<span class="number">1</span>,head[N],n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> to,nxt,c,w;</span><br><span class="line">&#125;e[M];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	e[++tot].to=v;</span><br><span class="line">	e[tot].nxt=head[u];</span><br><span class="line">	e[tot].c=c;</span><br><span class="line">	e[tot].w=w;</span><br><span class="line">	head[u]=tot;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> c,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	<span class="built_in">add_edge1</span>(u,v,c,w);</span><br><span class="line">	<span class="built_in">add_edge1</span>(v,u,<span class="number">0</span>,-w);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> pre[N],dis[N],s,t,flow[N];</span><br><span class="line"><span class="type">bool</span> vis[N];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">	<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in">sizeof</span>(vis));</span><br><span class="line">	<span class="built_in">memset</span>(flow,<span class="number">0</span>,<span class="built_in">sizeof</span>(flow));</span><br><span class="line">	dis[s]=<span class="number">0</span>;</span><br><span class="line">	vis[s]=<span class="number">1</span>;</span><br><span class="line">	flow[s]=inf;</span><br><span class="line">	que.<span class="built_in">push</span>(s);</span><br><span class="line">	<span class="keyword">while</span>(!que.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=que.<span class="built_in">front</span>();</span><br><span class="line">		que.<span class="built_in">pop</span>();</span><br><span class="line">		vis[u]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=e[i].nxt)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].to,c=e[i].c,w=e[i].w;</span><br><span class="line">			<span class="keyword">if</span>(c&amp;&amp;dis[v]&gt;dis[u]+w)&#123;</span><br><span class="line">				dis[v]=dis[u]+w;</span><br><span class="line">				pre[v]=i;</span><br><span class="line">				flow[v]=<span class="built_in">min</span>(flow[u],c);</span><br><span class="line">				<span class="keyword">if</span>(!vis[v])&#123;</span><br><span class="line">					vis[v]=<span class="number">1</span>;</span><br><span class="line">					que.<span class="built_in">push</span>(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> flow[t]&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>),cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;p&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</span><br><span class="line">			node[i][j]=++nodecnt;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,c;i&lt;=q;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=p;j++)&#123;</span><br><span class="line">			cin&gt;&gt;c;</span><br><span class="line">			<span class="keyword">if</span>(c==<span class="number">1</span>)</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">add_edge</span>(node[i][j],node[i][j]+nodecnt,inf,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(c==<span class="number">2</span>)</span><br><span class="line">				<span class="built_in">add_edge</span>(node[i][j],node[i][j]+nodecnt,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">if</span>(i&lt;q)</span><br><span class="line">				<span class="built_in">add_edge</span>(node[i][j]+nodecnt,node[i<span class="number">+1</span>][j],inf,<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">if</span>(j&lt;p)</span><br><span class="line">				<span class="built_in">add_edge</span>(node[i][j]+nodecnt,node[i][j<span class="number">+1</span>],inf,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	s=<span class="number">0</span>,t=nodecnt*<span class="number">2</span><span class="number">+1</span>;</span><br><span class="line">	<span class="built_in">add_edge</span>(s,node[<span class="number">1</span>][<span class="number">1</span>],n,<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">add_edge</span>(node[q][p]+nodecnt,t,n,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">spfa</span>())&#123;</span><br><span class="line">		<span class="type">int</span> minf=flow[t];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=t,cnt=<span class="number">0</span>;i!=s;i=e[pre[i]^<span class="number">1</span>].to,cnt++)&#123;</span><br><span class="line">			e[pre[i]].c-=minf;</span><br><span class="line">			e[pre[i]^<span class="number">1</span>].c+=minf;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=head[node[i][j]];k;k=e[k].nxt)&#123;</span><br><span class="line">				<span class="type">int</span> v=e[k].to;</span><br><span class="line">				<span class="keyword">if</span>(v==node[i][j]+nodecnt)</span><br><span class="line">					cnt[i][j]+=e[k^<span class="number">1</span>].c;</span><br><span class="line">			&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="type">int</span> x=<span class="number">1</span>,y=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(x!=q||y!=p)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cnt[x<span class="number">+1</span>][y])&#123;</span><br><span class="line">				cout&lt;&lt;i&lt;&lt;<span class="string">&quot; 0\n&quot;</span>;</span><br><span class="line">				cnt[x<span class="number">+1</span>][y]--;</span><br><span class="line">				x++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				cout&lt;&lt;i&lt;&lt;<span class="string">&quot; 1\n&quot;</span>;</span><br><span class="line">				cnt[x][y<span class="number">+1</span>]--;</span><br><span class="line">				y++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>参考资料：  </p>
<p><a href="https://oi-wiki.org/graph/flow/max-flow/" title="OI Wiki">OI Wiki</a></p>
<p><a href="https://www.luogu.com.cn/article/ei4nw9cm" title="题解 P3376 【【模板】网络最大流】">题解 P3376 【【模板】网络最大流】</a></p>
<p><a href="https://www.luogu.com.cn/article/k6hmo167" title="【题解】P3356 火星探险问题">【题解】P3356 火星探险问题</a></p>
]]></content>
      <tags>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数学</title>
    <url>/2025/07/19/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>预处理阶乘+阶乘逆元计算组合数。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll fact[N],inv_fact[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        fact[i]=fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">    inv_fact[n]=<span class="built_in">qpow</span>(fact[n],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i++)</span><br><span class="line">        inv_fact[i]=inv_fact[i<span class="number">+1</span>]*(i<span class="number">+1</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> m)</span></span>&#123;<span class="keyword">return</span> fact[n]*inv_fact[m]%mod*inv_fact[n-m]%mod;&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="插板法"><a href="#插板法" class="headerlink" title="插板法"></a>插板法</h3><p>现有 $n$ 个完全相同的球，将其分至 $k$ 个盒子中，每个盒子至少 $1$ 个球，共有多少种分法？<br>问题等价于用 $k-1$ 个板子插入到 $n-1$ 个空隙中，将其分为 $k$ 组的方案数。答案就是</p>
<script type="math/tex; mode=display">\binom{n-1}{k-1}</script><p>若每个盒子允许为空，就会出现多个板子插入同一空隙的情况。我们假设所有盒子中已有 $1$ 个球，那么总共有 $n+k$ 个球，答案就是</p>
<script type="math/tex; mode=display">\binom{n+k-1}{k-1}=\binom{n+k-1}{n}</script><h3 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h3><script type="math/tex; mode=display">(a+b)^n=\sum_{i=0}^n\binom{n}{i}a^ib^{n-i}</script><h3 id="范德蒙德卷积"><a href="#范德蒙德卷积" class="headerlink" title="范德蒙德卷积"></a>范德蒙德卷积</h3><script type="math/tex; mode=display">\sum_{i=0}^k\binom{n}{i}\binom{m}{k-i}=\binom{n+m}{k}</script><p>组合意义：在 $n+m$ 中选 $k$ 个，相当于先在 $n$ 中选 $i$ 个，再在 $m$ 中选 $k-i$ 个。</p>
<h3 id="多重集的排列数"><a href="#多重集的排列数" class="headerlink" title="多重集的排列数"></a>多重集的排列数</h3><p>设 $S={n_1\cdot a_1,n_2\cdot a_2,\cdots,n_k\cdot a_k}$ 表示由 $n_1$ 个 $a_1$，$n_2$ 个 $a_2$，…，$n_k$ 个 $a_k$ 组成的多重集，则 $S$ 的全排列个数为</p>
<script type="math/tex; mode=display">\frac{n!}{\prod_{i=1}^k n_i!}=\frac{n!}{n_1!n_2!\cdots n_k!}</script><h3 id="错排列"><a href="#错排列" class="headerlink" title="错排列"></a>错排列</h3><p>记 $D_n$ 表示 $n$ 个元素的错排列数，则有</p>
<script type="math/tex; mode=display">D_n=(n-1)\cdot(D_{n-1}+D_{n-2})</script><p>其中 $D_0=1,D_1=0,D_2=1$。<br>对于第 $n$ 个元素，其可以与前 $n-1$ 个元素中任意一个交换位置。设与它交换的元素所在位置为 $k$，交换后分为两种情况：  </p>
<ul>
<li>第 $k$ 个元素被交换到第 $n$ 个位置，则剩下的 $n-2$ 个元素构成错排列。</li>
<li>第 $k$ 个元素没有交换到第 $n$ 个位置，则剩下的 $n-1$ 个元素构成错排列。</li>
</ul>
<h3 id="圆排列"><a href="#圆排列" class="headerlink" title="圆排列"></a>圆排列</h3><p>设 $n$ 个元素的圆排列数为 $Q_n^n$。考虑其中一种情况，从不同的位置断开就变为不同的排列，所以有</p>
<script type="math/tex; mode=display">Q_n^n=\frac{A_n^n}{n}=(n-1)!</script><p>部分圆排列的公式：</p>
<script type="math/tex; mode=display">Q_n^r=\frac{A_n^r}{r}=\frac{n!}{r\cdot (n-r)!}</script><h3 id="常用公式"><a href="#常用公式" class="headerlink" title="常用公式"></a>常用公式</h3><h4 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h4><script type="math/tex; mode=display">\binom{n}{m}=\binom{n}{n-m}</script><p>显然。</p>
<h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><script type="math/tex; mode=display">\binom{n}{m}=\frac{n}{m}\binom{n-1}{m-1}</script><p>代数推导显然。</p>
<h4 id="3"><a href="#3" class="headerlink" title="(3)"></a>(3)</h4><script type="math/tex; mode=display">\binom{n}{m}=\binom{n-1}{m}+\binom{n-1}{m-1}</script><p>组合意义：杨辉三角递推过程。</p>
<h4 id="4"><a href="#4" class="headerlink" title="(4)"></a>(4)</h4><script type="math/tex; mode=display">\sum_{i=0}^n\binom{n}{i}=2^n</script><p>代数推导：</p>
<script type="math/tex; mode=display">\sum_{i=0}^n\binom{n}{i}=(1+1)^n</script><h4 id="5"><a href="#5" class="headerlink" title="(5)"></a>(5)</h4><script type="math/tex; mode=display">\sum_{i=0}^n(-1)^i\binom{n}{i}=[n=0]</script><p>代数推导：</p>
<script type="math/tex; mode=display">\sum_{i=0}^n(-1)^i\binom{n}{i}=(1-1)^n</script><h4 id="6"><a href="#6" class="headerlink" title="(6)"></a>(6)</h4><script type="math/tex; mode=display">\sum_{i=0}^n\binom{n}{i}^2=\binom{2n}{n}</script><p><del>快拿这个式子去诈骗，一骗一个准。</del><br>代数推导：</p>
<script type="math/tex; mode=display">\sum_{i=0}^n\binom{n}{i}^2=\sum_{i=0}^n\binom{n}{i}\binom{n}{n-i}=\binom{2n}{n}</script><h4 id="7"><a href="#7" class="headerlink" title="(7)"></a>(7)</h4><script type="math/tex; mode=display">\sum_{i=0}^ni\binom{n}{i}=n2^{n-1}</script><p>代数推导：<br>首先处理 $i\dbinom{n}{i}$：</p>
<script type="math/tex; mode=display">i\binom{n}{i}=i\cdot \frac{n!}{i!(n-i)!}=n\cdot \frac{(n-1)!}{(i-1)!(n-i)!}=n\binom{n-1}{i-1}</script><p>设 $j=i-1$，代入：</p>
<script type="math/tex; mode=display">\sum_{i=0}^ni\binom{n}{i}=n\sum_{j=0}^{n-1}\binom{n-1}{j}=n2^{n-1}</script><h4 id="8"><a href="#8" class="headerlink" title="(8)"></a>(8)</h4><script type="math/tex; mode=display">\sum_{i=0}^n\binom{i}{m}=\binom{n+1}{m+1}</script><p>组合意义：<br>本质上是求杨辉三角某一列的和。我们可以发现，开头的 $\dbinom{m}{m}$ 等于 $\dbinom{m+1}{m+1}$，也就是杨辉三角 $\dbinom{m+1}{m}$ 的右侧，二者求和可以再次传递到右侧，如此不断直到 $\dbinom{n+1}{m+1}$。</p>
<p><img src="https://github.com/headless-piston/blog_images/blob/main/combination.png?raw=true" alt=""></p>
<h4 id="9"><a href="#9" class="headerlink" title="(9)"></a>(9)</h4><script type="math/tex; mode=display">\binom{n}{r}\binom{r}{k}=\binom{n}{k}\binom{n-k}{r-k}</script><p>代数推导和组合意义都易证。</p>
<h3 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h3><script type="math/tex; mode=display">\left|\bigcup_{i=1}^{n}S_i\right|=\sum_{m=1}^n(-1)^{m-1}\sum_{a_i<a_{i+1} }\left|\bigcap_{i=1}^mS_{a_i}\right|</script><h4 id="min-max-容斥"><a href="#min-max-容斥" class="headerlink" title="min-max 容斥"></a>min-max 容斥</h4><p>高大上的东西，我觉得我用不上。现有长度为 $n$ 的序列 ${x_i}$，设 $S={1,2,3,\cdots,n}$，则有</p>
<script type="math/tex; mode=display">\max_{i\in S}{x_i}=\sum_{T\subseteq S}{(-1)^{|T|-1}\min_{j\in T}{x_j}}</script><script type="math/tex; mode=display">\min_{i\in S}{x_i}=\sum_{T\subseteq S}{(-1)^{|T|-1}\max_{j\in T}{x_j}}</script><h3 id="二项式反演"><a href="#二项式反演" class="headerlink" title="二项式反演"></a>二项式反演</h3><p>若</p>
<script type="math/tex; mode=display">g_i=\sum_{j=i}^n\binom{j}{i}f_j</script><p>则</p>
<script type="math/tex; mode=display">f_i=\sum_{j=i}^n\binom{j}{i}(-1)^{j-i}g_j</script><p>一般 $f_i$ 表示“恰好 $i$ 个”，$g_i$ 表示“钦定 $i$ 个”。<br>代数推导：</p>
<script type="math/tex; mode=display">\begin{aligned}
\sum_{j=i}^n\binom{j}{i}(-1)^{j-i}g_j&=\sum_{j=i}^n\binom{j}{i}(-1)^{j-i}\sum_{k=j}^n\binom{k}{j}f_k\\
&=\sum_{j=i}^n\sum_{k=j}^n\binom{k}{j}\binom{j}{i}(-1)^{j-i}f_k\\
&=\sum_{k=i}^n\sum_{j=i}^k\binom{k}{i}\binom{k-i}{j-i}(-1)^{j-i}f_k\\
&=\sum_{k=i}^n\binom{k}{i}f_k\sum_{l=0}^{k-i}\binom{k-i}{l}(-1)^l\\
&=\sum_{k=i}^n\binom{k}{i}f_k[k=i]\\
&=f_i
\end{aligned}</script><p>注意 $g_i$ 的组合意义。</p>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>郑州集训游记</title>
    <url>/2025/08/20/%E9%83%91%E5%B7%9E%E9%9B%86%E8%AE%AD%E6%B8%B8%E8%AE%B0/</url>
    <content><![CDATA[<p>省流：赤石+打牌+打块。<br>我的游记比较简略，更详细的信息可以看看 <a href="https://www.cnblogs.com/yonghu10010/p/19028831">yonghu10010 的游记</a>和 <a href="https://www.cnblogs.com/Tighnari/p/19025852">Tighnari 的游记</a>，当然还有不那么详细（？）的 <a href="https://www.cnblogs.com/Tmbcan/articles/19031005">Tmbcan 的游记</a>。  </p>
<hr>
<h1 id="Day0"><a href="#Day0" class="headerlink" title="Day0"></a>Day0</h1><p>放假归来，直接火车站重逢了。热热热。<br>火车上在 bow 右后方，吓人。一路 MC+听歌。热热热。<br>到地方了。叫做钱学森实验学校，没听说过，看起来比 S2 破。实际上比 S2 破 tm 太多了。<br>到了以后去宿舍，和 dhx，whk 和 bry 一个宿舍。<br>宿舍厕所没门浴室有门，倒反天罡。<br>去机房，真凉快！电脑懒得评了，自己看：  </p>
<ul>
<li><p>Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz   3.00 GHz；  </p>
</li>
<li><p>4.00 GB 内存；  </p>
</li>
<li><p>还原卡全盘保护。  </p>
</li>
</ul>
<p>晚上吃饭，饭真难吃。热热热。<br>回宿舍猛猛打牌。<br>晚上聊到 12 点。<br><a href="https://www.cnblogs.com/Tmbcan/articles/19029159">来了以后我的心情。</a>  </p>
<h1 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h1><p><del>开着 0℃ 的空调差点把自己冻死。</del><br>NOIP 模拟赛爆了。80 pts rk49，我是不是要退役了？？？<br>下午是板子大赛，讲了一车板子。这真的是提高组不是普及组？<br>听讲课，第一次觉得有人讲的不如 Dr_Gilbert。<br>狠狠打牌+打块。  </p>
<h1 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h1><p>上午下超级大暴雨<del>这就是郑州大旱</del>，直接被困机房无法吃午饭，最后打伞直接狂冲。这破学校好像一点排水系统都没有，所有路全被 tm 淹了，最后回到宿舍脱下袜子拧出一地水。<br>之后几天只能穿拖鞋去机房了。<br>大战狗屎线段树题 1.5h+，写完后尝试过 Hack 一直 TLE #9 直接红温破防，和 dhx 爆调 1h+ 后发现数据有问题询问区间有 $l&gt;r$ 直接原地爆炸。<br>狠狠打牌+打块。  </p>
<h1 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h1><p>NOIP 模拟赛 2。T1 写出来后本地老爷机大样例 2s 直接红温狂暴卡常后 1.5s 燃尽了。T2 看着简单越想越不可做直接打暴力走人。出分后发现 T1T2 都过了？T1 拜谢核桃 OJ 少爷机，T2 是调和级数所以 $O(nq\log n)$ 直接变成 $O(q\log^2n)$ 过了。原本 220 pts rk13，赛后暗度陈仓的绑包重测直接创飞一车人，最终 200 pts rk7，T3T4 的暴力和乱搞全挂了。<br>下午是线段树，晚上是离线算法。讲的还可以。<br>狠狠打牌+打块。  </p>
<h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><p>来了之后电脑直接开摆。本着“重启解决 $90\%$ 的问题，重装系统解决 $99\%$ 的问题”的原则重启 $\inf$ 次，然后重启后电脑依旧开摆。然后直接重装系统，这次直接成功了，喜提无还原卡电脑一台。但是 QQ 登不上了，直接爆炸。<br>听讲课，这个课件的字太 tm 小了，在第一排都不容易看清，在后面根本看不清。讲课我越听越困。<br>晚上大战李超线段树板子 1h+，最后发现模数写错了。虚空调试技术稳步增长哈。<br>狠狠打牌+打块。  </p>
<h1 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h1><p>上午讲课，期间与 <em>Kenma</em> 和 hzq 讨论问题：树上可加叶子求 lca。赞扬了倍增的强大后我提了一个魔怔做法：树剖+定期重构。后来 hzq 强化了一手，得到了树上路径修+路径求和+添加叶子的在线单次 $O(\log^2n+\sqrt n)$ 做法。<a href="https://www.luogu.com.cn/problem/U595295">题目链接。</a><a href="https://www.luogu.com.cn/paste/ccjfzihh">std 链接。</a><br>讲课的讲一半组合计数去讲多项式了感觉全场只有 lyh 大爷在听你真无敌了 NOIP 又不 tm 考多项式我也不想知道你多项式跑的有多快我真红了浪费了一上午光阴听一车死难的题还有一堆原还有狗屎多项式我组合计数就是这种勾巴？？？(第一次被逼的写长难句)<br>下午一来咋临时加了个模拟赛？T1 题意就是勾巴，改来改去的直接不看了，T2 看着像数位 DP 不想做，T3 一眼树上莫队，直接写+调了一整场样例都没过直接进化究极红温态。T4 没看。最后只交了 T3 暴力 75 pts。<br>狠狠打块+打牌。  </p>
<h1 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h1><p>NOIP 模拟赛 4，这次每道题直接给了 8 个样例，爽，不对咋都是小样例？T1 一看像是简单题，结果疯狂换写法，从 <code>set</code> 到 <code>__gnu_pbds::tree</code> 再到 <code>vector</code>，最后写了个丑陋的双指针状物勉强过了所有的样例。不管了。T2 是啥啊？$O(n^3)$ 能过所有样例你真是无敌了给这么多样例就是为了告诉我暴力没写挂是吧？T3 好像得想神秘性质我不会啊直接 $O(nms)$ 背包走人。T4 不会，直接爆搜居然所有样例都过了。最后出成绩 245 pts rk8，T1 过了，T4 过了？数据水？赛后重测 215 pts rk11，T4 被叉飞了。<br>狠狠打块+打牌。  </p>
<h1 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h1><p>放假日。上午去河南博物馆玩，排队的人排了一条街。逛了一上午累死了。中午在外面吃烩面，感觉和我在石家庄吃的味道一样啊？来这里这么几天只有一个感觉：我还在石家庄。这个街景随便拍一张都和石家庄一模一样啊。打 UNO，真好玩。下午在宿舍和机房疯狂开颓，晚上给出的题造数据，跪谢 <a href="https://www.cnblogs.com/Kenma">@<em>Kenma</em></a> 的帮助。<br>狠狠打块+打牌。  </p>
<h1 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h1><p>NOIP 模拟赛 5。<br>你咋一道都不会？你咋一道都不会？你咋一道都不会？最后 130 pts，但是忘了提交直接保单。<br>出的题被 LCT 草飞了。lyh 大爷使用 zkw 线段树硬草最优解，畏惧了，这咋成手法大战了。<br>狠狠打块+打牌。  </p>
<h1 id="Day9"><a href="#Day9" class="headerlink" title="Day9"></a>Day9</h1><p>讲数论，之前都学过，摆了。<br>狠狠打牌+打块。  </p>
<h1 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h1><p>NOIP 模拟赛 6<br>先开 T1，这个形式看着就很双指针啊，为啥 dhx 和 hzq 在我旁边都在疯狂弄 trie 啊？写一半发现似乎要维护最大值不管了直接线段树启动。写完调一调过样例了，但是怎么总感觉假呢？开 T2，发现原括号序列最终会被删成一串 <code>(</code> 或者是一串 <code>)</code> 接一串 <code>(</code>，容易发现 <code>(</code> 情况无法得到合法序列，而 <code>)</code> 接 <code>(</code> 若 <code>(</code> 部分为空则只需找配对删除后 <code>(</code> 数为原 <code>)</code> 数的因数即可，反之也无解。md T2 样例就是勾巴 4 个样例删完全是 tm 右括号你咋不去吃屎你是变态吗那么喜欢看别人挂分？？？T3 开了以后发现有点不可做。<em>Kenma</em>：这是小奥。那坏了，这对高中生来说过于困难了。T4 不可做题，摆了。<br>最终 200 pts，T4 暴力挂了。<br>额啊学会了根号分治求独立集了，确实很巧妙。<br>狠狠打块+打牌。  </p>
<h1 id="Day11"><a href="#Day11" class="headerlink" title="Day11"></a>Day11</h1><p>dottle 的方法论确实强势啊。简单且有用。<br>狠狠打块+打牌。  </p>
<h1 id="Day12"><a href="#Day12" class="headerlink" title="Day12"></a>Day12</h1><p>DP 真是我爹。<br>晚饭是 L 请的，吃饭的地方环境很好。<br>狠狠打块+打牌。  </p>
<h1 id="Day13"><a href="#Day13" class="headerlink" title="Day13"></a>Day13</h1><p>上午 dottle 讲了一些很深刻的 OI 现状和学习方法。<br>下午直接走了，大巴车开的真晃，差评。<br>等火车的时候打 UNO。<br>火车上摆了一路。<br>终于到家了！<del>不对啊耳机咋丢了。</del><br>还是打牌+打块。<br>看见接下来几天的日程表心已经凉一半了。  </p>
<hr>
<p>End.</p>
]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度整数类 v1.7</title>
    <url>/2025/07/04/%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%95%B4%E6%95%B0%E7%B1%BB%20v1.7/</url>
    <content><![CDATA[<p>本项目会第一时间更新在 <a href="https://github.com/headless-piston/BigInteger">Github</a> 上。  </p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>我们痛恨高精度。  </p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>不想写高精度怎么办？提前写好模板，要用时直接复制粘贴就好了。  </p>
<details>
<summary>BigInteger.cpp</summary>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> __FFT&#123;</span><br><span class="line">    <span class="keyword">constexpr</span> <span class="type">double</span> PI2=<span class="number">6.283185307179586231995927</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">complex</span>&#123;</span><br><span class="line">        <span class="type">double</span> real,imag;</span><br><span class="line">        complex <span class="keyword">operator</span>+(<span class="type">const</span> complex &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;real+x.real,imag+x.imag&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        complex <span class="keyword">operator</span>-(<span class="type">const</span> complex &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;real-x.real,imag-x.imag&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        complex <span class="keyword">operator</span>*(<span class="type">const</span> complex &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;real*x.real-imag*x.imag,real*x.imag+x.real*imag&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    std::vector&lt;complex&gt; omega;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init_omega</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="built_in">int</span>(omega.<span class="built_in">size</span>())) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> start=omega.<span class="built_in">empty</span>()?<span class="number">1</span>:omega.<span class="built_in">size</span>()&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        omega.<span class="built_in">resize</span>(<span class="number">1</span>&lt;&lt;std::__lg(n));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;=n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;(i&gt;&gt;<span class="number">1</span>);j++)&#123;</span><br><span class="line">                <span class="type">double</span> arg=PI2*j/i;</span><br><span class="line">                omega[(i&gt;&gt;<span class="number">1</span>)+j]=&#123;<span class="built_in">cos</span>(arg),<span class="built_in">sin</span>(arg)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">FFT</span><span class="params">(std::vector&lt;complex&gt; &amp;a,<span class="type">int</span> n,<span class="type">bool</span> inv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j) std::<span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> l=n&gt;&gt;<span class="number">1</span>;(j^=l)&lt;l;l&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i+=len)</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;(len&gt;&gt;<span class="number">1</span>);j++)&#123;</span><br><span class="line">                    complex w=inv?<span class="built_in">complex</span>(&#123;omega[(len&gt;&gt;<span class="number">1</span>)+j].real,-omega[(len&gt;&gt;<span class="number">1</span>)+j].imag&#125;):omega[(len&gt;&gt;<span class="number">1</span>)+j];</span><br><span class="line">                    complex x=a[i+j],y=a[i+j+(len&gt;&gt;<span class="number">1</span>)]*w;</span><br><span class="line">                    a[i+j]=x+y,a[i+j+(len&gt;&gt;<span class="number">1</span>)]=x-y;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">if</span>(inv) <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) a[i].real/=n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> BASE=<span class="number">10000</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> DIGITS_PER_BASE=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bigint</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">    <span class="type">bool</span> is_negative;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">cmp_abs</span><span class="params">(<span class="type">const</span> bigint &amp;a,<span class="type">const</span> bigint &amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.num.<span class="built_in">size</span>()!=b.num.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> a.num.<span class="built_in">size</span>()&lt;b.num.<span class="built_in">size</span>()?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">int</span>(a.num.<span class="built_in">size</span>())<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">if</span>(a.num[i]!=b.num[i])</span><br><span class="line">                <span class="keyword">return</span> a.num[i]&lt;b.num[i]?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">bigint <span class="title">left_shift</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num.<span class="built_in">size</span>()==<span class="number">1</span>&amp;&amp;num[<span class="number">0</span>]==<span class="number">0</span>) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        num.<span class="built_in">insert</span>(num.<span class="built_in">begin</span>(),k,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">bigint <span class="title">right_shift</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;=<span class="built_in">int</span>(num.<span class="built_in">size</span>())) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        num.<span class="built_in">erase</span>(num.<span class="built_in">begin</span>(),num.<span class="built_in">begin</span>()+k);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">std::pair&lt;bigint,bigint&gt; <span class="title">div_mod</span><span class="params">(<span class="type">const</span> bigint &amp;x)</span><span class="type">const</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Division by zero!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">cmp_abs</span>(*<span class="keyword">this</span>,x)&lt;<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,*<span class="keyword">this</span>&#125;;</span><br><span class="line">        bigint quo,rem=<span class="keyword">this</span>-&gt;<span class="built_in">abs</span>();</span><br><span class="line">        quo.num.<span class="built_in">resize</span>(num.<span class="built_in">size</span>()-x.num.<span class="built_in">size</span>()<span class="number">+1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">int</span>(num.<span class="built_in">size</span>())-<span class="built_in">int</span>(x.num.<span class="built_in">size</span>());i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="type">int</span> low=<span class="number">0</span>,high=BASE<span class="number">-1</span>,res=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">                <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">                bigint prod=x*mid;</span><br><span class="line">                prod.<span class="built_in">left_shift</span>(i);</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">cmp_abs</span>(prod,rem)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    res=mid;</span><br><span class="line">                    low=mid<span class="number">+1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> high=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            quo.num[i]=res;</span><br><span class="line">            <span class="keyword">if</span>(res!=<span class="number">0</span>)&#123;</span><br><span class="line">                bigint prod=x.<span class="built_in">abs</span>()*res;</span><br><span class="line">                prod.<span class="built_in">left_shift</span>(i);</span><br><span class="line">                rem=rem-prod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(quo.num.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;quo.num.<span class="built_in">back</span>()==<span class="number">0</span>) quo.num.<span class="built_in">pop_back</span>();</span><br><span class="line">        quo.is_negative=is_negative!=x.is_negative;</span><br><span class="line">        <span class="keyword">if</span>(quo.num.<span class="built_in">size</span>()==<span class="number">1</span>&amp;&amp;quo.num[<span class="number">0</span>]==<span class="number">0</span>) quo.is_negative=<span class="literal">false</span>;</span><br><span class="line">        rem.is_negative=is_negative;</span><br><span class="line">        <span class="keyword">if</span>(rem.num.<span class="built_in">size</span>()==<span class="number">1</span>&amp;&amp;rem.num[<span class="number">0</span>]==<span class="number">0</span>) rem.is_negative=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;quo,rem&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">bigint</span>():<span class="built_in">is_negative</span>(<span class="literal">false</span>)&#123;num.<span class="built_in">push_back</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">friend</span> std::istream &amp;<span class="keyword">operator</span>&gt;&gt;(std::istream &amp;in,bigint &amp;a)&#123;</span><br><span class="line">        std::string s;</span><br><span class="line">        in&gt;&gt;s;a=<span class="built_in">bigint</span>(s);</span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> std::ostream &amp;<span class="keyword">operator</span>&lt;&lt;(std::ostream &amp;out,<span class="type">const</span> bigint &amp;a)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.is_negative) out&lt;&lt;<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">        out&lt;&lt;a.num.<span class="built_in">back</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">int</span>(a.num.<span class="built_in">size</span>())<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            out&lt;&lt;std::<span class="built_in">setw</span>(DIGITS_PER_BASE)&lt;&lt;std::<span class="built_in">setfill</span>(<span class="string">&#x27;0&#x27;</span>)&lt;&lt;a.num[i];</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_negative!=x.is_negative)</span><br><span class="line">            <span class="keyword">return</span> is_negative&gt;x.is_negative;</span><br><span class="line">        <span class="keyword">if</span>(num.<span class="built_in">size</span>()!=x.num.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> is_negative?num.<span class="built_in">size</span>()&gt;x.num.<span class="built_in">size</span>():num.<span class="built_in">size</span>()&lt;x.num.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">int</span>(num.<span class="built_in">size</span>())<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=x.num[i])</span><br><span class="line">                <span class="keyword">return</span> is_negative?num[i]&gt;x.num[i]:num[i]&lt;x.num[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> x&lt;*<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&gt;x);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&gt;=(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>&lt;x);&#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_negative!=x.is_negative) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(num.<span class="built_in">size</span>()!=x.num.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">int</span>(num.<span class="built_in">size</span>());i++)</span><br><span class="line">            <span class="keyword">if</span>(num[i]!=x.num[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> !(*<span class="keyword">this</span>==x);&#125;</span><br><span class="line">    <span class="function">bigint <span class="title">abs</span><span class="params">()</span><span class="type">const</span></span>&#123;</span><br><span class="line">        bigint res=*<span class="keyword">this</span>;res.is_negative=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bigint</span>(<span class="type">long</span> <span class="type">long</span> x)&#123;</span><br><span class="line">        num.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) is_negative=<span class="literal">true</span>,x=-x;</span><br><span class="line">        <span class="keyword">else</span> is_negative=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">0</span>) num.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(x)&#123;</span><br><span class="line">            num.<span class="built_in">push_back</span>(x%BASE);</span><br><span class="line">            x/=BASE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bigint</span>(<span class="type">const</span> std::string &amp;s)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!s.<span class="built_in">length</span>())</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Error:An invalid number!&quot;</span>);</span><br><span class="line">        num.<span class="built_in">clear</span>(),is_negative=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;-&#x27;</span>) low=<span class="number">1</span>,is_negative=<span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> base_num=<span class="number">0</span>,base_w=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="built_in">int</span>(s.<span class="built_in">length</span>())<span class="number">-1</span>;i&gt;=low;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]&lt;<span class="string">&#x27;0&#x27;</span>||s[i]&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">                <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Error:An invalid number!&quot;</span>);</span><br><span class="line">            base_num+=(s[i]^<span class="number">48</span>)*base_w;</span><br><span class="line">            base_w*=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(base_w==BASE||i==low)&#123;</span><br><span class="line">                num.<span class="built_in">push_back</span>(base_num);</span><br><span class="line">                base_num=<span class="number">0</span>,base_w=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!num.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Error:An invalid number!&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(num.<span class="built_in">size</span>()==<span class="number">1</span>&amp;&amp;num.<span class="built_in">back</span>()==<span class="number">0</span>&amp;&amp;is_negative)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">invalid_argument</span>(<span class="string">&quot;Error:An invalid number!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    bigint <span class="keyword">operator</span>-()<span class="type">const</span>&#123;</span><br><span class="line">        bigint res=*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(res.num.<span class="built_in">size</span>()==<span class="number">1</span>&amp;&amp;res.num[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">            res.is_negative=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> res.is_negative=!is_negative;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint <span class="keyword">operator</span>+(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        bigint res;</span><br><span class="line">        <span class="keyword">if</span>(is_negative==x.is_negative)&#123;</span><br><span class="line">            res.is_negative=is_negative;</span><br><span class="line">            res.num.<span class="built_in">resize</span>(std::<span class="built_in">max</span>(num.<span class="built_in">size</span>(),x.num.<span class="built_in">size</span>()));</span><br><span class="line">            <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">int</span>(res.num.<span class="built_in">size</span>());i++)&#123;</span><br><span class="line">                <span class="type">int</span> sum=carry;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="built_in">int</span>(num.<span class="built_in">size</span>())) sum+=num[i];</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="built_in">int</span>(x.num.<span class="built_in">size</span>())) sum+=x.num[i];</span><br><span class="line">                res.num[i]=sum%BASE;</span><br><span class="line">                carry=sum/BASE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(carry) res.num.<span class="built_in">push_back</span>(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> cmp=<span class="built_in">cmp_abs</span>(*<span class="keyword">this</span>,x);</span><br><span class="line">            <span class="type">const</span> bigint &amp;larger=cmp&gt;=<span class="number">0</span>?*<span class="keyword">this</span>:x;</span><br><span class="line">            <span class="type">const</span> bigint &amp;smaller=cmp&gt;=<span class="number">0</span>?x:*<span class="keyword">this</span>;</span><br><span class="line">            res.is_negative=cmp&gt;=<span class="number">0</span>?is_negative:x.is_negative;</span><br><span class="line">            res.num.<span class="built_in">resize</span>(larger.num.<span class="built_in">size</span>());</span><br><span class="line">            <span class="type">int</span> borrow=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">int</span>(res.num.<span class="built_in">size</span>());i++)&#123;</span><br><span class="line">                <span class="type">int</span> diff=larger.num[i]-borrow;</span><br><span class="line">                <span class="keyword">if</span>(i&lt;<span class="built_in">int</span>(smaller.num.<span class="built_in">size</span>())) diff-=smaller.num[i];</span><br><span class="line">                <span class="keyword">if</span>(diff&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    diff+=BASE;</span><br><span class="line">                    borrow=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> borrow=<span class="number">0</span>;</span><br><span class="line">                res.num[i]=diff;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(res.num.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;res.num.<span class="built_in">back</span>()==<span class="number">0</span>) res.num.<span class="built_in">pop_back</span>();</span><br><span class="line">            <span class="keyword">if</span>(res.num.<span class="built_in">size</span>()==<span class="number">1</span>&amp;&amp;res.num[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">                res.is_negative=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint <span class="keyword">operator</span>-(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        bigint temp=x;</span><br><span class="line">        temp.is_negative=!temp.is_negative;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>+temp;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint <span class="keyword">operator</span>*(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;</span><br><span class="line">        bigint res;</span><br><span class="line">        res.is_negative=(is_negative!=x.is_negative);</span><br><span class="line">        <span class="type">int</span> len=<span class="number">1</span>;<span class="keyword">while</span>(len&lt;<span class="built_in">int</span>(num.<span class="built_in">size</span>()+x.num.<span class="built_in">size</span>())) len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="function">std::vector&lt;__FFT::complex&gt; <span class="title">fa</span><span class="params">(len)</span>,<span class="title">fb</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">int</span>(num.<span class="built_in">size</span>());i++)</span><br><span class="line">            fa[i]=&#123;<span class="built_in">double</span>(num[i]),<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">int</span>(x.num.<span class="built_in">size</span>());i++)</span><br><span class="line">            fb[i]=&#123;<span class="built_in">double</span>(x.num[i]),<span class="number">0</span>&#125;;</span><br><span class="line">        __FFT::<span class="built_in">init_omega</span>(len);</span><br><span class="line">        __FFT::<span class="built_in">FFT</span>(fa,len,<span class="literal">false</span>);</span><br><span class="line">        __FFT::<span class="built_in">FFT</span>(fb,len,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            fa[i]=fa[i]*fb[i];</span><br><span class="line">        __FFT::<span class="built_in">FFT</span>(fa,len,<span class="literal">true</span>);</span><br><span class="line">        res.num.<span class="built_in">resize</span>(len<span class="number">+1</span>);</span><br><span class="line">        <span class="type">int</span> carry=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="type">long</span> val=<span class="built_in">round</span>(fa[i].real)+carry;</span><br><span class="line">            res.num[i]=val%BASE;</span><br><span class="line">            carry=val/BASE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry) res.num[len]=carry;</span><br><span class="line">        <span class="keyword">while</span>(res.num.<span class="built_in">size</span>()&gt;<span class="number">1</span>&amp;&amp;res.num.<span class="built_in">back</span>()==<span class="number">0</span>) res.num.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span>(res.num.<span class="built_in">size</span>()==<span class="number">1</span>&amp;&amp;res.num[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">            res.is_negative=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    bigint <span class="keyword">operator</span>/(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="built_in">div_mod</span>(x).first;&#125;</span><br><span class="line">    bigint <span class="keyword">operator</span>%(<span class="type">const</span> bigint &amp;x)<span class="type">const</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="built_in">div_mod</span>(x).second;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这份高精度模板使用压位实现常数优化，实现过程中为了保证乘法运算的精度，最终选择了压 $4$ 位，可以保证 $20^{1000000}$ 以内的精度。使用动态内存，根据计算的数的大小动态扩容。  </p>
<h4 id="I-O-方式"><a href="#I-O-方式" class="headerlink" title="I/O 方式"></a>I/O 方式</h4><p>为方便使用，接入了 <code>iostream</code> 的 I/O。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bigint a;</span><br><span class="line">std::cin&gt;&gt;a;</span><br><span class="line">std::cout&lt;&lt;a;</span><br></pre></td></tr></table></figure></p>
<h4 id="数值运算符"><a href="#数值运算符" class="headerlink" title="数值运算符"></a>数值运算符</h4><p>加法与减法使用 $O(n)$ 算法，乘法使用 $O(n\log n)$ 算法。除法和取模暂时使用 $O(n^2\log n)$ 的暴力算法，以后会尝试优化成 $O(n\log n)$。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bigint a,b;</span><br><span class="line">a+b;</span><br><span class="line">a-b;</span><br><span class="line">a*b;</span><br><span class="line">a+=b;</span><br><span class="line">a-=b;</span><br><span class="line">a*=b;</span><br><span class="line">a++;</span><br><span class="line">a--;</span><br><span class="line">++a;</span><br><span class="line">--a;</span><br></pre></td></tr></table></figure></p>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bigint a;</span><br><span class="line">a=<span class="number">-1919810</span>;</span><br></pre></td></tr></table></figure>
<h4 id="关系符"><a href="#关系符" class="headerlink" title="关系符"></a>关系符</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bigint a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">a&lt;b;<span class="comment">//此表达式为true</span></span><br><span class="line">a!=b;<span class="comment">//此表达式为true</span></span><br><span class="line">a==b;<span class="comment">//此表达式为false</span></span><br></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>成员函数 <code>abs()</code>，以 <code>bigint</code> 类型返回该数的绝对值。<br>私有函数 <code>left_shift(const int &amp;k)</code> 和 <code>right_shift(const int &amp;k)</code>，用于在十进制下对数进行左/右移，等价于乘 $10000^k$ 或除 $10000^k$ 并向零取整，时间复杂度 $O(n)$。  </p>
<h3 id="Upd"><a href="#Upd" class="headerlink" title="Upd"></a>Upd</h3><p>v1.1：增加了 NTT 命名空间，但因为一些原因暂不使用。<br>v1.2：改了改码风。<br>v1.3：使用 C++ 标准库中的 <code>std::complex</code> 代替手写的复数类。修复了初始化错误的问题。<br>v1.4：<code>std::complex</code> 跑的太慢啦，换回手写的复数类。<br>v1.5：改用预处理单位根计算，提高了精度。现在可以压 $4$ 位啦，效率大提升！<br>v1.6：整体重构代码，现在支持动态内存。同时大幅提升了安全性和性能，增加了非法输入的检查，高精度乘法在洛谷模板题成功进入 $1\operatorname{s}$，现在处于最优解第 5 页。<br>v1.7：完善了 v1.6 的代码，修复了前导零删除的问题。由于时间和精力有限，仅实现了 $O(n^2\log n)$ 的除法和取模。  </p>
]]></content>
  </entry>
  <entry>
    <title>ABC 题目合集</title>
    <url>/2025/08/23/ABC%20%E9%A2%98%E7%9B%AE%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<h2 id="section">200</h2>
<h3 id="d">D</h3>
<p>考虑鸽巢原理：枚举 <span class="math inline">\(201\)</span>
种序列，必然存在两种方案之和模 <span class="math inline">\(200\)</span>
同余。当序列长度为 <span class="math inline">\(8\)</span> 时有 <span
class="math inline">\(2^8=256\)</span> 种子序列，足以覆盖全部情况。直接
dfs，时间复杂度 <span class="math inline">\(2^{\min(n,8)}\)</span>。</p>
<h3 id="e">E</h3>
<p>拜谢 <a
href="https://www.luogu.com.cn/article/xz0tapxl"><em>Kenma</em></a>。<br />
容易想到枚举 <span class="math inline">\(i+j+k\)</span>，接着再确定
<span class="math inline">\(i,j,k\)</span>。<br />
考虑容斥。设 <span class="math inline">\(i+j+k=sum\)</span>，方案数为
<span class="math inline">\(f_{sum}\)</span>，若忽略 <span
class="math inline">\(i,j,k\le n\)</span> 的限制，则 <span
class="math inline">\(f_{sum}=\dbinom{sum-1}{2}\)</span>。此时对限制容斥一下：<br />
<span
class="math display">\[f_{sum}=\binom{sum-1}{2}-3\cdot\binom{sum-n-1}{2}+3\cdot\binom{sum-2n-1}{2}-\binom{sum-3n-1}{2}\]</span>
确定 <span class="math inline">\(i+j+k\)</span> 后枚举 <span
class="math inline">\(i\)</span>，计算相同 <span
class="math inline">\(i\)</span> 下合法三元组数量即可。</p>
<h2 id="section-1">201</h2>
<h3 id="d-1">D</h3>
<p>比较基础的博弈 DP。</p>
<h3 id="e-1">E</h3>
<p>看到树上路径异或和首先转化为点到根的路径异或和，因为设 <span
class="math inline">\(dis(u,v)\)</span> 表示 <span
class="math inline">\(u,v\)</span> 路径的异或和，有 <span
class="math inline">\(dis(u,v)=dis(1,u)\oplus
dis(1,v)\)</span>。则现在问题转化为：有数组 <span
class="math inline">\(dis\)</span>，求其中元素两两异或的结果之和。考虑拆位，设当前考虑到第
<span class="math inline">\(i\)</span> 位，所有 <span
class="math inline">\(dis\)</span> 中第 <span
class="math inline">\(i\)</span> 位为 <span
class="math inline">\(1\)</span> 的有 <span
class="math inline">\(cnt\)</span> 个，这一位的贡献即为 <span
class="math inline">\(cnt\times (n-cnt)\times 2^i\)</span>。时间复杂度
<span class="math inline">\(O(n\log V)\)</span>。</p>
<h2 id="section-2">202</h2>
<h3 id="e-2">E</h3>
<p>比较套路的题。一些带 <span class="math inline">\(\log\)</span>
的方法比较高级，这里给出一个 <em>Kenma</em> 的朴素 <span
class="math inline">\(O(n)\)</span> 做法。<br />
只需要开桶，进入子树前减去原本的贡献即可。</p>
<h2 id="section-3">212</h2>
<h3 id="e-3">E</h3>
<p>挺不错的题。考虑 DP，设 <span class="math inline">\(f_{i,j}\)</span>
表示前 <span class="math inline">\(i\)</span> 天，最终停留在 <span
class="math inline">\(j\)</span> 点的方案数。答案即为 <span
class="math inline">\(f_{k,0}\)</span>，边界 <span
class="math inline">\(f_{0,1}=1\)</span>。转移的话可以考虑容斥：设 <span
class="math inline">\(sum=\sum_j f_{i-1,j}\)</span>，则有<br />
<span class="math display">\[f_{i,u}=sum-f_{i-1,u}-\sum_{v\in
e_u}f_{i-1,v}\]</span></p>
<h2 id="section-4">214</h2>
<h3 id="e-4">E</h3>
<p>一种比较简单的做法。贪心，首先以 <span
class="math inline">\(r​\)</span> 为第一关键字，<span
class="math inline">\(l​\)</span>
为第二关键字升序排序，使用并查集检查每个 <span
class="math inline">\(l​\)</span> 向后第一个可用的位置。设其为 <span
class="math inline">\(p​\)</span>，若 <span
class="math inline">\(p&gt;r​\)</span> 则无解。值域问题使用
<code>std::map</code> 动态开点即可。</p>
<h3 id="f">F</h3>
<p>简单计数 DP。设 <span class="math inline">\(f_{i,j}\)</span>
表示考虑前 <span class="math inline">\(i\)</span> 个字符，最后一个字符为
<span class="math inline">\(j\)</span>
的不同新字符串数量。则有转移：</p>
<p><span class="math display">\[f_{i,j}=\begin{cases}f_{i-1,j}&amp;j\ne
s_i\\1+\sum_{k} f_{i-2,k}&amp;j=s_i\end{cases}​\]</span></p>
<h2 id="section-5">215</h2>
<h3 id="f-1">F</h3>
<p>看到最大化最小值容易想到二分答案。设枚举的答案是 <span
class="math inline">\(d\)</span>，check 考虑双指针，首先将点按照 <span
class="math inline">\(x\)</span> 排序，则可以框出一段左右界之差小于
<span class="math inline">\(d\)</span> 的区域，只需在两端取点即可保证
<span class="math inline">\(|x_i-x_j|\ge
d\)</span>，那么，在两边取最大最小的 <span
class="math inline">\(y_i,y_j\)</span>，相减后检查与 <span
class="math inline">\(d\)</span> 的关系即可。预处理前后缀 <span
class="math inline">\(\min,\max\)</span> 可以做到时间复杂度 <span
class="math inline">\(O(n\log V)\)</span>。</p>
<h2 id="section-6">359</h2>
<h3 id="e-5">E</h3>
<p>设第 <span class="math inline">\(i​\)</span> 个水箱的答案为 <span
class="math inline">\(f_i​\)</span>。<br />
考虑分为两种水箱：</p>
<ul>
<li><p>是当前最高的，答案为 <span class="math inline">\(i\times
h_i+1​\)</span>；</p></li>
<li><p>不是当前最高的，设上一个比它高的位置是 <span
class="math inline">\(j\)</span>，答案为 <span
class="math inline">\(f_j+(i-j)\times h_i\)</span>。</p></li>
</ul>
<p>单调栈维护即可。</p>
]]></content>
      <tags>
        <tag>题目合集</tag>
      </tags>
  </entry>
</search>
